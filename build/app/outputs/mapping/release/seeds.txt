com.cloudwebrtc.webrtc.CameraEventsHandler
androidx.startup.InitializationProvider
org.webrtc.VideoDecoder$Callback
org.webrtc.EglThread$ReleaseMonitor
org.webrtc.Camera2Session$CaptureSessionCallback
org.webrtc.HardwareVideoDecoderFactory
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor
org.webrtc.JavaI420Buffer
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl
androidx.core.app.RemoteActionCompat
androidx.window.area.reflectionguard.ExtensionWindowAreaPresentationRequirements
org.webrtc.RendererCommon$ScalingType
org.webrtc.Camera2Enumerator
androidx.window.extensions.core.util.function.Function
org.webrtc.MediaCodecWrapperFactory
org.webrtc.NetworkMonitor$InstanceHolder
io.flutter.view.FlutterCallbackInformation
com.cloudwebrtc.webrtc.audio.LocalAudioTrack
com.cloudwebrtc.webrtc.PeerConnectionObserver
org.webrtc.HardwareVideoEncoderFactory
org.webrtc.RtpCapabilities$HeaderExtensionCapability
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver$1
org.webrtc.PeerConnectionFactory
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples
org.webrtc.EglBase
org.webrtc.VideoSink
org.webrtc.RtpTransceiver
org.webrtc.NV12Buffer
org.webrtc.VideoEncoder$EncodeInfo
org.webrtc.PeerConnection$IceServer
org.webrtc.PeerConnectionFactory$Builder
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils
org.webrtc.GlGenericDrawer$ShaderType
org.webrtc.VideoEncoder$Callback
org.webrtc.AudioEncoderFactoryFactory
org.webrtc.CalledByNative
com.cloudwebrtc.webrtc.audio.AudioProcessingController
org.webrtc.Predicate$3
org.webrtc.RtpParameters$Rtcp
org.webrtc.VideoFrame
com.cloudwebrtc.webrtc.utils.AnyThreadResult
org.webrtc.Camera1Enumerator
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode
org.webrtc.CameraCapturer$1
org.webrtc.NetworkChangeDetector$NetworkInformation
org.webrtc.FileVideoCapturer$1
org.webrtc.CameraCapturer$7
org.webrtc.Camera2Capturer
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback
org.webrtc.EglBase10Impl
org.webrtc.EglRenderer
androidx.core.graphics.drawable.IconCompat
org.webrtc.CameraCapturer
com.cloudwebrtc.webrtc.video.camera.CameraUtils$NoSuchFieldWithNameException
org.webrtc.CameraCapturer$4
org.webrtc.CameraVideoCapturer$CameraEventsHandler
org.webrtc.SdpObserver
org.webrtc.CameraEnumerationAndroid$CaptureFormat
org.webrtc.Empty
com.cloudwebrtc.webrtc.audio.AudioSwitchManager
org.webrtc.VideoEncoder$ScalingSettings
org.webrtc.CameraVideoCapturer$CameraSwitchHandler
org.webrtc.FileVideoCapturer$VideoReaderY4M
org.webrtc.FrameCryptorKeyProvider
org.webrtc.PeerConnection$RTCConfiguration
org.webrtc.TimestampAligner
org.webrtc.EglBase10$Context
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer
org.webrtc.CameraCapturer$3
org.webrtc.VideoEncoder$Settings
io.flutter.view.TextureRegistry$GLTextureConsumer
org.webrtc.VideoDecoder
com.cloudwebrtc.webrtc.utils.ConstraintsMap
androidx.versionedparcelable.ParcelImpl
org.webrtc.SurfaceTextureHelper
org.webrtc.Camera1Capturer
org.webrtc.audio.WebRtcAudioManager
com.cloudwebrtc.webrtc.video.camera.CameraUtils$MeteringRectangleFactory
com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback
org.webrtc.HardwareVideoEncoder
org.webrtc.VideoEncoder$CodecSpecificInfoVP9
io.flutter.plugin.text.ProcessTextPlugin
org.webrtc.NetworkChangeDetectorFactory
org.webrtc.RTCStatsCollectorCallback
org.webrtc.SimulcastVideoEncoder
org.webrtc.EglRenderer$1
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver
org.webrtc.Size
com.cloudwebrtc.webrtc.DataChannelObserver$1
org.webrtc.CameraEnumerationAndroid$1
org.webrtc.VideoCapturer
org.webrtc.JNILogging
org.webrtc.EglRenderer$ErrorCallback
org.webrtc.audio.VolumeLogger
com.cloudwebrtc.webrtc.GetUserMediaImpl$1
org.webrtc.ThreadUtils
org.webrtc.VideoEncoder$Capabilities
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback
org.webrtc.RtpParameters$Codec
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer
org.webrtc.PeerConnection$KeyType
org.webrtc.PeerConnection$TlsCertPolicy
org.webrtc.Camera1Session
androidx.window.extensions.core.util.function.Predicate
com.cloudwebrtc.webrtc.utils.Utils
com.cloudwebrtc.webrtc.StateProvider
org.webrtc.VideoEncoder$BitrateAllocation
io.flutter.view.TextureRegistry$SurfaceProducer
org.webrtc.TextureBufferImpl$1
org.webrtc.SurfaceTextureHelper$FrameRefMonitor
org.webrtc.CameraVideoCapturer
org.webrtc.PeerConnectionFactory$ThreadInfo
androidx.core.graphics.drawable.IconCompatParcelizer
org.webrtc.EglBase14
org.webrtc.RefCountDelegate
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange
org.webrtc.AddIceObserver
com.cloudwebrtc.webrtc.utils.EglUtils
org.webrtc.EglBase$Context
androidx.profileinstaller.ProfileInstallReceiver
org.webrtc.WebrtcBuildVersion
com.cloudwebrtc.webrtc.utils.PermissionUtils$1
org.webrtc.VideoFrameBufferType
org.webrtc.MediaCodecUtils$1
org.webrtc.VideoEncoderWrapper
org.webrtc.NetworkMonitorAutoDetect
org.webrtc.YuvConverter
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils$SizeFactory
org.webrtc.RendererCommon
org.webrtc.FrameCryptorFactory
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback
org.webrtc.VideoProcessor$FrameAdaptationParameters
kotlin.coroutines.jvm.internal.BaseContinuationImpl
org.webrtc.TextureBufferImpl
org.webrtc.ExternalAudioProcessingFactory
org.webrtc.SessionDescription$Type
org.webrtc.MediaCodecUtils
org.webrtc.NetworkMonitor$1
kotlinx.coroutines.internal.StackTraceRecoveryKt
org.webrtc.VideoDecoderFallback
org.webrtc.RtpReceiver$Observer
org.webrtc.ContextUtils
org.webrtc.EglBase14Impl
org.webrtc.VideoEncoder$RateControlParameters
org.webrtc.EncodedImage$FrameType
org.webrtc.PeerConnection$PeerConnectionState
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils$1
com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter$ExternalAudioFrameProcessing
org.webrtc.audio.JavaAudioDeviceModule$Builder
org.webrtc.VideoSource$AspectRatio
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils$1
org.webrtc.RtpCapabilities$CodecCapability
org.webrtc.ExternalAudioProcessingFactory$AudioProcessing
org.webrtc.VideoProcessor
org.webrtc.audio.AudioDeviceModule
org.webrtc.DataChannel
org.webrtc.DataChannel$Observer
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory
org.webrtc.MediaStreamTrack$MediaType
org.webrtc.PeerConnection$AdapterType
org.webrtc.MediaConstraints$KeyValuePair
com.cloudwebrtc.webrtc.video.camera.Point
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment
org.webrtc.BitrateAdjuster
org.webrtc.SSLCertificateVerifier
org.webrtc.CallSessionFileRotatingLogSink
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$1
org.webrtc.NativeAndroidVideoTrackSource
org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata
org.webrtc.WrappedNativeVideoDecoder
org.webrtc.RendererCommon$VideoLayoutMeasure
org.webrtc.EglBase10Impl$Context
com.cloudwebrtc.webrtc.video.LocalVideoTrack
org.webrtc.GlGenericDrawer
com.cloudwebrtc.webrtc.video.camera.SdkCapabilityChecker
org.webrtc.MediaStreamTrack
org.webrtc.LibaomAv1Encoder
org.webrtc.VideoDecoderWrapper
org.webrtc.BuiltinAudioEncoderFactoryFactory
org.webrtc.VideoFileRenderer$1
org.webrtc.GlTextureFrameBuffer
org.webrtc.FrameCryptor$FrameCryptionState
org.webrtc.audio.VolumeLogger$LogVolumeTask
org.webrtc.audio.WebRtcAudioUtils
com.cloudwebrtc.webrtc.LocalTrack
org.webrtc.RendererCommon$1
org.webrtc.Predicate
org.webrtc.EglBase14$Context
org.webrtc.SurfaceTextureHelper$3
org.webrtc.Metrics
org.webrtc.RefCounted
org.webrtc.NetworkChangeDetector$IPAddress
org.webrtc.SessionDescription
org.webrtc.audio.WebRtcAudioTrack
org.webrtc.SurfaceEglRenderer
org.webrtc.ThreadUtils$1CaughtException
org.webrtc.VideoEncoder$CodecSpecificInfoAV1
com.cloudwebrtc.webrtc.utils.ObjectType
org.webrtc.CameraCapturer$5
com.cloudwebrtc.webrtc.GetUserMediaImpl$5
org.webrtc.FrameCryptor$Observer
org.webrtc.PeerConnectionDependencies$Builder
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$1
org.webrtc.DefaultVideoEncoderFactory
org.webrtc.VideoEncoder$CodecSpecificInfoVP8
org.webrtc.YuvHelper
org.webrtc.AudioProcessingFactory
org.webrtc.JniHelper
com.cloudwebrtc.webrtc.audio.RecordSamplesReadyCallbackAdapter
org.webrtc.VideoFrame$Buffer
org.webrtc.SoftwareVideoEncoderFactory$1
org.webrtc.Predicate$2
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver
org.webrtc.VideoEncoder$CodecSpecificInfo
org.webrtc.EglBase10Impl$1FakeSurfaceHolder
xyz.luan.audioplayers.AudioplayersPlugin
org.webrtc.PeerConnectionFactory$Options
com.cloudwebrtc.webrtc.record.FrameCapturer
org.webrtc.MediaConstraints
org.webrtc.FileVideoCapturer
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5
org.webrtc.WrappedNativeI420Buffer
org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback
org.webrtc.video.CustomVideoDecoderFactory
org.webrtc.CameraEnumerator
org.webrtc.FrameCryptorAlgorithm
org.webrtc.Camera2Session$CameraStateCallback
org.webrtc.EglBase14Impl$EglConnection
com.cloudwebrtc.webrtc.MethodCallHandlerImpl
org.webrtc.GlRectDrawer$ShaderCallbacks
org.webrtc.EglBase$ConfigBuilder
org.webrtc.ThreadUtils$1Result
org.webrtc.MediaCodecVideoDecoderFactory
org.webrtc.EglBase10$EglConnection
androidx.lifecycle.ProcessLifecycleInitializer
org.webrtc.FrameEncryptor
com.cloudwebrtc.webrtc.audio.AudioDeviceKind
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3
org.webrtc.Camera1Session$1
org.webrtc.MediaStream
org.webrtc.FrameCryptor
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1
org.webrtc.VideoDecoderFactory
org.webrtc.EglThread$HandlerWithExceptionCallbacks
org.webrtc.CameraCapturer$SwitchState
org.webrtc.SurfaceTextureHelper$2
com.cloudwebrtc.webrtc.R
org.webrtc.AndroidVideoDecoder$1
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfoEx
org.webrtc.MediaSource$State
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate
org.webrtc.CapturerObserver
org.webrtc.HardwareVideoEncoder$BusyCount
org.webrtc.audio.WebRtcAudioEffects
org.webrtc.audio.WebRtcAudioTrackUtils
org.webrtc.EglBase14Impl$Context
org.webrtc.DataChannel$Buffer
org.webrtc.PeerConnection$IceGatheringState
org.webrtc.EglBase10Impl$EglConnection
android.support.v4.graphics.drawable.IconCompatParcelizer
org.webrtc.VideoCodecStatus
org.webrtc.AndroidVideoDecoder$FrameInfo
org.webrtc.AudioSource
org.webrtc.AndroidVideoDecoder
io.flutter.embedding.engine.FlutterJNI
io.flutter.view.TextureRegistry$SurfaceTextureEntry
org.webrtc.NativePeerConnectionFactory
org.webrtc.PlatformSoftwareVideoDecoderFactory$1
org.webrtc.CameraEnumerationAndroid$2
org.webrtc.GlGenericDrawer$ShaderCallbacks
org.webrtc.VideoFrame$I420Buffer
org.webrtc.RtpCapabilities
org.webrtc.Camera2Helper
org.webrtc.EglBase14$EglConnection
org.webrtc.CameraCapturer$9
org.webrtc.H264Utils
org.webrtc.ThreadUtils$4
org.webrtc.CalledByNativeUnchecked
org.webrtc.Histogram
org.webrtc.PeerConnection$Observer
org.webrtc.Camera2Session$SessionState
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer
org.webrtc.HardwareVideoEncoderFactory$1
com.cloudwebrtc.webrtc.video.camera.CameraUtils
org.webrtc.CryptoOptions$Builder
org.webrtc.NetEqFactoryFactory
org.webrtc.EglRenderer$FrameListenerAndParams
org.webrtc.CameraSession$FailureType
org.webrtc.Camera2Session$CameraCaptureCallback
org.webrtc.CameraEnumerationAndroid$ClosestComparator
org.webrtc.FecControllerFactoryFactoryInterface
org.webrtc.CameraVideoCapturer$CameraStatistics
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper
org.webrtc.EglThread
org.webrtc.VideoTrack
org.webrtc.NetworkControllerFactoryFactory
org.webrtc.VideoEncoder
org.webrtc.NetworkMonitor$2
org.webrtc.GlRectDrawer
org.webrtc.JniCommon
org.webrtc.CameraVideoCapturer$MediaRecorderHandler
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate
org.webrtc.PeerConnection$PortPrunePolicy
com.cloudwebrtc.webrtc.GetUserMediaImpl$6
org.webrtc.Loggable
org.webrtc.IceCandidate
org.webrtc.RenderSynchronizer
androidx.window.extensions.core.util.function.Consumer
org.webrtc.NetworkChangeDetector$ConnectionType
org.webrtc.VideoEncoder$EncoderInfo
org.webrtc.PeerConnectionDependencies
org.webrtc.CameraSession
org.webrtc.EglBase$EglConnection
io.flutter.embedding.engine.FlutterOverlaySurface
org.webrtc.NV21Buffer
org.webrtc.video.CustomVideoEncoderFactory
org.webrtc.CameraCapturer$2
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder
org.webrtc.ThreadUtils$ThreadChecker
org.webrtc.ScreenCapturerAndroid$1
org.webrtc.DefaultVideoDecoderFactory
org.webrtc.Camera1Session$2
org.webrtc.RendererCommon$GlDrawer
org.webrtc.TextureBufferImpl$RefCountMonitor
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference
org.webrtc.NetworkMonitor$NetworkObserver
org.webrtc.EncodedImage$Builder
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment
org.webrtc.DtmfSender
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread
org.webrtc.AudioDecoderFactoryFactory
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager$1
org.webrtc.PeerConnection$CandidateNetworkPolicy
org.webrtc.PeerConnection$IceTransportsType
org.webrtc.PeerConnection$RtcpMuxPolicy
org.webrtc.RtpParameters$Encoding
org.webrtc.CandidatePairChangeEvent
org.webrtc.NetworkMonitorAutoDetect$NetworkState
org.webrtc.audio.WebRtcAudioRecord
org.webrtc.ThreadUtils$BlockingOperation
org.webrtc.Priority
org.webrtc.AudioTrack
org.webrtc.BuiltinAudioDecoderFactoryFactory
io.flutter.plugin.platform.SingleViewPresentation
com.cloudwebrtc.webrtc.audio.AudioUtils
com.cloudwebrtc.webrtc.video.camera.CameraUtils$1
org.webrtc.MediaCodecWrapperFactoryImpl
com.cloudwebrtc.webrtc.utils.PermissionUtils
org.webrtc.PeerConnection$IceServer$Builder
org.webrtc.LibvpxVp9Decoder
org.webrtc.Logging$Severity
org.webrtc.SoftwareVideoEncoderFactory
org.webrtc.Camera1Helper
org.webrtc.RTCStatsReport
org.webrtc.RtpParameters$DegradationPreference
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2
org.webrtc.VideoFrame$TextureBuffer$Type
com.cloudwebrtc.webrtc.GetUserMediaImpl$7
org.webrtc.NetworkStatePredictorFactoryFactory
org.webrtc.WrappedVideoDecoderFactory
org.webrtc.VideoEncoderFactory$VideoEncoderSelector
com.cloudwebrtc.webrtc.utils.AnyThreadSink
com.cloudwebrtc.webrtc.video.LocalVideoTrack$ExternalVideoFrameProcessing
org.webrtc.NativeLibrary
org.webrtc.PeerConnection$SdpSemantics
android.support.v4.app.RemoteActionCompatParcelizer
org.webrtc.SurfaceViewRenderer
org.webrtc.GlShader
org.webrtc.PeerConnection$TcpCandidatePolicy
org.webrtc.SurfaceTextureHelper$1
io.flutter.plugins.pathprovider.PathProviderPlugin
org.webrtc.EglRenderer$2
org.webrtc.PeerConnection$IceConnectionState
org.webrtc.NativeLibrary$DefaultLoader
androidx.versionedparcelable.CustomVersionedParcelable
org.webrtc.RTCStats
org.webrtc.EglThread$RenderUpdate
org.webrtc.Logging
org.webrtc.VideoFileRenderer
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3
org.webrtc.GlUtil
org.webrtc.NativeLibraryLoader
org.webrtc.VideoFrameDrawer
org.webrtc.VideoEncoder$ResolutionBitrateLimits
org.webrtc.VideoDecoder$Settings
org.webrtc.PeerConnectionFactory$InitializationOptions
org.webrtc.RtpTransceiver$RtpTransceiverInit
com.cloudwebrtc.webrtc.utils.Callback
com.example.webrtc_translator.MainActivity
com.cloudwebrtc.webrtc.PeerConnectionObserver$1
org.webrtc.ThreadUtils$2
org.webrtc.NetworkMonitor
org.webrtc.Metrics$HistogramInfo
org.webrtc.PeerConnection
org.webrtc.SoftwareVideoDecoderFactory
org.webrtc.WebRtcClassLoader
org.webrtc.BaseBitrateAdjuster
androidx.window.area.reflectionguard.ExtensionWindowAreaStatusRequirements
org.webrtc.RenderSynchronizer$Listener
androidx.core.app.CoreComponentFactory
org.webrtc.NetworkChangeDetector$Observer
org.webrtc.EncodedImage
org.webrtc.CameraEnumerationAndroid
org.webrtc.RtpParameters$HeaderExtension
org.webrtc.VideoDecoder$DecodeInfo
org.webrtc.FramerateBitrateAdjuster
org.webrtc.PeerConnection$ContinualGatheringPolicy
io.flutter.view.TextureRegistry$ImageTextureEntry
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState
org.webrtc.TurnCustomizer
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory
org.webrtc.Camera1Session$SessionState
org.webrtc.CryptoOptions
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback
org.webrtc.RtpTransceiver$RtpTransceiverDirection
org.webrtc.CameraSession$Events
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils
org.webrtc.RtpParameters
org.webrtc.Logging$1
androidx.annotation.Keep
org.webrtc.CameraSession$CreateSessionCallback
org.webrtc.RendererCommon$RendererEvents
io.flutter.view.TextureRegistry$ImageConsumer
com.cloudwebrtc.webrtc.GetUserMediaImpl$4
org.webrtc.StatsObserver
com.cloudwebrtc.webrtc.GetUserMediaImpl$IsCameraEnabled
org.webrtc.LibvpxVp8Encoder
org.webrtc.EglRenderer$FrameListener
org.webrtc.EglRenderer$EglSurfaceCreation
io.flutter.plugins.GeneratedPluginRegistrant
androidx.window.layout.adapter.sidecar.DistinctElementSidecarCallback
org.webrtc.VideoFrameDrawer$1
com.cloudwebrtc.webrtc.record.VideoFileRenderer
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$7
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$1
org.webrtc.VideoCodecMimeType
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper
org.webrtc.HardwareVideoDecoderFactory$1
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$2
org.webrtc.VideoFrame$TextureBuffer
org.webrtc.DataChannel$Init
com.cloudwebrtc.webrtc.record.MediaRecorderImpl
org.webrtc.LibvpxVp9Encoder
org.webrtc.FrameDecryptor
org.webrtc.ThreadUtils$1
com.cloudwebrtc.webrtc.SurfaceTextureRenderer
org.webrtc.VideoSource$1
com.cloudwebrtc.webrtc.video.VideoCapturerInfo
org.webrtc.DataChannel$State
org.webrtc.VideoEncoderFallback
org.webrtc.ApplicationContextProvider
org.webrtc.DynamicBitrateAdjuster
org.webrtc.audio.LowLatencyAudioBufferManager
com.cloudwebrtc.webrtc.record.AudioChannel
org.webrtc.MediaSource
org.webrtc.Predicate$1
kotlinx.coroutines.android.AndroidDispatcherFactory
org.webrtc.ScreenCapturerAndroid
org.webrtc.StatsReport
org.webrtc.VideoEncoder$CodecSpecificInfoH264
com.cloudwebrtc.webrtc.utils.Utils$1
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$6
org.webrtc.StatsReport$Value
org.webrtc.CryptoOptions$Srtp
org.webrtc.NativeCapturerObserver
org.webrtc.ThreadUtils$3
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry
org.webrtc.TextureBufferImpl$2
org.webrtc.IceCandidateErrorEvent
com.cloudwebrtc.webrtc.GetUserMediaImpl
org.webrtc.GlUtil$GlOutOfMemoryException
org.webrtc.NetworkChangeDetector
com.cloudwebrtc.webrtc.GetUserMediaImpl$2
androidx.core.app.RemoteActionCompatParcelizer
io.flutter.view.AccessibilityViewEmbedder
org.webrtc.PeerConnection$SignalingState
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback
org.webrtc.audio.WebRtcAudioRecord$1
org.webrtc.SimulcastVideoEncoderFactory
org.webrtc.NetworkPreference
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor
org.webrtc.Camera2Session
org.webrtc.CameraCapturer$6
org.webrtc.VideoFrameDrawer$YuvUploader
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback
org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack
org.webrtc.YuvConverter$ShaderCallbacks
org.webrtc.AudioTrackSink
com.cloudwebrtc.webrtc.utils.ConstraintsArray
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4
org.webrtc.MediaStreamTrack$State
org.webrtc.PeerConnection$BundlePolicy
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3$1
org.webrtc.CameraCapturer$8
org.webrtc.VideoCodecInfo
org.webrtc.CryptoOptions$SFrame
org.webrtc.VideoEncoderFactory
com.cloudwebrtc.webrtc.audio.PlaybackSamplesReadyCallbackAdapter
org.webrtc.CameraVideoCapturer$CameraStatistics$1
org.webrtc.PlatformSoftwareVideoDecoderFactory
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager
org.webrtc.EglBase10
com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter
androidx.window.layout.adapter.sidecar.SidecarCompat$TranslatingCallback
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor
org.webrtc.RtcCertificatePem
org.webrtc.R
org.webrtc.LibvpxVp8Decoder
org.webrtc.WrappedNativeVideoEncoder
org.webrtc.audio.JavaAudioDeviceModule
org.webrtc.RtpReceiver
org.webrtc.SoftwareVideoDecoderFactory$1
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils$MeteringRectangleFactory
org.webrtc.VideoSource
com.cloudwebrtc.webrtc.DataChannelObserver
org.webrtc.RtpSender
androidx.profileinstaller.ProfileInstallerInitializer
org.webrtc.FileVideoCapturer$VideoReader
com.cloudwebrtc.webrtc.GetUserMediaImpl$3
org.webrtc.HardwareVideoEncoder$1
org.webrtc.MediaCodecWrapper
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper
org.webrtc.Logging$TraceLevel
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State OPEN
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$SFrame sframe
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: org.webrtc.VideoTrack videoTrack
org.webrtc.VideoFileRenderer: int outputFileHeight
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType YUV
org.webrtc.Camera2Session: int cameraOrientation
org.webrtc.CameraCapturer$9: org.webrtc.CameraCapturer this$0
org.webrtc.Metrics: java.util.Map map
org.webrtc.MediaCodecUtils: int[] ENCODER_COLOR_FORMATS
org.webrtc.VideoEncoder$Settings: boolean automaticResizeOn
org.webrtc.FrameCryptorAlgorithm: org.webrtc.FrameCryptorAlgorithm AES_GCM
com.cloudwebrtc.webrtc.audio.AudioProcessingController: com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter capturePostProcessing
org.webrtc.YuvConverter: org.webrtc.VideoFrameDrawer videoFrameDrawer
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState OK
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: android.content.Context context
org.webrtc.RtpCapabilities: java.util.List codecs
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PERMISSION_VIDEO
org.webrtc.H264Utils: java.lang.String H264_PROFILE_CONSTRAINED_HIGH
org.webrtc.SurfaceTextureHelper: int oesTextureId
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference MAINTAIN_FRAMERATE
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.video.CustomVideoDecoderFactory videoDecoderFactory
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState ERROR
kotlinx.coroutines.internal.ThreadSafeHeap: int _size
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType AV1
org.webrtc.HardwareVideoEncoder: org.webrtc.BitrateAdjuster bitrateAdjuster
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel OUTPUT
org.webrtc.DynamicBitrateAdjuster: int bitrateAdjustmentScaleExp
org.webrtc.EglRenderer$FrameListenerAndParams: org.webrtc.RendererCommon$GlDrawer drawer
org.webrtc.PeerConnection: java.util.List localStreams
org.webrtc.HardwareVideoEncoderFactory$1: int[] $SwitchMap$org$webrtc$VideoCodecMimeType
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: boolean isPortrait
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy DISABLED
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.content.Context context
org.webrtc.PeerConnection$IceServer: java.lang.String hostname
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3: com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer this$0
org.webrtc.VideoProcessor$FrameAdaptationParameters: int scaleWidth
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int deferredInsetTypes
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.view.WindowManager windowManager
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.StateProvider stateProvider
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: boolean isFirstFrameRendered
org.webrtc.CameraCapturer$6: org.webrtc.CameraCapturer this$0
org.webrtc.audio.WebRtcAudioRecord: boolean microphoneMute
com.cloudwebrtc.webrtc.DataChannelObserver$1: int[] $SwitchMap$org$webrtc$DataChannel$State
org.webrtc.CryptoOptions$Builder: boolean enableAes128Sha1_32CryptoCipher
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_TIMER
org.webrtc.VideoProcessor$FrameAdaptationParameters: int cropWidth
org.webrtc.Camera1Enumerator: java.lang.String TAG
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$AdapterType networkPreference
org.webrtc.Predicate$2: org.webrtc.Predicate val$other
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLContext eglContext
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy[] $VALUES
org.webrtc.PeerConnection$IceServer: java.lang.String password
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State ENDED
org.webrtc.Metrics: java.lang.String TAG
org.webrtc.CameraCapturer: int width
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean newFrameAvailable
org.webrtc.PeerConnectionFactory: java.lang.String VIDEO_CAPTURER_THREAD_NAME
org.webrtc.Camera2Session: android.hardware.camera2.CameraManager cameraManager
org.webrtc.RtpTransceiver: org.webrtc.RtpSender cachedSender
org.webrtc.EglBase: int EGL_OPENGL_ES3_BIT
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event$Companion Companion
org.webrtc.FrameCryptorAlgorithm: org.webrtc.FrameCryptorAlgorithm AES_CBC
org.webrtc.CryptoOptions$Builder: boolean enableEncryptedRtpHeaderExtensions
org.webrtc.MediaCodecUtils: int[] TEXTURE_COLOR_FORMATS
org.webrtc.PeerConnection$IceServer: java.util.List tlsEllipticCurves
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$6: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
org.webrtc.RenderSynchronizer: java.lang.Object lock
org.webrtc.HardwareVideoEncoder: java.util.concurrent.BlockingDeque outputBuilders
org.webrtc.VideoFileRenderer: android.os.Handler fileThreadHandler
org.webrtc.HardwareVideoEncoder: org.webrtc.HardwareVideoEncoder$BusyCount outputBuffersBusyCount
org.webrtc.GlTextureFrameBuffer: int pixelFormat
org.webrtc.FileVideoCapturer: java.lang.String TAG
org.webrtc.RtpTransceiver$RtpTransceiverDirection: int nativeIndex
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture
io.flutter.view.AccessibilityViewEmbedder: android.view.View rootAccessibilityView
org.webrtc.TextureBufferImpl: android.os.Handler toI420Handler
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.audio.AudioDeviceModule audioDeviceModule
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_4G
org.webrtc.HardwareVideoEncoderFactory: int PERIODIC_KEY_FRAME_INTERVAL_S
org.webrtc.RtpParameters: org.webrtc.RtpParameters$Rtcp rtcp
org.webrtc.MediaStreamTrack: long nativeTrack
org.webrtc.EncodedImage: long captureTimeNs
kotlinx.coroutines.internal.LimitedDispatcher: int runningWorkers
org.webrtc.SurfaceTextureHelper$1: org.webrtc.EglBase$Context val$sharedContext
org.webrtc.EglThread: org.webrtc.RenderSynchronizer renderSynchronizer
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
androidx.versionedparcelable.ParcelImpl: android.os.Parcelable$Creator CREATOR
org.webrtc.NetworkMonitor: int numObservers
org.webrtc.Camera1Session: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
org.webrtc.DataChannel$Buffer: boolean binary
org.webrtc.TextureBufferImpl$2: org.webrtc.TextureBufferImpl this$0
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy[] $VALUES
org.webrtc.Camera2Session: long constructionTimeNs
com.cloudwebrtc.webrtc.video.camera.Point: java.lang.Double x
org.webrtc.RtpParameters$Encoding: java.lang.Double scaleResolutionDownBy
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int width
org.webrtc.audio.JavaAudioDeviceModule: boolean useStereoOutput
org.webrtc.PeerConnection$RTCConfiguration: boolean enableDscp
org.webrtc.NetworkMonitor: java.lang.Object networkChangeDetectorLock
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: boolean keepAlive
org.webrtc.DataChannel$Init: int maxRetransmitTimeMs
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.audio.AudioDeviceModule audioDeviceModule
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: byte[] data
org.webrtc.MediaStreamTrack: java.lang.String AUDIO_TRACK_KIND
org.webrtc.VideoEncoder$RateControlParameters: org.webrtc.VideoEncoder$BitrateAllocation bitrate
org.webrtc.RtpParameters: java.lang.String transactionId
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState IDLE
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$ConnectionType underlyingTypeForVpn
org.webrtc.EncodedImage: org.webrtc.EncodedImage$FrameType frameType
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind EARPIECE
org.webrtc.YuvConverter$ShaderCallbacks: float[] uCoeffs
org.webrtc.IceCandidate: int sdpMLineIndex
org.webrtc.EglRenderer: long statisticsStartTimeNs
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: io.flutter.plugin.common.EventChannel$EventSink eventSink
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType H265
org.webrtc.CameraCapturer$5: org.webrtc.CameraCapturer this$0
org.webrtc.RendererCommon$1: int[] $SwitchMap$org$webrtc$RendererCommon$ScalingType
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState KEYRATCHETED
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaMuxer mediaMuxer
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType NONE
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String TAG
org.webrtc.VideoSource: boolean isCapturerRunning
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR_2G
org.webrtc.EglBase$ConfigBuilder: boolean hasAlphaChannel
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo signalingThread
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed
org.webrtc.Camera2Session$CaptureSessionCallback: org.webrtc.Camera2Session this$0
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy TLS_CERT_POLICY_SECURE
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int outputFileWidth
org.webrtc.MediaConstraints: java.util.List optional
org.webrtc.HardwareVideoEncoderFactory: int QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_N_MS
com.cloudwebrtc.webrtc.video.VideoCapturerInfo: java.lang.String cameraName
org.webrtc.CameraCapturer$6: org.webrtc.CameraSession val$oldSession
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State MUTED
org.webrtc.EglBase10Impl$Context: javax.microedition.khronos.egl.EGL10 egl
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: java.util.ArrayList eventQueue
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver$1: com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor val$this$0
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType VP9
org.webrtc.ThreadUtils$2: java.util.concurrent.CountDownLatch val$latch
org.webrtc.EglRenderer$FrameListenerAndParams: boolean applyFpsReduction
org.webrtc.WrappedVideoDecoderFactory: org.webrtc.VideoDecoderFactory softwareVideoDecoderFactory
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: java.lang.String ownerTag
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE
org.webrtc.PeerConnection$RTCConfiguration: int audioJitterBufferMaxPackets
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.PeerConnectionFactory mFactory
org.webrtc.VideoProcessor$FrameAdaptationParameters: int cropX
org.webrtc.audio.WebRtcAudioUtils: java.lang.String TAG
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_ALL
org.webrtc.PeerConnection$AdapterType: java.lang.Integer bitMask
org.webrtc.MediaSource: long nativeSource
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: java.lang.Class audioDeviceClass
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.lang.String TAG
org.webrtc.CandidatePairChangeEvent: org.webrtc.IceCandidate remote
org.webrtc.GlGenericDrawer: org.webrtc.GlGenericDrawer$ShaderType currentShaderType
org.webrtc.AndroidVideoDecoder: boolean running
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoDecoderFactory platformSoftwareVideoDecoderFactory
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.util.SparseArray mediaRecorders
org.webrtc.DataChannel$Init: int maxRetransmits
org.webrtc.EglRenderer$EglSurfaceCreation: org.webrtc.EglRenderer this$0
org.webrtc.EglThread: java.util.List pendingRenderUpdates
com.cloudwebrtc.webrtc.DataChannelObserver: java.util.ArrayList eventQueue
org.webrtc.EglThread: org.webrtc.EglThread$ReleaseMonitor releaseMonitor
org.webrtc.VideoEncoder$Settings: int numberOfCores
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.Logging$Severity loggableSeverity
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType MEDIA_TYPE_VIDEO
com.cloudwebrtc.webrtc.record.FrameCapturer: org.webrtc.VideoTrack videoTrack
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState CONNECTED
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View view
org.webrtc.EglRenderer: org.webrtc.EglRenderer$EglSurfaceCreation eglSurfaceCreationRunnable
org.webrtc.audio.JavaAudioDeviceModule: boolean useStereoInput
org.webrtc.RtpParameters$Encoding: java.lang.Long ssrc
kotlinx.coroutines.DefaultExecutor: int debugStatus
io.flutter.view.AccessibilityViewEmbedder: java.util.Map originToFlutterId
org.webrtc.RtpParameters$Rtcp: java.lang.String cname
org.webrtc.audio.JavaAudioDeviceModule$Builder: android.media.AudioManager audioManager
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState NEW
org.webrtc.NetworkMonitorAutoDetect: android.content.Context context
kotlinx.coroutines.JobSupport: java.lang.Object _parentHandle
org.webrtc.RtpCapabilities$CodecCapability: java.lang.String name
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int VIRTUAL_DISPLAY_DPI
org.webrtc.VideoFrameDrawer: int renderHeight
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int underlyingNetworkSubtypeForVpn
org.webrtc.FileVideoCapturer$VideoReaderY4M: int FRAME_DELIMETER_LENGTH
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $VALUES
org.webrtc.HardwareVideoEncoder: java.lang.String TAG
org.webrtc.H264Utils: java.lang.String H264_FMTP_LEVEL_ASYMMETRY_ALLOWED
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: org.webrtc.audio.WebRtcAudioTrack this$0
org.webrtc.PeerConnection$RTCConfiguration: int maxIPv6Networks
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: java.lang.String typeName
org.webrtc.VideoEncoderFallback: org.webrtc.VideoEncoder primary
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioTrack audioTrack
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean notifiedDestroy
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: io.flutter.view.TextureRegistry textures
com.cloudwebrtc.webrtc.record.FrameCapturer: java.io.File file
org.webrtc.NativeAndroidVideoTrackSource: long nativeAndroidVideoTrackSource
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer dataU
kotlinx.coroutines.JobSupport$Finishing: int _isCompleting
org.webrtc.audio.WebRtcAudioTrack: boolean useLowLatency
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP
com.cloudwebrtc.webrtc.video.camera.CameraUtils$NoSuchFieldWithNameException: com.cloudwebrtc.webrtc.video.camera.CameraUtils this$0
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_BLUETOOTH
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type ANSWER
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.media.projection.MediaProjection$Callback mediaProjectionCallback
org.webrtc.NativeCapturerObserver: org.webrtc.NativeAndroidVideoTrackSource nativeAndroidVideoTrackSource
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor this$0
org.webrtc.Camera2Session: android.hardware.camera2.CameraCharacteristics cameraCharacteristics
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.NetEqFactoryFactory neteqFactoryFactory
org.webrtc.H264Utils: java.lang.String H264_CONSTRAINED_BASELINE_3_1
org.webrtc.PeerConnection$RTCConfiguration: boolean suspendBelowMinBitrate
org.webrtc.MediaStream: java.util.List videoTracks
com.cloudwebrtc.webrtc.record.VideoFileRenderer: org.webrtc.EglBase$Context sharedContext
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState NEW
org.webrtc.FramerateBitrateAdjuster: int DEFAULT_FRAMERATE_FPS
org.webrtc.EglRenderer: org.webrtc.EglRenderer$ErrorCallback errorCallback
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLConfig eglConfig
org.webrtc.audio.WebRtcAudioTrack: byte[] emptyBytes
org.webrtc.VideoFrameBufferType: int NV12
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState NEW
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map dataChannels
org.webrtc.ThreadUtils$3: java.util.concurrent.CountDownLatch val$barrier
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: long id
org.webrtc.SimulcastVideoEncoder: org.webrtc.VideoEncoderFactory primary
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics PLAN_B
org.webrtc.audio.WebRtcAudioRecord: int audioFormat
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType ERROR
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long lastQueueTime
org.webrtc.Camera2Session: int framerate
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaCodec encoder
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int IFRAME_INTERVAL
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: int _rotation
org.webrtc.EglRenderer$2: org.webrtc.EglRenderer this$0
org.webrtc.EglRenderer$FrameListenerAndParams: float scale
org.webrtc.PeerConnection$IceServer$Builder: java.lang.String username
org.webrtc.FileVideoCapturer$VideoReaderY4M: int frameHeight
org.webrtc.audio.WebRtcAudioTrack: boolean speakerMute
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_VPN
org.webrtc.FileVideoCapturer$VideoReaderY4M: int frameWidth
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: int audioAttributeContentType
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$PortPrunePolicy turnPortPrunePolicy
org.webrtc.RenderSynchronizer: boolean renderWindowOpen
org.webrtc.CameraCapturer: org.webrtc.CameraEnumerator cameraEnumerator
org.webrtc.CameraEnumerationAndroid$1: int MIN_FPS_THRESHOLD
org.webrtc.EncodedImage$Builder: int rotation
org.webrtc.CryptoOptions$Builder: boolean requireFrameEncryption
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: java.lang.Integer id
org.webrtc.EglBase14Impl: org.webrtc.EglBase14Impl$EglConnection eglConnection
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.Object _preHandler
org.webrtc.NV12Buffer: int sliceHeight
org.webrtc.CameraVideoCapturer$CameraStatistics$1: org.webrtc.CameraVideoCapturer$CameraStatistics this$0
org.webrtc.CameraCapturer: int OPEN_CAMERA_DELAY_MS
org.webrtc.PeerConnectionFactory: boolean internalTracerInitialized
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind WIRED_HEADSET
org.webrtc.HardwareVideoEncoder: org.webrtc.EglBase14$Context sharedContext
org.webrtc.BaseBitrateAdjuster: int targetBitrateBps
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo networkThread
org.webrtc.IceCandidate: java.lang.String serverUrl
org.webrtc.video.CustomVideoEncoderFactory: com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper simulcastVideoEncoderFactoryWrapper
org.webrtc.SurfaceTextureHelper: boolean isTextureInUse
org.webrtc.EglRenderer$FrameListenerAndParams: org.webrtc.EglRenderer$FrameListener listener
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: java.lang.String fieldTrials
org.webrtc.VideoFrameDrawer: android.graphics.Matrix renderMatrix
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.audio.PlaybackSamplesReadyCallbackAdapter playbackSamplesReadyCallbackAdapter
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer this$0
org.webrtc.RTCStats: long timestampUs
org.webrtc.SimulcastVideoEncoder: org.webrtc.VideoCodecInfo info
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State[] $VALUES
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_NONE
org.webrtc.EglRenderer: org.webrtc.VideoFrame pendingFrame
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State INITIALIZING
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: android.media.AudioManager$OnAudioFocusChangeListener audioFocusChangeListener
io.flutter.embedding.engine.FlutterJNI: float displayHeight
org.webrtc.PeerConnectionDependencies$Builder: org.webrtc.PeerConnection$Observer observer
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map transceivers
org.webrtc.CameraCapturer: boolean firstFrameObserved
org.webrtc.audio.JavaAudioDeviceModule$Builder: int outputSampleRate
org.webrtc.EglRenderer: long renderSwapBufferTimeNs
org.webrtc.EncodedImage: int encodedWidth
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType[] $VALUES
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int trackIndex
org.webrtc.audio.JavaAudioDeviceModule: java.lang.Object nativeLock
org.webrtc.RtpCapabilities$CodecCapability: java.lang.String mimeType
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int height
org.webrtc.RtpCapabilities$CodecCapability: int preferredPayloadType
org.webrtc.RtpReceiver: org.webrtc.MediaStreamTrack cachedTrack
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.NativeLibraryLoader nativeLibraryLoader
io.flutter.embedding.engine.FlutterJNI: boolean loadLibraryCalled
org.webrtc.Metrics$HistogramInfo: int max
org.webrtc.PeerConnection$RTCConfiguration: boolean presumeWritableWhenFullyRelayed
kotlinx.coroutines.internal.ResizableAtomicArray: java.util.concurrent.atomic.AtomicReferenceArray array
org.webrtc.EglRenderer: boolean usePresentationTimeStamp
org.webrtc.Camera2Enumerator: double NANO_SECONDS_PER_SECOND
org.webrtc.EglBase: int[] CONFIG_RGBA
com.cloudwebrtc.webrtc.CameraEventsHandler: java.lang.String TAG
com.cloudwebrtc.webrtc.DataChannelObserver: io.flutter.plugin.common.EventChannel$EventSink eventSink
io.flutter.embedding.engine.FlutterJNI: java.util.Set engineLifecycleListeners
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int height
com.cloudwebrtc.webrtc.utils.EglUtils: org.webrtc.EglBase rootEglBase
org.webrtc.ThreadUtils$ThreadChecker: java.lang.Thread thread
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoDecoderFactory softwareVideoDecoderFactory
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean CLEANUP_ON_MEMORY_PRESSURE
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: java.io.File recordFile
org.webrtc.audio.JavaAudioDeviceModule: android.media.AudioManager audioManager
org.webrtc.VideoFrameBufferType: int I420
org.webrtc.CameraVideoCapturer$CameraStatistics: int freezePeriodCount
org.webrtc.RtpParameters$Codec: java.lang.Integer numChannels
io.flutter.plugin.platform.SingleViewPresentation: android.view.View$OnFocusChangeListener focusChangeListener
org.webrtc.VideoFileRenderer: java.lang.String TAG
org.webrtc.PeerConnectionFactory$Options: boolean disableNetworkMonitor
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceUnwritableTimeMs
org.webrtc.EglRenderer: org.webrtc.GlTextureFrameBuffer bitmapTextureFramebuffer
org.webrtc.SurfaceTextureHelper: java.lang.String TAG
org.webrtc.VideoFileRenderer: java.io.FileOutputStream videoOutFile
org.webrtc.PeerConnection$RTCConfiguration: boolean audioJitterBufferFastAccelerate
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: int focusMode
org.webrtc.ScreenCapturerAndroid: int DISPLAY_FLAGS
org.webrtc.RtpSender: org.webrtc.DtmfSender dtmfSender
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.util.ArrayDeque imageReaderQueue
org.webrtc.Size: int height
org.webrtc.SurfaceEglRenderer: int rotatedFrameWidth
com.cloudwebrtc.webrtc.PeerConnectionObserver: io.flutter.plugin.common.EventChannel eventChannel
org.webrtc.SessionDescription: org.webrtc.SessionDescription$Type type
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLDisplay eglDisplay
org.webrtc.VideoCodecInfo: java.lang.String H264_PROFILE_CONSTRAINED_BASELINE
org.webrtc.HardwareVideoEncoder: org.webrtc.MediaCodecWrapperFactory mediaCodecWrapperFactory
org.webrtc.Priority: int VERY_LOW
kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState
org.webrtc.SurfaceTextureHelper$2: org.webrtc.SurfaceTextureHelper this$0
org.webrtc.CandidatePairChangeEvent: org.webrtc.IceCandidate local
org.webrtc.EglBase: int[] CONFIG_PIXEL_BUFFER
org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata: long presentationTimestampUs
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_NONE
org.webrtc.AndroidVideoDecoder: org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata renderedTextureMetadata
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType VideoFrameDelta
com.cloudwebrtc.webrtc.video.camera.CameraUtils: com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager deviceOrientationManager
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState OPENED
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.atomic.AtomicInteger nextSchedulerId
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_INFO
org.webrtc.EglRenderer: java.lang.Object statisticsLock
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: org.webrtc.RendererCommon$RendererEvents rendererEvents
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus MEMORY
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: int _height
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next
org.webrtc.EglBase$ConfigBuilder: int openGlesVersion
org.webrtc.audio.WebRtcAudioRecord: int DEFAULT_AUDIO_FORMAT
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType[] $VALUES
org.webrtc.Camera2Enumerator: android.content.Context context
org.webrtc.audio.VolumeLogger$LogVolumeTask: int maxRingVolume
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: int min
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: boolean isRunning
org.webrtc.AndroidVideoDecoder: boolean keyFrameRequired
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy LOW_COST
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: java.lang.String nativeLibraryName
org.webrtc.VideoFileRenderer: android.os.Handler renderThreadHandler
org.webrtc.video.CustomVideoEncoderFactory: org.webrtc.SoftwareVideoEncoderFactory softwareVideoEncoderFactory
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType ALL
org.webrtc.FrameCryptorKeyProvider: long nativeKeyProvider
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback playbackSamplesReadyCallback
org.webrtc.JNILogging: org.webrtc.Loggable loggable
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback audioTrackStateCallback
org.webrtc.NetworkMonitor$1: org.webrtc.NetworkMonitor this$0
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy KEEP_FIRST_READY
org.webrtc.SurfaceViewRenderer: int rotatedFrameWidth
org.webrtc.audio.VolumeLogger$LogVolumeTask: org.webrtc.audio.VolumeLogger this$0
com.cloudwebrtc.webrtc.record.VideoFileRenderer: boolean muxerStarted
org.webrtc.Predicate$1: org.webrtc.Predicate val$other
com.cloudwebrtc.webrtc.video.camera.CameraUtils: boolean $assertionsDisabled
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceUnwritableMinChecks
org.webrtc.GlGenericDrawer: java.lang.String TEXTURE_MATRIX_NAME
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int MAX_IMAGES
org.webrtc.CameraCapturer$8: java.lang.String val$cameraName
org.webrtc.PeerConnectionFactory$ThreadInfo: int tid
com.cloudwebrtc.webrtc.GetUserMediaImpl: int DEFAULT_HEIGHT
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_UNKNOWN_CELLULAR
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType[] $VALUES
org.webrtc.audio.WebRtcAudioEffects: java.util.UUID AOSP_ACOUSTIC_ECHO_CANCELER
org.webrtc.AndroidVideoDecoder$1: org.webrtc.AndroidVideoDecoder this$0
org.webrtc.HardwareVideoEncoder: int height
org.webrtc.YuvConverter: org.webrtc.ThreadUtils$ThreadChecker threadChecker
org.webrtc.WrappedNativeI420Buffer: long nativeBuffer
org.webrtc.VideoSource: org.webrtc.VideoProcessor videoProcessor
com.cloudwebrtc.webrtc.utils.AnyThreadSink: android.os.Handler handler
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.Map mPeerConnectionObservers
org.webrtc.NativeLibrary: java.lang.String TAG
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: org.webrtc.EglBase10Impl this$0
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState state
org.webrtc.CandidatePairChangeEvent: java.lang.String reason
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: java.lang.String TAG
org.webrtc.WrappedNativeI420Buffer: int width
com.cloudwebrtc.webrtc.utils.PermissionUtils: java.lang.String REQUEST_CODE
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState DISCONNECTED
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer dataY
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int imageFormat
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State CONNECTING
org.webrtc.SimulcastVideoEncoderFactory: org.webrtc.VideoEncoderFactory fallback
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState FAILED
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference MAINTAIN_RESOLUTION
org.webrtc.audio.WebRtcAudioTrack: int AUDIO_TRACK_STOP
org.webrtc.CameraVideoCapturer$CameraStatistics: int frameCount
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_WIFI
org.webrtc.RenderSynchronizer: boolean isListening
org.webrtc.VideoFrameDrawer: org.webrtc.VideoFrameDrawer$YuvUploader yuvUploader
org.webrtc.IceCandidateErrorEvent: int port
org.webrtc.HardwareVideoEncoderFactory: boolean enableH264HighProfile
org.webrtc.VideoFrameDrawer: int renderWidth
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState CONNECTED
org.webrtc.StatsReport$Value: java.lang.String name
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object bufferEndSegment
kotlinx.coroutines.CancellableContinuationImpl: int _decisionAndIndex
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.SimulcastVideoEncoderFactory native
org.webrtc.audio.WebRtcAudioTrack: long AUDIO_TRACK_THREAD_JOIN_TIMEOUT_MS
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState HAVE_LOCAL_OFFER
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor: org.webrtc.audio.JavaAudioDeviceModule audioDeviceModule
org.webrtc.PeerConnectionFactory$InitializationOptions: java.lang.String nativeLibraryName
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY
org.webrtc.SurfaceTextureHelper: org.webrtc.TimestampAligner timestampAligner
org.webrtc.VideoSource$AspectRatio: int width
org.webrtc.Camera1Session: android.hardware.Camera camera
org.webrtc.audio.LowLatencyAudioBufferManager: java.lang.String TAG
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType[] $VALUES
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: java.lang.String TAG
org.webrtc.HardwareVideoEncoder: int MEDIA_CODEC_RELEASE_TIMEOUT_MS
org.webrtc.AndroidVideoDecoder: android.view.Surface surface
org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata: java.lang.Integer decodeTimeMs
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType[] $VALUES
org.webrtc.audio.LowLatencyAudioBufferManager: int ticksUntilNextDecrease
org.webrtc.RtpParameters$Encoding: java.lang.Integer numTemporalLayers
org.webrtc.EglRenderer: int framesRendered
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.TurnCustomizer turnCustomizer
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo staticNetworkThread
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_VERBOSE
com.cloudwebrtc.webrtc.record.VideoFileRenderer: org.webrtc.EglBase eglBase
org.webrtc.EglBase14Impl: org.webrtc.EglBase14Impl$EglConnection EGL_NO_CONNECTION
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.FecControllerFactoryFactoryInterface fecControllerFactoryFactory
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type OES
org.webrtc.MediaCodecUtils: java.lang.String TAG
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean requestVPN
org.webrtc.VideoFileRenderer: java.nio.ByteBuffer outputFrameBuffer
org.webrtc.VideoCodecStatus: int number
org.webrtc.EglRenderer: java.lang.Object threadLock
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread audioThread
org.webrtc.MediaCodecVideoDecoderFactory: java.lang.String TAG
org.webrtc.audio.WebRtcAudioTrackUtils: java.lang.String TAG
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
org.webrtc.YuvConverter$ShaderCallbacks: float stepSize
org.webrtc.Camera1Session: org.webrtc.CameraEnumerationAndroid$CaptureFormat captureFormat
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioDeviceInfo preferredDevice
org.webrtc.SurfaceViewRenderer: int surfaceHeight
org.webrtc.SurfaceViewRenderer: org.webrtc.RendererCommon$RendererEvents rendererEvents
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy GATHER_CONTINUALLY
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: org.webrtc.MediaStream val$mediaStream
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.Predicate codecAllowedPredicate
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: androidx.lifecycle.Lifecycle lifecycle
org.webrtc.PeerConnectionFactory: java.lang.String TAG
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Number
org.webrtc.audio.WebRtcAudioRecord$1: java.util.concurrent.atomic.AtomicInteger val$nextThreadId
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String TAG
org.webrtc.PeerConnectionDependencies: org.webrtc.PeerConnection$Observer observer
org.webrtc.RtpTransceiver$RtpTransceiverInit: java.util.List sendEncodings
org.webrtc.RtpCapabilities: java.util.List headerExtensions
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecMimeType codecType
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$TcpCandidatePolicy tcpCandidatePolicy
com.cloudwebrtc.webrtc.GetUserMediaImpl$3: io.flutter.plugin.common.MethodChannel$Result val$result
org.webrtc.FileVideoCapturer$VideoReaderY4M: java.lang.String Y4M_FRAME_DELIMETER
org.webrtc.CameraVideoCapturer$CameraStatistics: org.webrtc.CameraVideoCapturer$CameraEventsHandler eventsHandler
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean animating
org.webrtc.VideoFrame$TextureBuffer$Type: int glTarget
org.webrtc.CryptoOptions$Srtp: org.webrtc.CryptoOptions this$0
org.webrtc.video.CustomVideoEncoderFactory: boolean forceSWCodec
org.webrtc.HardwareVideoEncoder: int keyFrameIntervalSec
org.webrtc.audio.WebRtcAudioRecord: int BUFFER_SIZE_FACTOR
org.webrtc.CameraEnumerationAndroid$2: int val$requestedHeight
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode AUDIO_TRACK_START_EXCEPTION
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread audioThread
org.webrtc.RtpParameters$HeaderExtension: boolean encrypted
org.webrtc.RenderSynchronizer: java.util.List listeners
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState[] $VALUES
kotlinx.coroutines.JobSupport: java.lang.Object _state
org.webrtc.PeerConnection$RTCConfiguration: int iceConnectionReceivingTimeout
com.cloudwebrtc.webrtc.GetUserMediaImpl: int DEFAULT_FPS
org.webrtc.JavaI420Buffer: int width
org.webrtc.AndroidVideoDecoder: java.lang.Thread outputThread
org.webrtc.NetworkMonitorAutoDetect: boolean isRegistered
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int type
org.webrtc.SurfaceViewRenderer: java.lang.String resourceName
com.cloudwebrtc.webrtc.audio.PlaybackSamplesReadyCallbackAdapter: java.util.List callbacks
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy BALANCED
com.cloudwebrtc.webrtc.GetUserMediaImpl$6: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
org.webrtc.RtpParameters$Encoding: boolean active
org.webrtc.RtcCertificatePem: long DEFAULT_EXPIRY
org.webrtc.MediaCodecUtils: int COLOR_QCOM_FORMATYVU420PackedSemiPlanar16m4ka
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy TLS_CERT_POLICY_INSECURE_NO_CHECK
org.webrtc.Logging$1: int[] $SwitchMap$org$webrtc$Logging$Severity
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean VERBOSE_LOGS
org.webrtc.EglRenderer$1: org.webrtc.EglRenderer this$0
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader lastReaderDequeuedFrom
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean includeOtherUidNetworks
org.webrtc.VideoFrameBufferType: int I420A
org.webrtc.NetworkMonitor$2: java.lang.String val$fieldTrialsString
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_WARNING
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.VolumeLogger volumeLogger
org.webrtc.Camera1Enumerator: java.util.List cachedSupportedFormats
org.webrtc.CameraEnumerationAndroid$1: int MAX_FPS_LOW_DIFF_WEIGHT
org.webrtc.RtpParameters$HeaderExtension: int id
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List mutators
org.webrtc.Camera2Session: java.lang.String TAG
org.webrtc.MediaCodecUtils: java.lang.String QCOM_PREFIX
org.webrtc.YuvConverter: org.webrtc.GlTextureFrameBuffer i420TextureFrameBuffer
org.webrtc.HardwareVideoEncoder: int DEQUEUE_OUTPUT_BUFFER_TIMEOUT_US
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: int WIFI_P2P_NETWORK_HANDLE
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate wifiManagerDelegate
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.util.Map mMap
org.webrtc.audio.WebRtcAudioTrack: java.lang.String TAG
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_ETHERNET
org.webrtc.VideoFrame: org.webrtc.VideoFrame$Buffer buffer
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: java.util.Map keyProviders
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState FREEZED
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.lang.Object lock
org.webrtc.Predicate$1: org.webrtc.Predicate this$0
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _rootCause
com.cloudwebrtc.webrtc.video.LocalVideoTrack: java.util.List processors
org.webrtc.VideoSource$1: org.webrtc.VideoSource this$0
org.webrtc.CameraCapturer: org.webrtc.CapturerObserver capturerObserver
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaCodec$BufferInfo bufferInfo
org.webrtc.DataChannel$Buffer: java.nio.ByteBuffer data
org.webrtc.RtpParameters: java.util.List headerExtensions
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.nio.ByteBuffer[] audioInputBuffers
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$Observer observer
io.flutter.view.AccessibilityViewEmbedder: android.util.SparseArray flutterIdToOrigin
org.webrtc.RtpParameters$Codec: org.webrtc.MediaStreamTrack$MediaType kind
io.flutter.embedding.engine.FlutterJNI: boolean prefetchDefaultFontManagerCalled
org.webrtc.RtpParameters: java.util.List codecs
org.webrtc.EglBase: java.lang.Object lock
org.webrtc.SurfaceEglRenderer: boolean isRenderingPaused
org.webrtc.CameraCapturer: int OPEN_CAMERA_TIMEOUT
org.webrtc.IceCandidate: java.lang.String sdpMid
org.webrtc.CameraEnumerationAndroid$CaptureFormat: org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange framerate
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Boolean
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjection$Callback mediaProjectionCallback
org.webrtc.PeerConnection$RTCConfiguration: boolean enableCpuOveruseDetection
org.webrtc.FileVideoCapturer: org.webrtc.CapturerObserver capturerObserver
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: org.webrtc.audio.WebRtcAudioRecord this$0
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioManager audioManager
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean attached
org.webrtc.RtpTransceiver: org.webrtc.RtpReceiver cachedReceiver
org.webrtc.IceCandidateErrorEvent: java.lang.String errorText
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode[] $VALUES
kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object _prev
org.webrtc.JavaI420Buffer: int height
org.webrtc.SurfaceEglRenderer: java.lang.Object layoutLock
kotlinx.coroutines.scheduling.WorkQueue: int blockingTasksInBuffer
org.webrtc.VideoEncoder$EncoderInfo: boolean applyAlignmentToAllSimulcastLayers
org.webrtc.CameraVideoCapturer$CameraStatistics: java.lang.String TAG
org.webrtc.TextureBufferImpl: int id
org.webrtc.EglThread$HandlerWithExceptionCallbacks: java.lang.Object callbackLock
com.cloudwebrtc.webrtc.video.camera.CameraUtils: android.app.Activity activity
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: long numCapturedFrames
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: org.webrtc.audio.LowLatencyAudioBufferManager bufferManager
org.webrtc.TurnCustomizer: long nativeTurnCustomizer
org.webrtc.IceCandidateErrorEvent: java.lang.String address
org.webrtc.audio.WebRtcAudioEffects: android.media.audiofx.AcousticEchoCanceler aec
org.webrtc.video.CustomVideoDecoderFactory: org.webrtc.SoftwareVideoDecoderFactory softwareVideoDecoderFactory
org.webrtc.GlTextureFrameBuffer: int frameBufferId
org.webrtc.audio.WebRtcAudioEffects: boolean shouldEnableNs
org.webrtc.EglRenderer: long nextFrameTimeNs
org.webrtc.EglRenderer: java.lang.String name
org.webrtc.EncodedImage: int encodedHeight
org.webrtc.PeerConnection: java.util.List receivers
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.content.Context applicationContext
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLSurface currentSurface
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.VideoEncoderFactory fallback
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean released
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int FRAME_RATE
org.webrtc.DataChannel$Init: java.lang.String protocol
org.webrtc.Camera2Session: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
org.webrtc.audio.JavaAudioDeviceModule$Builder: int inputSampleRate
org.webrtc.RtcCertificatePem: java.lang.String certificate
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: int audioStreamType
org.webrtc.RtpParameters$Codec: java.util.Map parameters
org.webrtc.PeerConnection$RTCConfiguration: boolean offerExtmapAllowMixed
org.webrtc.StatsReport: java.lang.String type
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl
org.webrtc.RTCStatsReport: long timestampUs
org.webrtc.Camera1Session: android.hardware.Camera$CameraInfo info
org.webrtc.DynamicBitrateAdjuster: double deviationBytes
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int sampleRate
com.cloudwebrtc.webrtc.record.VideoFileRenderer: org.webrtc.GlRectDrawer drawer
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: io.flutter.plugin.common.EventChannel eventChannel
com.cloudwebrtc.webrtc.video.camera.CameraUtils: boolean isTorchOn
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.AudioProcessingFactory audioProcessingFactory
org.webrtc.VideoProcessor$FrameAdaptationParameters: int cropHeight
org.webrtc.audio.WebRtcAudioTrack: int DEFAULT_USAGE
org.webrtc.audio.WebRtcAudioRecord: int BUFFERS_PER_SECOND
org.webrtc.VideoProcessor$FrameAdaptationParameters: boolean drop
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: org.webrtc.MediaStream val$mediaStream
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_VPN
androidx.lifecycle.ReportFragment$LifecycleCallbacks: androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion Companion
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode AUDIO_TRACK_START_STATE_MISMATCH
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: android.media.AudioManager audioManager
org.webrtc.PeerConnection$AdapterType: java.util.Map BY_BITMASK
org.webrtc.EglBase: int EGL_OPENGL_ES2_BIT
org.webrtc.PeerConnection$IceServer: java.lang.String username
org.webrtc.PeerConnectionFactory: java.lang.String VIDEO_FRAME_EMIT_TRIAL
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaCodec$BufferInfo audioBufferInfo
org.webrtc.SurfaceTextureHelper: org.webrtc.EglBase eglBase
com.cloudwebrtc.webrtc.video.VideoCapturerInfo: boolean isScreenCapture
org.webrtc.AndroidVideoDecoder: int colorFormat
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer dataV
org.webrtc.audio.JavaAudioDeviceModule$Builder: android.content.Context context
io.flutter.plugin.platform.SingleViewPresentation: android.content.Context outerContext
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
org.webrtc.CameraCapturer: java.lang.String pendingCameraName
org.webrtc.SurfaceTextureHelper: android.os.Handler handler
com.cloudwebrtc.webrtc.utils.Utils$1: int[] $SwitchMap$org$webrtc$PeerConnection$IceConnectionState
org.webrtc.ExternalAudioProcessingFactory: long apmPtr
org.webrtc.RtpSender: org.webrtc.MediaStreamTrack cachedTrack
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType VP8
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.RtcCertificatePem certificate
org.webrtc.AndroidVideoDecoder: int MEDIA_CODEC_RELEASE_TIMEOUT_MS
org.webrtc.WrappedVideoDecoderFactory: org.webrtc.VideoDecoderFactory hardwareVideoDecoderFactory
org.webrtc.RendererCommon: float BALANCED_VISIBLE_FRACTION
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State CLOSED
org.webrtc.CameraCapturer: java.lang.String cameraName
org.webrtc.VideoFrameBufferType: int I210
org.webrtc.JavaI420Buffer: int strideV
com.cloudwebrtc.webrtc.record.FrameCapturer: boolean gotFrame
org.webrtc.GlGenericDrawer: org.webrtc.GlGenericDrawer$ShaderCallbacks shaderCallbacks
org.webrtc.WrappedNativeI420Buffer: int height
org.webrtc.GlGenericDrawer: java.nio.FloatBuffer FULL_RECTANGLE_TEXTURE_BUFFER
org.webrtc.video.CustomVideoEncoderFactory: java.util.List forceSWCodecs
org.webrtc.CandidatePairChangeEvent: int lastDataReceivedMs
org.webrtc.DataChannel: long nativeObserver
org.webrtc.PeerConnectionFactory$InitializationOptions: org.webrtc.Loggable loggable
org.webrtc.TimestampAligner: long nativeTimestampAligner
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: java.lang.String TAG
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState CLOSED
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Options options
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState HAVE_REMOTE_OFFER
org.webrtc.ScreenCapturerAndroid: int height
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer screencastMinBitrate
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$ConnectionType type
org.webrtc.Camera2Capturer: android.hardware.camera2.CameraManager cameraManager
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: int audioMode
org.webrtc.audio.WebRtcAudioTrack: boolean checkPlayState
org.webrtc.audio.JavaAudioDeviceModule: org.webrtc.audio.WebRtcAudioRecord audioInput
org.webrtc.EglBase$Context: long NO_CONTEXT
org.webrtc.VideoDecoder$Settings: int width
org.webrtc.audio.VolumeLogger: java.lang.String TAG
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int outputFileHeight
org.webrtc.GlGenericDrawer: int inPosLocation
org.webrtc.MediaStream: java.util.List audioTracks
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map remoteStreams
io.flutter.embedding.engine.FlutterJNI: float displayWidth
org.webrtc.CallSessionFileRotatingLogSink: long nativeSink
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus ERR_REQUEST_SLI
org.webrtc.VideoCodecInfo: int payload
org.webrtc.EglBase14Impl: android.opengl.EGLSurface eglSurface
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy[] $VALUES
io.flutter.embedding.engine.FlutterOverlaySurface: int id
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState STABLE
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState HAVE_LOCAL_PRANSWER
org.webrtc.ScreenCapturerAndroid: boolean isDisposed
org.webrtc.VideoEncoder$EncodeInfo: org.webrtc.EncodedImage$FrameType[] frameTypes
org.webrtc.Camera2Session: android.view.Surface surface
org.webrtc.YuvConverter$ShaderCallbacks: float[] vCoeffs
org.webrtc.CameraEnumerationAndroid$1: int MIN_FPS_HIGH_VALUE_WEIGHT
org.webrtc.audio.WebRtcAudioRecord: int audioSource
io.flutter.embedding.engine.FlutterJNI: android.os.Looper mainLooper
org.webrtc.SoftwareVideoEncoderFactory$1: org.webrtc.VideoCodecInfo val$info
org.webrtc.PeerConnection$IceServer$Builder: java.lang.String hostname
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: io.flutter.plugin.common.MethodChannel$Result val$result
com.cloudwebrtc.webrtc.PeerConnectionObserver: io.flutter.plugin.common.BinaryMessenger messenger
org.webrtc.audio.WebRtcAudioManager: int BITS_PER_SAMPLE
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState[] $VALUES
com.cloudwebrtc.webrtc.video.camera.CameraUtils$1: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$DeviceOrientation
org.webrtc.HardwareVideoEncoder: long forcedKeyFrameNs
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3$1: com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3 this$1
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List finalClippingPaths
com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter: java.util.List audioProcessors
org.webrtc.Camera2Capturer: android.content.Context context
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackName
org.webrtc.SurfaceTextureHelper: int textureWidth
org.webrtc.HardwareVideoEncoder: java.lang.String codecName
org.webrtc.audio.LowLatencyAudioBufferManager: int bufferIncreaseCounter
org.webrtc.CameraCapturer: int height
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState CLOSED
org.webrtc.audio.WebRtcAudioRecord: long AUDIO_RECORD_THREAD_JOIN_TIMEOUT_MS
org.webrtc.MediaCodecUtils: int COLOR_QCOM_FORMATYUV420PackedSemiPlanar32m
org.webrtc.Camera2Session: android.content.Context applicationContext
org.webrtc.audio.VolumeLogger: int TIMER_PERIOD_IN_SECONDS
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType H264
com.cloudwebrtc.webrtc.utils.Utils$1: int[] $SwitchMap$org$webrtc$PeerConnection$SignalingState
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: boolean keepAlive
org.webrtc.AndroidVideoDecoder: int sliceHeight
org.webrtc.EncodedImage: java.nio.ByteBuffer buffer
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus TIMEOUT
org.webrtc.CameraVideoCapturer$CameraStatistics: java.lang.Runnable cameraObserver
org.webrtc.audio.WebRtcAudioManager: java.lang.String TAG
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State[] $VALUES
org.webrtc.audio.WebRtcAudioTrack: int BITS_PER_SAMPLE
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType[] $VALUES
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object closeHandler
com.cloudwebrtc.webrtc.GetUserMediaImpl: boolean isTorchOn
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: int id
io.flutter.plugin.platform.SingleViewPresentation: android.widget.FrameLayout container
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numTrims
org.webrtc.RenderSynchronizer: android.os.Handler mainThreadHandler
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: io.flutter.plugin.common.BinaryMessenger messenger
org.webrtc.H264Utils: java.lang.String H264_PROFILE_CONSTRAINED_BASELINE
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel[] $VALUES
org.webrtc.video.CustomVideoDecoderFactory: org.webrtc.WrappedVideoDecoderFactory wrappedVideoDecoderFactory
org.webrtc.HardwareVideoEncoder: java.lang.Integer surfaceColorFormat
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioRecord audioRecord
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: int rotatedFrameHeight
org.webrtc.SoftwareVideoDecoderFactory: long nativeFactory
org.webrtc.audio.JavaAudioDeviceModule: int inputSampleRate
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray
org.webrtc.SurfaceTextureHelper: boolean hasPendingTexture
org.webrtc.RenderSynchronizer: long lastRefreshTimeNanos
org.webrtc.VideoCodecMimeType: java.lang.String mimeType
org.webrtc.SessionDescription: java.lang.String description
kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack
org.webrtc.YuvConverter: java.lang.String TAG
org.webrtc.NV12Buffer: int height
org.webrtc.AndroidVideoDecoder: boolean hasDecodedFirstFrame
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: java.util.Map frameCryptoObservers
org.webrtc.Predicate$2: org.webrtc.Predicate this$0
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus ERROR
org.webrtc.ScreenCapturerAndroid$1: org.webrtc.ScreenCapturerAndroid this$0
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: java.lang.String TAG
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: java.lang.Object layoutLock
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean needsSave
org.webrtc.RTCStats: java.util.Map members
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int oldWidth
org.webrtc.VideoEncoderFallback: org.webrtc.VideoEncoder fallback
org.webrtc.HardwareVideoEncoderFactory: java.util.List H264_HW_EXCEPTION_MODELS
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
org.webrtc.Metrics$HistogramInfo: int bucketCount
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy MAXCOMPAT
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: io.flutter.plugin.common.EventChannel$EventSink eventSink
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: android.content.BroadcastReceiver broadcastReceiver
org.webrtc.DynamicBitrateAdjuster: double BITRATE_ADJUSTMENT_SEC
org.webrtc.PeerConnectionFactory$InitializationOptions: boolean enableInternalTracer
org.webrtc.RtpReceiver: long nativeRtpReceiver
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback errorCallback
org.webrtc.VideoEncoder$Settings: org.webrtc.VideoEncoder$Capabilities capabilities
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.ThreadUtils$ThreadChecker threadChecker
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.VideoEncoderFactory primary
org.webrtc.RenderSynchronizer: long lastOpenedTimeNanos
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.hardware.display.VirtualDisplay virtualDisplay
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate: android.content.Context context
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType[] $VALUES
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
org.webrtc.VideoFrameBufferType: int I444
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback audioRecordStateCallback
org.webrtc.FrameCryptor: long nativeFrameCryptor
org.webrtc.NetworkMonitorAutoDetect: java.util.Set availableNetworks
org.webrtc.GlRectDrawer: java.lang.String FRAGMENT_SHADER
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type[] $VALUES
org.webrtc.EncodedImage$Builder: long captureTimeNs
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState GATHERING
org.webrtc.AndroidVideoDecoder: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
org.webrtc.CameraCapturer: org.webrtc.CameraSession$Events cameraSessionEventsHandler
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLDisplay eglDisplay
org.webrtc.VideoFrameDrawer: org.webrtc.VideoFrame lastI420Frame
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PERMISSION_AUDIO
org.webrtc.Camera2Enumerator: java.lang.String TAG
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.VideoEncoderFactory videoEncoderFactory
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$Settings streamSettings
org.webrtc.EglRenderer$EglSurfaceCreation: java.lang.Object surface
org.webrtc.ThreadUtils$4: java.lang.Runnable val$runner
org.webrtc.VideoFrameBufferType: int I410
org.webrtc.EglBase$ConfigBuilder: boolean isRecordable
org.webrtc.CameraEnumerationAndroid: java.util.ArrayList COMMON_RESOLUTIONS
org.webrtc.DynamicBitrateAdjuster: int BITRATE_ADJUSTMENT_STEPS
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int subtype
org.webrtc.PeerConnectionFactory: java.lang.String TRIAL_ENABLED
org.webrtc.ThreadUtils$1Result: java.lang.Object value
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_5G
org.webrtc.RTCStatsReport: java.util.Map stats
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback errorCallback
org.webrtc.GlGenericDrawer: java.lang.String INPUT_TEXTURE_COORDINATE_NAME
com.cloudwebrtc.webrtc.audio.LocalAudioTrack: java.util.List sinks
org.webrtc.NV21Buffer: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType RELAY
org.webrtc.DefaultVideoEncoderFactory: org.webrtc.VideoEncoderFactory softwareVideoEncoderFactory
org.webrtc.VideoFrame: int rotation
org.webrtc.VideoFrameDrawer$1: int[] $SwitchMap$org$webrtc$VideoFrame$TextureBuffer$Type
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State LIVE
org.webrtc.RendererCommon$VideoLayoutMeasure: float visibleFractionMatchOrientation
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_MODULECALL
org.webrtc.VideoEncoder$ScalingSettings: java.lang.Integer low
org.webrtc.PeerConnectionFactory$InitializationOptions: android.content.Context applicationContext
org.webrtc.NV21Buffer: byte[] data
org.webrtc.VideoEncoder$ScalingSettings: boolean on
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int minStartBitrateBps
org.webrtc.AndroidVideoDecoder: org.webrtc.MediaCodecWrapperFactory mediaCodecWrapperFactory
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.CryptoOptions cryptoOptions
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: com.twilio.audioswitch.AudioSwitch audioSwitch
org.webrtc.HardwareVideoEncoder: org.webrtc.EglBase14 textureEglBase
io.flutter.plugin.platform.SingleViewPresentation: int viewId
org.webrtc.TextureBufferImpl: int unscaledWidth
org.webrtc.HardwareVideoEncoderFactory: int QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_L_MS
org.webrtc.PeerConnection$IceServer: java.util.List urls
org.webrtc.VideoCodecInfo: java.lang.String H264_LEVEL_3_1
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.os.HandlerThread renderThread
org.webrtc.HardwareVideoEncoder$BusyCount: java.lang.Object countLock
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.ScheduledExecutorService executor
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START
org.webrtc.CameraEnumerationAndroid: java.lang.String TAG
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: int max
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLContext eglContext
org.webrtc.CameraVideoCapturer$CameraStatistics: int CAMERA_FREEZE_REPORT_TIMOUT_MS
org.webrtc.YuvConverter$ShaderCallbacks: float[] coeffs
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback stateCallback
org.webrtc.CameraCapturer: boolean sessionOpening
org.webrtc.audio.VolumeLogger: android.media.AudioManager audioManager
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: com.cloudwebrtc.webrtc.StateProvider stateProvider
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: org.webrtc.VideoTrack videoTrack
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback audioRecordErrorCallback
com.cloudwebrtc.webrtc.GetUserMediaImpl$3: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
org.webrtc.IceCandidateErrorEvent: int errorCode
kotlinx.coroutines.android.HandlerDispatcherKt: android.view.Choreographer choreographer
org.webrtc.H264Utils: java.lang.String H264_FMTP_PROFILE_LEVEL_ID
org.webrtc.SurfaceViewRenderer: org.webrtc.SurfaceEglRenderer eglRenderer
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.media.AudioDeviceInfo preferredInput
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils: boolean $assertionsDisabled
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo staticWorkerThread
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState ENCRYPTIONFAILED
org.webrtc.GlGenericDrawer: org.webrtc.GlShader currentShader
org.webrtc.MediaStream: long nativeStream
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics UNIFIED_PLAN
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String key
org.webrtc.WebrtcBuildVersion: java.lang.String webrtc_commit
org.webrtc.Camera2Session: org.webrtc.Camera2Session$SessionState state
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$Srtp srtp
org.webrtc.VideoFileRenderer: org.webrtc.EglBase eglBase
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference DISABLED
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: com.cloudwebrtc.webrtc.utils.ConstraintsMap val$constraints
org.webrtc.EglBase10Impl$EglConnection: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.TextureBufferImpl: int width
org.webrtc.Camera1Session: org.webrtc.Camera1Session$SessionState state
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraSwitchHandler switchEventsHandler
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
org.webrtc.MediaCodecUtils: java.lang.String INTEL_PREFIX
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoDecoderFactory hardwareVideoDecoderFactory
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState DISCONNECTED
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind BLUETOOTH
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_3G
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType ETHERNET
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int DISPLAY_FLAGS
com.cloudwebrtc.webrtc.GetUserMediaImpl: int CAPTURE_PERMISSION_REQUEST_CODE
org.webrtc.FileVideoCapturer$VideoReaderY4M: java.nio.channels.FileChannel mediaFileChannel
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: java.util.Set availableNetworks
org.webrtc.Metrics$HistogramInfo: int min
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: boolean loggingEnabled
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State[] $VALUES
org.webrtc.EglThread: boolean renderWindowOpen
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Map
org.webrtc.EncodedImage$Builder: int encodedWidth
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: java.util.Map frameCryptos
org.webrtc.TextureBufferImpl: int height
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: io.flutter.plugin.common.MethodChannel$Result val$result
org.webrtc.YuvConverter: java.lang.String FRAGMENT_SHADER
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType MEDIA_TYPE_AUDIO
org.webrtc.audio.WebRtcAudioRecord: int DEFAULT_AUDIO_SOURCE
org.webrtc.HardwareVideoEncoder: int adjustedBitrate
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: java.lang.Thread thread
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection[] $VALUES
org.webrtc.WebrtcBuildVersion: java.lang.String maint_version
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext _immediate
org.webrtc.CameraEnumerationAndroid$1: int MAX_FPS_DIFF_THRESHOLD
com.cloudwebrtc.webrtc.utils.Utils$1: int[] $SwitchMap$org$webrtc$PeerConnection$PeerConnectionState
com.cloudwebrtc.webrtc.video.camera.CameraUtils$NoSuchFieldWithNameException: java.lang.String fieldName
org.webrtc.EglRenderer: int framesDropped
org.webrtc.VideoFrameDrawer: float[] dstPoints
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: boolean forceHandleAudioRouting
org.webrtc.Priority: int LOW
kotlinx.coroutines.flow.StateFlowImpl: java.lang.Object _state
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: int audioAttributeUsageType
org.webrtc.YuvConverter$ShaderCallbacks: int xUnitLoc
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState COMPLETED
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection RECV_ONLY
org.webrtc.VideoCodecInfo: java.util.Map params
org.webrtc.audio.VolumeLogger$LogVolumeTask: int maxVoiceCallVolume
com.cloudwebrtc.webrtc.record.VideoFileRenderer: boolean encoderStarted
com.cloudwebrtc.webrtc.CameraEventsHandler: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState state
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.lang.String TAG
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.lang.String TAG
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState RUNNING
org.webrtc.PeerConnection$RTCConfiguration: int iceCandidatePoolSize
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback callback
org.webrtc.MediaCodecUtils: java.lang.String NVIDIA_PREFIX
kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$CandidateNetworkPolicy candidateNetworkPolicy
org.webrtc.RtpCapabilities$CodecCapability: org.webrtc.MediaStreamTrack$MediaType kind
org.webrtc.SoftwareVideoDecoderFactory$1: org.webrtc.VideoCodecInfo val$info
org.webrtc.RtpCapabilities$CodecCapability: java.util.Map parameters
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy GATHER_ONCE
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type OFFER
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: com.cloudwebrtc.webrtc.audio.AudioSwitchManager instance
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: kotlin.jvm.functions.Function2 audioDeviceChangeListener
org.webrtc.PeerConnection$RTCConfiguration: int iceBackupCandidatePairPingInterval
org.webrtc.AndroidVideoDecoder: int DEQUEUE_INPUT_TIMEOUT_US
org.webrtc.PeerConnection$IceServer$Builder: java.util.List tlsEllipticCurves
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus ERR_SIZE
org.webrtc.audio.WebRtcAudioEffects: android.media.audiofx.NoiseSuppressor ns
org.webrtc.Size: int width
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState STOPPED
org.webrtc.PeerConnectionDependencies$Builder: org.webrtc.SSLCertificateVerifier sslCertificateVerifier
org.webrtc.VideoEncoder$Settings: int startBitrate
org.webrtc.CameraCapturer$7: org.webrtc.CameraCapturer this$0
org.webrtc.HardwareVideoEncoder: java.lang.Exception shutdownException
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int audioTrackIndex
org.webrtc.GlGenericDrawer: java.lang.String INPUT_VERTEX_COORDINATE_NAME
org.webrtc.SurfaceTextureHelper: int frameRotation
org.webrtc.TextureBufferImpl: org.webrtc.YuvConverter yuvConverter
io.flutter.embedding.engine.FlutterJNI: java.util.concurrent.locks.ReentrantReadWriteLock shellHolderLock
org.webrtc.TextureBufferImpl: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.video.CustomVideoDecoderFactory: java.util.List forceSWCodecs
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String value
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
org.webrtc.VideoFrameBufferType: int I010
org.webrtc.HardwareVideoEncoder: int stride
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy NEGOTIATE
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String GRANT_RESULTS
androidx.lifecycle.ProcessLifecycleOwner$attach$1: androidx.lifecycle.ProcessLifecycleOwner this$0
org.webrtc.SoftwareVideoDecoderFactory: java.lang.String TAG
org.webrtc.AndroidVideoDecoder: org.webrtc.ThreadUtils$ThreadChecker outputThreadChecker
org.webrtc.NativeLibrary: java.lang.Object lock
com.cloudwebrtc.webrtc.utils.PermissionUtils: int requestCode
org.webrtc.WrappedNativeI420Buffer: int strideY
org.webrtc.HardwareVideoEncoder: int width
com.cloudwebrtc.webrtc.utils.PermissionUtils: java.lang.String RESULT_RECEIVER
org.webrtc.HardwareVideoEncoder: int MAX_ENCODER_Q_SIZE
org.webrtc.EglThread$HandlerWithExceptionCallbacks: java.util.List exceptionCallbacks
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType connectionType
org.webrtc.MediaCodecUtils: int COLOR_QCOM_FORMATYVU420PackedSemiPlanar32m4ka
org.webrtc.EglRenderer: long LOG_INTERVAL_SEC
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$TextureBuffer$Type type
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets lastWindowInsets
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjection mediaProjection
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.os.Handler renderThreadHandler
org.webrtc.EglRenderer: java.lang.Object layoutLock
org.webrtc.SurfaceTextureHelper: org.webrtc.TextureBufferImpl$RefCountMonitor textureRefCountMonitor
org.webrtc.NetworkChangeDetector$NetworkInformation: long handle
org.webrtc.IceCandidate: java.lang.String sdp
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection SEND_RECV
org.webrtc.MediaCodecUtils: int[] DECODER_COLOR_FORMATS
org.webrtc.ScreenCapturerAndroid: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
org.webrtc.CameraCapturer: org.webrtc.CameraCapturer$SwitchState switchState
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver observer
org.webrtc.Camera2Session: int height
kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread
org.webrtc.NetworkMonitorAutoDetect: android.net.ConnectivityManager$NetworkCallback allNetworkCallback
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.String TAG
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Listener listeners
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy MAXBUNDLE
org.webrtc.HardwareVideoEncoder: int frameSizeBytes
org.webrtc.RtpParameters$Codec: java.lang.String name
org.webrtc.Metrics$HistogramInfo: java.util.Map samples
org.webrtc.VideoFrameBufferType: int I422
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.platform.PlatformViewsController platformViewsController
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PROJECTION_DATA
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate wifiDirectManagerDelegate
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean getAllNetworksFromCache
org.webrtc.PeerConnectionFactory$Options: int networkIgnoreMask
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$BundlePolicy bundlePolicy
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Waiter waiters
org.webrtc.PeerConnectionFactory$InitializationOptions: org.webrtc.Logging$Severity loggableSeverity
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$FrameType frameType
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Null
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackLibraryPath
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState CLOSED
org.webrtc.EglRenderer: float layoutAspectRatio
org.webrtc.VideoFrameBufferType: int NATIVE
org.webrtc.RTCStats: java.lang.String id
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.audio.AudioProcessingController audioProcessingController
org.webrtc.RefCountDelegate: java.lang.Runnable releaseCallback
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor audioInterceptor
org.webrtc.JavaI420Buffer: int strideY
org.webrtc.VideoEncoder$ScalingSettings: org.webrtc.VideoEncoder$ScalingSettings OFF
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: io.flutter.plugin.common.MethodChannel$Result val$result
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType[] $VALUES
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind SPEAKER
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
org.webrtc.SurfaceEglRenderer: boolean isFirstFrameRendered
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: org.webrtc.NetworkChangeDetector$NetworkInformation wifiP2pNetworkInfo
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate
org.webrtc.audio.LowLatencyAudioBufferManager: boolean keepLoweringBufferSize
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState[] $VALUES
org.webrtc.RtpParameters$Encoding: java.lang.Integer minBitrateBps
org.webrtc.HardwareVideoEncoder: android.view.Surface textureInputSurface
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int requestedWidth
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.util.LongSparseArray renders
org.webrtc.PeerConnection$RTCConfiguration: boolean disableIPv6OnWifi
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo staticSignalingThread
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder encoder
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_DEFAULT
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useHardwareAcousticEchoCanceler
org.webrtc.FileVideoCapturer$VideoReaderY4M: java.lang.String TAG
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_WIFI
org.webrtc.video.CustomVideoDecoderFactory: boolean forceSWCodec
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer dataY
org.webrtc.YuvConverter: org.webrtc.YuvConverter$ShaderCallbacks shaderCallbacks
org.webrtc.HardwareVideoEncoder: boolean running
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: java.lang.String frameCryptorId
org.webrtc.VideoEncoder$Settings: int width
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType[] $VALUES
org.webrtc.VideoFrameDrawer: float[] srcPoints
org.webrtc.GlTextureFrameBuffer: int height
org.webrtc.RtpParameters$Codec: java.lang.Integer clockRate
org.webrtc.IceCandidate: org.webrtc.PeerConnection$AdapterType adapterType
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: android.graphics.SurfaceTexture texture
org.webrtc.PeerConnectionFactory$ThreadInfo: java.lang.Thread thread
org.webrtc.StatsReport: org.webrtc.StatsReport$Value[] values
org.webrtc.EglRenderer: java.lang.Runnable logStatisticsRunnable
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.view.Surface surface
org.webrtc.VideoDecoder$Settings: int height
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver$1: com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver this$1
org.webrtc.audio.JavaAudioDeviceModule$Builder: int audioFormat
org.webrtc.H264Utils: org.webrtc.VideoCodecInfo DEFAULT_H264_HIGH_PROFILE_CODEC
org.webrtc.HardwareVideoDecoderFactory: org.webrtc.Predicate defaultAllowedPredicate
org.webrtc.AndroidVideoDecoder: int height
org.webrtc.RtpCapabilities$HeaderExtensionCapability: java.lang.String uri
org.webrtc.CryptoOptions$SFrame: boolean requireFrameEncryption
org.webrtc.SimulcastVideoEncoderFactory: org.webrtc.VideoEncoderFactory primary
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage lastDequeuedImage
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy[] $VALUES
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: com.cloudwebrtc.webrtc.record.VideoFileRenderer videoFileRenderer
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfoEx: com.cloudwebrtc.webrtc.CameraEventsHandler cameraEventsHandler
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_CELLULAR
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int maxBitrateBps
org.webrtc.GlGenericDrawer: int inTcLocation
org.webrtc.PeerConnection$RTCConfiguration: boolean enableIceGatheringOnAnyAddressPorts
org.webrtc.MediaCodecUtils$1: int[] $SwitchMap$org$webrtc$VideoCodecMimeType
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.VideoDecoderFactory videoDecoderFactory
org.webrtc.CameraCapturer: org.webrtc.CameraSession$CreateSessionCallback createSessionCallback
org.webrtc.audio.WebRtcAudioRecord: java.nio.ByteBuffer byteBuffer
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.content.Intent mediaProjectionPermissionResultData
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState RUNNING
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus FALLBACK_SOFTWARE
org.webrtc.audio.JavaAudioDeviceModule: long nativeAudioDeviceModule
org.webrtc.NV12Buffer: java.nio.ByteBuffer buffer
org.webrtc.VideoFileRenderer: android.os.HandlerThread renderThread
org.webrtc.GlTextureFrameBuffer: int textureId
org.webrtc.RtpParameters$Encoding: double bitratePriority
org.webrtc.RtpTransceiver$RtpTransceiverInit: java.util.List streamIds
kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object _next
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$SdpSemantics sdpSemantics
org.webrtc.VideoSource$AspectRatio: org.webrtc.VideoSource$AspectRatio UNDEFINED
org.webrtc.CameraCapturer: java.lang.String TAG
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode AUDIO_RECORD_START_EXCEPTION
org.webrtc.audio.WebRtcAudioRecord: long nativeAudioRecord
org.webrtc.SurfaceViewRenderer: int rotatedFrameHeight
org.webrtc.AndroidVideoDecoder$FrameInfo: int rotation
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR_4G
org.webrtc.CameraCapturer: int openAttemptsRemaining
org.webrtc.WebrtcBuildVersion: java.lang.String webrtc_branch
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.atomic.AtomicReference audioSourceMatchesRecordingSessionRef
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate connectivityManagerDelegate
org.webrtc.audio.WebRtcAudioRecord: java.lang.String TAG
org.webrtc.HardwareVideoEncoder: java.util.Map params
org.webrtc.AndroidVideoDecoder: java.lang.String codecName
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper$FrameRefMonitor frameRefMonitor
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType WIFI
org.webrtc.audio.WebRtcAudioRecord: int CALLBACK_BUFFER_SIZE_MS
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLSurface eglSurface
org.webrtc.PeerConnection$RTCConfiguration: boolean enableImplicitRollback
org.webrtc.VideoFileRenderer$1: org.webrtc.EglBase$Context val$sharedContext
org.webrtc.RendererCommon$VideoLayoutMeasure: float visibleFractionMismatchOrientation
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: android.os.ResultReceiver resultReceiver
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.video.CustomVideoEncoderFactory videoEncoderFactory
org.webrtc.TextureBufferImpl: int unscaledHeight
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus ERR_PARAMETER
org.webrtc.audio.WebRtcAudioManager: int DEFAULT_SAMPLE_RATE_HZ
org.webrtc.SurfaceTextureHelper: boolean isQuitting
org.webrtc.CryptoOptions$Builder: boolean enableGcmCryptoSuites
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: int requestCode
org.webrtc.EglThread: org.webrtc.EglThread$HandlerWithExceptionCallbacks handler
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus TARGET_BITRATE_OVERSHOOT
org.webrtc.SurfaceTextureHelper$1: android.os.Handler val$handler
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useLowLatency
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String id
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.os.HandlerThread audioThread
org.webrtc.EglRenderer: boolean mirrorVertically
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor inputSamplesInterceptor
org.webrtc.RenderSynchronizer: java.lang.String TAG
org.webrtc.Predicate$3: org.webrtc.Predicate this$0
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType OES
org.webrtc.H264Utils: java.lang.String H264_FMTP_PACKETIZATION_MODE
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState[] $VALUES
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy[] $VALUES
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.GetUserMediaImpl getUserMediaImpl
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: io.flutter.plugin.common.EventChannel eventChannel
org.webrtc.H264Utils: java.lang.String H264_CONSTRAINED_HIGH_3_1
org.webrtc.CameraCapturer: org.webrtc.CameraSession currentSession
org.webrtc.Camera1Session: boolean captureToTexture
org.webrtc.EglRenderer: java.util.ArrayList frameListeners
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: org.webrtc.MediaStream mediaStream
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int requestedHeight
org.webrtc.EglBase: int[] CONFIG_RECORDABLE
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.video.camera.CameraUtils cameraUtils
org.webrtc.MediaCodecVideoDecoderFactory: org.webrtc.EglBase$Context sharedContext
org.webrtc.EncodedImage: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.VideoTrack: java.util.IdentityHashMap sinks
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_NONE
org.webrtc.Camera1Session: java.lang.String TAG
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR_3G
org.webrtc.SurfaceEglRenderer: int frameRotation
org.webrtc.ThreadUtils$1: java.lang.Thread val$thread
org.webrtc.WrappedVideoDecoderFactory: org.webrtc.VideoDecoderFactory platformSoftwareVideoDecoderFactory
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _parentHandle
kotlinx.coroutines.EventLoopImplBase: int _isCompleted
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean released
org.webrtc.MediaCodecUtils: int COLOR_QCOM_FORMATYVU420PackedSemiPlanar64x32Tile2m8ka
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$IceTransportsType iceTransportsType
com.cloudwebrtc.webrtc.video.LocalVideoTrack: org.webrtc.VideoSink sink
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: org.webrtc.NetworkChangeDetector$Observer observer
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback audioSamplesReadyCallback
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: int rotatedFrameWidth
org.webrtc.RtpParameters: java.util.List encodings
com.cloudwebrtc.webrtc.record.VideoFileRenderer: boolean isRunning
kotlinx.coroutines.flow.StateFlowSlot: java.lang.Object _state
org.webrtc.Camera1Session: org.webrtc.CameraSession$Events events
org.webrtc.HardwareVideoEncoderFactory: int QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_M_MS
org.webrtc.CryptoOptions$Srtp: boolean enableGcmCryptoSuites
org.webrtc.VideoFrameDrawer$YuvUploader: int[] yuvTextures
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PERMISSION_SCREEN
com.cloudwebrtc.webrtc.audio.AudioProcessingController: org.webrtc.ExternalAudioProcessingFactory externalAudioProcessingFactory
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType RGB
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy[] $VALUES
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.util.Map mSurfaceTextureHelpers
org.webrtc.VideoFileRenderer: int outputFileWidth
org.webrtc.EglRenderer: boolean mirrorHorizontally
org.webrtc.RenderSynchronizer: android.view.Choreographer choreographer
org.webrtc.audio.WebRtcAudioTrack: int initialBufferSizeInFrames
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy ALL
org.webrtc.DynamicBitrateAdjuster: double BITRATE_ADJUSTMENT_MAX_SCALE
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: int sensorOrientation
com.cloudwebrtc.webrtc.utils.PermissionUtils$1: com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback val$callback
org.webrtc.ScreenCapturerAndroid: int width
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State CLOSING
io.flutter.embedding.engine.FlutterJNI: java.lang.String vmServiceUri
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState INTERNALERROR
org.webrtc.TextureBufferImpl: android.graphics.Matrix transformMatrix
com.cloudwebrtc.webrtc.GetUserMediaImpl: boolean isFacing
org.webrtc.H264Utils: org.webrtc.VideoCodecInfo DEFAULT_H264_BASELINE_PROFILE_CODEC
com.cloudwebrtc.webrtc.LocalTrack: org.webrtc.MediaStreamTrack track
com.cloudwebrtc.webrtc.record.VideoFileRenderer: org.webrtc.VideoFrameDrawer frameDrawer
org.webrtc.VideoCodecInfo: java.lang.String H264_CONSTRAINED_BASELINE_3_1
org.webrtc.Camera2Session: int fpsUnitFactor
org.webrtc.RtpParameters$Encoding: java.lang.Integer maxBitrateBps
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.ScheduledFuture future
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecMimeType codecType
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_UNKNOWN
org.webrtc.ScreenCapturerAndroid: long numCapturedFrames
org.webrtc.CameraEnumerationAndroid$1: int val$requestedFps
org.webrtc.PeerConnection$RTCConfiguration: boolean activeResetSrtpParams
org.webrtc.SurfaceViewRenderer: int surfaceWidth
org.webrtc.HardwareVideoEncoder: int MAX_VIDEO_FRAMERATE
com.cloudwebrtc.webrtc.video.camera.CameraUtils$NoSuchFieldWithNameException: java.lang.String className
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_APICALL
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: io.flutter.plugin.common.MethodChannel$Result val$result
org.webrtc.audio.JavaAudioDeviceModule$Builder: int audioSource
org.webrtc.EglBase10Impl: int EGL_CONTEXT_CLIENT_VERSION
org.webrtc.VideoDecoder$Settings: int numberOfCores
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceCheckMinInterval
com.cloudwebrtc.webrtc.utils.AnyThreadResult: android.os.Handler handler
org.webrtc.NetworkPreference: int NEUTRAL
org.webrtc.AndroidVideoDecoder: org.webrtc.EglBase$Context sharedContext
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGL10 egl
org.webrtc.CryptoOptions$Srtp: boolean enableAes128Sha1_32CryptoCipher
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State ENDED
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.view.TextureRegistry$SurfaceProducer$Callback callback
org.webrtc.audio.WebRtcAudioEffects: boolean DEBUG
org.webrtc.FileVideoCapturer$1: org.webrtc.FileVideoCapturer this$0
org.webrtc.ThreadUtils$3: org.webrtc.ThreadUtils$1Result val$result
org.webrtc.Camera2Session: int width
org.webrtc.CameraCapturer: int MAX_OPEN_CAMERA_ATTEMPTS
org.webrtc.TextureBufferImpl: org.webrtc.TextureBufferImpl$RefCountMonitor refCountMonitor
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.util.concurrent.ExecutorService executor
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type RGB
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState MISSINGKEY
org.webrtc.FileVideoCapturer: java.util.Timer timer
org.webrtc.EncodedImage$Builder: java.nio.ByteBuffer buffer
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_STATEINFO
org.webrtc.NetworkPreference: int NOT_PREFERRED
org.webrtc.CameraCapturer$4: org.webrtc.CameraCapturer this$0
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel INPUT
org.webrtc.Camera2Session$CameraStateCallback: org.webrtc.Camera2Session this$0
org.webrtc.PeerConnection$RTCConfiguration: boolean pruneTurnPorts
org.webrtc.StatsReport: java.lang.String id
org.webrtc.NetworkMonitorAutoDetect: boolean includeWifiDirect
org.webrtc.NV21Buffer: int height
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: boolean isDisposed
org.webrtc.CameraCapturer$7: org.webrtc.CameraVideoCapturer$CameraSwitchHandler val$switchEventsHandler
kotlinx.coroutines.scheduling.WorkQueue: int producerIndex
org.webrtc.EglBase: int[] CONFIG_PLAIN
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType DISCONNECTED
org.webrtc.GlGenericDrawer: java.lang.String DEFAULT_VERTEX_SHADER_STRING
org.webrtc.NativeLibrary: boolean libraryLoaded
kotlinx.coroutines.CompletedExceptionally: int _handled
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _exceptionsHolder
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: java.util.HashMap callbacks
org.webrtc.YuvConverter: org.webrtc.GlGenericDrawer drawer
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_ETHERNET
org.webrtc.HardwareVideoEncoderFactory: boolean enableIntelVp8Encoder
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: boolean ignoringFence
org.webrtc.PeerConnection$IceServer$Builder: java.lang.String password
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: boolean manageAudioFocus
org.webrtc.ScreenCapturerAndroid: android.hardware.display.VirtualDisplay virtualDisplay
org.webrtc.MediaSource: org.webrtc.RefCountDelegate refCountDelegate
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.Map localStreams
org.webrtc.EglBase10Impl: org.webrtc.EglBase10Impl$EglConnection eglConnection
org.webrtc.EglRenderer: org.webrtc.EglThread eglThread
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: android.content.Context context
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: android.app.Activity activity
org.webrtc.PeerConnection: java.util.List senders
io.flutter.view.AccessibilityViewEmbedder: java.util.Map embeddedViewToDisplayBounds
org.webrtc.VideoCodecInfo: java.lang.String H264_FMTP_PACKETIZATION_MODE
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle lifecycle
org.webrtc.MediaStreamTrack$MediaType: int nativeIndex
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType ADAPTER_TYPE_ANY
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState NEW
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: java.util.List preferredDeviceList
org.webrtc.VideoEncoder$Settings: int numberOfSimulcastStreams
org.webrtc.VideoFileRenderer: int outputFrameSize
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer dataU
org.webrtc.audio.WebRtcAudioRecord: int AUDIO_RECORD_STOP
org.webrtc.audio.JavaAudioDeviceModule$Builder: java.util.concurrent.ScheduledExecutorService scheduler
org.webrtc.SurfaceEglRenderer: org.webrtc.RendererCommon$RendererEvents rendererEvents
org.webrtc.audio.WebRtcAudioEffects: java.lang.String TAG
org.webrtc.SurfaceTextureHelper: org.webrtc.VideoSink pendingListener
org.webrtc.VideoSource: org.webrtc.CapturerObserver capturerObserver
org.webrtc.CameraCapturer: java.lang.Object stateLock
org.webrtc.EglRenderer: org.webrtc.RendererCommon$GlDrawer drawer
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.PeerConnection$RTCConfiguration configuration
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int frameSizePixels
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: android.media.Image image
org.webrtc.DtmfSender: long nativeDtmfSender
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoEncoder$Callback callback
org.webrtc.CameraCapturer$3: org.webrtc.CameraCapturer this$0
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$1: int[] $SwitchMap$org$webrtc$FrameCryptor$FrameCryptionState
org.webrtc.SurfaceEglRenderer: int rotatedFrameHeight
io.flutter.view.AccessibilityViewEmbedder: java.lang.String TAG
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long id
com.cloudwebrtc.webrtc.DataChannelObserver: org.webrtc.DataChannel dataChannel
org.webrtc.audio.WebRtcAudioManager: int DEFAULT_FRAME_PER_BUFFER
org.webrtc.VideoEncoder$Settings: int maxFramerate
org.webrtc.CameraEnumerationAndroid$1: int MIN_FPS_LOW_VALUE_WEIGHT
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.nio.ByteBuffer[] encoderOutputBuffers
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraEventsHandler eventsHandler
org.webrtc.NV12Buffer: int stride
com.cloudwebrtc.webrtc.PeerConnectionObserver$1: int[] $SwitchMap$org$webrtc$RtpTransceiver$RtpTransceiverDirection
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: java.util.Set availableNetworks
org.webrtc.VideoDecoderFallback: org.webrtc.VideoDecoder fallback
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: io.flutter.view.TextureRegistry$SurfaceTextureEntry entry
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference[] $VALUES
org.webrtc.VideoDecoder$DecodeInfo: boolean isMissingFrames
org.webrtc.audio.WebRtcAudioTrack: int AUDIO_TRACK_START
org.webrtc.AudioTrack: java.util.IdentityHashMap sinks
org.webrtc.SurfaceTextureHelper$1: org.webrtc.YuvConverter val$yuvConverter
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: com.cloudwebrtc.webrtc.SurfaceTextureRenderer surfaceTextureRenderer
kotlinx.coroutines.channels.BufferedChannel: long completedExpandBuffersAndPauseFlag
org.webrtc.Camera2Session: android.os.Handler cameraThreadHandler
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$7: int[] $SwitchMap$com$cloudwebrtc$webrtc$utils$ObjectType
org.webrtc.ThreadUtils$1CaughtException: java.lang.Exception e
androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object value
org.webrtc.FrameCryptor: long observerPtr
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type ROLLBACK
org.webrtc.CryptoOptions$Srtp: boolean enableEncryptedRtpHeaderExtensions
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: int frameRotation
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.AudioEncoderFactoryFactory audioEncoderFactoryFactory
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.Map localTracks
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState[] $VALUES
kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object _cur
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus[] $VALUES
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType[] $VALUES
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.os.Handler audioThreadHandler
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_2G
org.webrtc.RtpCapabilities$CodecCapability: java.lang.Integer numChannels
org.webrtc.audio.WebRtcAudioRecord: byte[] emptyBytes
org.webrtc.HardwareVideoEncoder$BusyCount: int count
org.webrtc.Logging: java.util.logging.Logger fallbackLogger
org.webrtc.RtpParameters$Encoding: java.lang.Integer maxFramerate
com.cloudwebrtc.webrtc.record.VideoFileRenderer: long presTime
com.cloudwebrtc.webrtc.GetUserMediaImpl$6: java.lang.String val$id
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5: io.flutter.plugin.common.MethodChannel$Result val$result
io.flutter.embedding.engine.FlutterJNI: java.util.Set flutterUiDisplayListeners
org.webrtc.EglRenderer: int framesReceived
org.webrtc.GlGenericDrawer: java.lang.String vertexShader
org.webrtc.ExternalAudioProcessingFactory: long renderPreProcessingPtr
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State LIVE
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: androidx.concurrent.futures.AbstractResolvableFuture$Waiter next
org.webrtc.EncodedImage: int rotation
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.media.MediaCodec mediaCodec
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioAttributes audioAttributes
com.cloudwebrtc.webrtc.video.VideoCapturerInfo: int width
io.flutter.embedding.engine.FlutterJNI: java.lang.Long nativeShellHolderId
org.webrtc.Camera2Session: java.lang.String cameraId
org.webrtc.CameraEnumerationAndroid$2: int val$requestedWidth
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState OPENING
org.webrtc.SurfaceTextureHelper$1: java.lang.String val$threadName
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState[] $VALUES
org.webrtc.AndroidVideoDecoder: java.lang.String TAG
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: org.webrtc.NetworkMonitorAutoDetect this$0
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object sendSegment
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$IPAddress[] ipAddresses
io.flutter.plugin.platform.SingleViewPresentation: java.lang.String TAG
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback audioTrackErrorCallback
org.webrtc.HardwareVideoEncoder: boolean useSurfaceMode
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType String
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_ERROR
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback audioSamplesReadyCallback
org.webrtc.Camera1Session$2: org.webrtc.Camera1Session this$0
org.webrtc.CameraCapturer: android.os.Handler uiThreadHandler
org.webrtc.DataChannel$Init: boolean negotiated
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType UNKNOWN
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: boolean isRenderingPaused
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$1: com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer this$0
org.webrtc.YuvConverter$ShaderCallbacks: float[] yCoeffs
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _removedRef
org.webrtc.RenderSynchronizer: float DEFAULT_TARGET_FPS
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType SCALE_ASPECT_BALANCED
org.webrtc.RtpParameters$Encoding: java.lang.String rid
org.webrtc.RefCountDelegate: java.util.concurrent.atomic.AtomicInteger refCount
org.webrtc.RtcCertificatePem: java.lang.String privateKey
org.webrtc.ExternalAudioProcessingFactory: long capturePostProcessingPtr
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType ECDSA
org.webrtc.audio.VolumeLogger: java.lang.String THREAD_NAME
org.webrtc.BaseBitrateAdjuster: double targetFramerateFps
org.webrtc.Camera2Session: boolean isCameraFrontFacing
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_WARNING
org.webrtc.Camera2Session: android.hardware.camera2.CameraDevice cameraDevice
org.webrtc.VideoEncoder$Capabilities: boolean lossNotification
org.webrtc.RtpCapabilities$CodecCapability: java.lang.Integer clockRate
org.webrtc.WrappedNativeI420Buffer: int strideV
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: android.os.Handler handler
org.webrtc.SurfaceTextureHelper$1: boolean val$alignTimestamps
org.webrtc.VideoCodecInfo: java.lang.String H264_FMTP_LEVEL_ASYMMETRY_ALLOWED
org.webrtc.CameraCapturer$8: org.webrtc.CameraCapturer this$0
org.webrtc.NetworkChangeDetector$IPAddress: byte[] address
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String RESULT_RECEIVER
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR
org.webrtc.CameraCapturer: java.lang.Runnable openCameraTimeoutRunnable
com.cloudwebrtc.webrtc.video.camera.SdkCapabilityChecker: int SDK_VERSION
org.webrtc.Camera1Session: long constructionTimeNs
com.cloudwebrtc.webrtc.DataChannelObserver: java.lang.String flutterId
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel[] $VALUES
org.webrtc.Camera1Capturer: boolean captureToTexture
com.cloudwebrtc.webrtc.video.VideoCapturerInfo: org.webrtc.VideoCapturer capturer
org.webrtc.Logging: boolean loggingEnabled
org.webrtc.ScreenCapturerAndroid: int VIRTUAL_DISPLAY_DPI
org.webrtc.audio.WebRtcAudioRecord: int AUDIO_RECORD_START
org.webrtc.VideoProcessor$FrameAdaptationParameters: long timestampNs
org.webrtc.VideoProcessor$FrameAdaptationParameters: int cropY
com.cloudwebrtc.webrtc.video.camera.CameraUtils: com.cloudwebrtc.webrtc.GetUserMediaImpl getUserMediaImpl
org.webrtc.PeerConnection$IceServer: java.util.List tlsAlpnProtocols
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.util.Map mVideoCapturers
org.webrtc.HardwareVideoEncoder: boolean isSemiPlanar
org.webrtc.RtpTransceiver$RtpTransceiverInit: org.webrtc.RtpTransceiver$RtpTransceiverDirection direction
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils$1: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$DeviceOrientation
org.webrtc.PeerConnection: long nativePeerConnection
com.cloudwebrtc.webrtc.record.VideoFileRenderer: long videoFrameStart
org.webrtc.AndroidVideoDecoder: java.lang.Object dimensionLock
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useHardwareNoiseSuppressor
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType NOHOST
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType VPN
io.flutter.plugin.platform.SingleViewPresentation: boolean startFocused
org.webrtc.CameraVideoCapturer$CameraStatistics: int CAMERA_OBSERVER_PERIOD_MS
org.webrtc.CameraCapturer: android.content.Context applicationContext
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: boolean released
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjectionManager mediaProjectionManager
com.cloudwebrtc.webrtc.PeerConnectionObserver: io.flutter.plugin.common.EventChannel$EventSink eventSink
org.webrtc.VideoProcessor$FrameAdaptationParameters: int scaleHeight
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: com.cloudwebrtc.webrtc.FlutterWebRTCPlugin sharedSingleton
org.webrtc.Logging: org.webrtc.Logging$Severity loggableSeverity
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType SCALE_ASPECT_FIT
com.cloudwebrtc.webrtc.video.camera.CameraUtils: java.lang.String TAG
org.webrtc.MediaCodecUtils: java.lang.String EXYNOS_PREFIX
org.webrtc.GlGenericDrawer: java.nio.FloatBuffer FULL_RECTANGLE_BUFFER
org.webrtc.WrappedNativeI420Buffer: int strideU
org.webrtc.EglBase10Impl: java.lang.String TAG
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_CRITICAL
org.webrtc.JavaI420Buffer: int strideU
com.cloudwebrtc.webrtc.GetUserMediaImpl: int DEFAULT_WIDTH
org.webrtc.EncodedImage$Builder: int encodedHeight
org.webrtc.DynamicBitrateAdjuster: double BITS_PER_BYTE
org.webrtc.RtpParameters$Encoding: java.lang.String scalabilityMode
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus UNINITIALIZED
org.webrtc.AndroidVideoDecoder: org.webrtc.MediaCodecWrapper codec
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR_5G
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_ERROR
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState[] $VALUES
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy REQUIRE
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaCodec audioEncoder
org.webrtc.audio.JavaAudioDeviceModule: int outputSampleRate
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener insetsListener
org.webrtc.FileVideoCapturer$VideoReaderY4M: long videoStart
org.webrtc.CameraCapturer: android.os.Handler cameraThreadHandler
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int channelCount
com.cloudwebrtc.webrtc.GetUserMediaImpl: org.webrtc.audio.JavaAudioDeviceModule audioDeviceModule
org.webrtc.Camera2Session: boolean firstFrameReported
org.webrtc.audio.WebRtcAudioRecord: android.content.Context context
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_STREAM
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceCheckIntervalStrongConnectivityMs
org.webrtc.EncodedImage$FrameType: int nativeIndex
org.webrtc.EglRenderer: long minRenderPeriodNs
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int audioFormat
io.flutter.plugins.GeneratedPluginRegistrant: java.lang.String TAG
org.webrtc.VideoCodecInfo: java.lang.String name
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: com.cloudwebrtc.webrtc.FlutterWebRTCPlugin this$0
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState PENDING
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType SCALE_ASPECT_FILL
org.webrtc.Camera1Session$1: org.webrtc.Camera1Session this$0
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState CLOSED
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object _closeCause
org.webrtc.DataChannel: long nativeDataChannel
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_DEBUG
org.webrtc.MediaConstraints: java.util.List mandatory
org.webrtc.Camera1Session: int NUMBER_OF_CAPTURE_BUFFERS
org.webrtc.PeerConnection: java.util.List transceivers
org.webrtc.RtpReceiver: long nativeObserver
org.webrtc.AndroidVideoDecoder: java.lang.Exception shutdownException
org.webrtc.Camera1Session: boolean firstFrameReported
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState DECRYPTIONFAILED
org.webrtc.Camera2Session: org.webrtc.Histogram camera2ResolutionHistogram
org.webrtc.GlGenericDrawer: java.lang.String genericFragmentSource
org.webrtc.VideoFileRenderer: org.webrtc.YuvConverter yuvConverter
org.webrtc.HardwareVideoEncoder: java.lang.Thread outputThread
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.AudioDecoderFactoryFactory audioDecoderFactoryFactory
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback samplesReadyCallback
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object receiveSegment
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Array
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int width
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$KeyType keyType
org.webrtc.CameraCapturer$1: org.webrtc.CameraCapturer this$0
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoFrameDrawer videoFrameDrawer
org.webrtc.SurfaceTextureHelper: android.graphics.SurfaceTexture surfaceTexture
org.webrtc.PeerConnectionFactory: long nativeFactory
org.webrtc.NetworkMonitorAutoDetect: android.content.IntentFilter intentFilter
org.webrtc.EglRenderer: java.lang.Runnable eglExceptionCallback
org.webrtc.H264Utils: java.lang.String H264_LEVEL_3_1
org.webrtc.Histogram: long handle
org.webrtc.audio.JavaAudioDeviceModule: android.content.Context context
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraStatistics cameraStatistics
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector networkChangeDetector
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: io.flutter.plugin.common.MethodChannel$Result val$result
com.cloudwebrtc.webrtc.utils.PermissionUtils: java.lang.String GRANT_RESULTS
org.webrtc.audio.JavaAudioDeviceModule$Builder: android.media.AudioAttributes audioAttributes
org.webrtc.SurfaceTextureHelper: org.webrtc.YuvConverter yuvConverter
org.webrtc.VideoFrame: long timestampNs
org.webrtc.CameraCapturer$8: org.webrtc.CameraVideoCapturer$CameraSwitchHandler val$switchEventsHandler
org.webrtc.NV12Buffer: int width
org.webrtc.audio.JavaAudioDeviceModule: java.lang.String TAG
org.webrtc.SurfaceViewRenderer: boolean enableFixedSize
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: org.webrtc.VideoEncoderFactory softwareVideoEncoderFactory
io.flutter.embedding.engine.FlutterJNI: boolean initCalled
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: java.lang.String TAG
org.webrtc.VideoCodecInfo: java.lang.String H264_FMTP_PROFILE_LEVEL_ID
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$TlsCertPolicy tlsCertPolicy
org.webrtc.NV12Buffer: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.YuvConverter$ShaderCallbacks: int coeffsLoc
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackClassName
org.webrtc.AndroidVideoDecoder$FrameInfo: long decodeStartTimeMs
org.webrtc.Priority: int HIGH
org.webrtc.Camera2Session: org.webrtc.Histogram camera2StartTimeMsHistogram
org.webrtc.SoftwareVideoEncoderFactory: java.lang.String TAG
org.webrtc.HardwareVideoEncoder: int sliceHeight
org.webrtc.audio.JavaAudioDeviceModule: org.webrtc.audio.WebRtcAudioTrack audioOutput
org.webrtc.EglBase$ConfigBuilder: boolean supportsPixelBuffer
org.webrtc.Camera2Session: org.webrtc.CameraSession$CreateSessionCallback callback
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.media.projection.MediaProjectionManager mediaProjectionManager
org.webrtc.audio.WebRtcAudioRecord: int CHECK_REC_STATUS_DELAY_MS
org.webrtc.PeerConnection$RTCConfiguration: java.util.List iceServers
org.webrtc.TextureBufferImpl$1: java.lang.Runnable val$releaseCallback
io.flutter.embedding.engine.FlutterJNI: float displayDensity
org.webrtc.EglRenderer: android.graphics.Matrix drawMatrix
org.webrtc.PeerConnection$IceServer$Builder: java.util.List urls
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_LOOPBACK
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.PeerConnection peerConnection
org.webrtc.HardwareVideoEncoder: java.nio.ByteBuffer configBuffer
org.webrtc.CameraCapturer: org.webrtc.SurfaceTextureHelper surfaceHelper
org.webrtc.PeerConnection$RTCConfiguration: java.lang.String turnLoggingId
com.cloudwebrtc.webrtc.GetUserMediaImpl$7: int[] $SwitchMap$com$cloudwebrtc$webrtc$utils$ObjectType
org.webrtc.Camera2Enumerator: java.util.Map cachedSupportedFormats
kotlinx.coroutines.CancelledContinuation: int _resumed
org.webrtc.Camera1Session: android.content.Context applicationContext
org.webrtc.Camera1Session: org.webrtc.Histogram camera1StartTimeMsHistogram
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: boolean isActive
org.webrtc.VideoCodecInfo: java.lang.String H264_CONSTRAINED_HIGH_3_1
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: io.flutter.plugin.common.EventChannel$EventSink eventSink
org.webrtc.DataChannel$Init: int id
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_ANY
org.webrtc.CandidatePairChangeEvent: int estimatedDisconnectedTimeMs
com.cloudwebrtc.webrtc.utils.ConstraintsArray: java.util.ArrayList mArray
kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex
org.webrtc.NV21Buffer: int width
org.webrtc.EglBase14Impl$Context: android.opengl.EGLContext egl14Context
com.cloudwebrtc.webrtc.audio.RecordSamplesReadyCallbackAdapter: java.util.List callbacks
org.webrtc.VideoEncoder$Settings: int height
org.webrtc.RtpSender: boolean ownsTrack
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection SEND_ONLY
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: org.webrtc.CapturerObserver capturerObserver
org.webrtc.AndroidVideoDecoder: int DEQUEUE_OUTPUT_BUFFER_TIMEOUT_US
org.webrtc.RtpParameters$Codec: int payloadType
org.webrtc.PeerConnectionFactory$InitializationOptions: java.lang.String fieldTrials
org.webrtc.VideoSource: org.webrtc.NativeAndroidVideoTrackSource nativeAndroidVideoTrackSource
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.audio.RecordSamplesReadyCallbackAdapter recordSamplesReadyCallbackAdapter
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer dataV
org.webrtc.VideoFileRenderer: java.lang.String outputFileName
org.webrtc.CameraEnumerationAndroid$1: int MAX_FPS_HIGH_DIFF_WEIGHT
org.webrtc.VideoEncoder$ScalingSettings: java.lang.Integer high
org.webrtc.audio.WebRtcAudioRecord: boolean isAcousticEchoCancelerSupported
org.webrtc.CameraCapturer$9: org.webrtc.CameraSession val$oldSession
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.NetworkStatePredictorFactoryFactory networkStatePredictorFactoryFactory
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.nio.ByteBuffer[] audioOutputBuffers
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$RtcpMuxPolicy rtcpMuxPolicy
com.cloudwebrtc.webrtc.GetUserMediaImpl: int minAPILevel
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$ContinualGatheringPolicy continualGatheringPolicy
org.webrtc.EncodedImage$Builder: java.lang.Integer qp
org.webrtc.FrameCryptorAlgorithm: org.webrtc.FrameCryptorAlgorithm[] $VALUES
org.webrtc.DataChannel$Init: boolean ordered
org.webrtc.SurfaceTextureHelper: java.lang.Runnable setListenerRunnable
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int oldHeight
org.webrtc.HardwareVideoEncoderFactory: java.lang.String TAG
org.webrtc.EglBase14Impl: java.lang.String TAG
org.webrtc.FileVideoCapturer$VideoReaderY4M: java.io.RandomAccessFile mediaFile
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: com.cloudwebrtc.webrtc.MethodCallHandlerImpl methodCallHandler
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState DISCONNECTED
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: android.graphics.SurfaceTexture texture
org.webrtc.MediaStreamTrack: java.lang.String VIDEO_TRACK_KIND
org.webrtc.AndroidVideoDecoder: java.util.concurrent.BlockingDeque frameInfos
org.webrtc.PlatformSoftwareVideoDecoderFactory: org.webrtc.Predicate defaultAllowedPredicate
org.webrtc.WrappedVideoDecoderFactory: org.webrtc.VideoDecoderFactory hardwareVideoDecoderFactoryWithoutEglContext
org.webrtc.PeerConnection$RTCConfiguration: boolean surfaceIceCandidatesOnIceTransportTypeChanged
org.webrtc.HardwareVideoEncoder: long nextPresentationTimestampUs
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType RSA
org.webrtc.EglBase10Impl$Context: javax.microedition.khronos.egl.EGLContext eglContext
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState STOPPED
org.webrtc.HardwareVideoEncoder: org.webrtc.ThreadUtils$ThreadChecker encodeThreadChecker
org.webrtc.audio.WebRtcAudioTrack: android.content.Context context
com.cloudwebrtc.webrtc.utils.AnyThreadSink: io.flutter.plugin.common.EventChannel$EventSink eventSink
com.cloudwebrtc.webrtc.GetUserMediaImpl$5: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
org.webrtc.NetworkMonitorAutoDetect: java.lang.String TAG
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: android.content.IntentFilter orientationIntentFilter
org.webrtc.StatsReport: double timestamp
org.webrtc.NetworkChangeDetector$NetworkInformation: java.lang.String name
org.webrtc.audio.WebRtcAudioTrack: java.nio.ByteBuffer byteBuffer
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus OK
org.webrtc.AndroidVideoDecoder: int width
org.webrtc.NetworkMonitor: java.util.ArrayList nativeNetworkObservers
org.webrtc.Camera2Session: org.webrtc.Histogram camera2StopTimeMsHistogram
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: android.net.ConnectivityManager connectivityManager
org.webrtc.SurfaceEglRenderer: java.lang.String TAG
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long lastScheduleTime
org.webrtc.NetworkMonitor: java.util.ArrayList networkObservers
org.webrtc.PeerConnectionFactory$Options: boolean disableEncryption
org.webrtc.SurfaceTextureHelper$1: org.webrtc.SurfaceTextureHelper$FrameRefMonitor val$frameRefMonitor
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer stableWritableConnectionPingIntervalMs
org.webrtc.audio.WebRtcAudioEffects: android.media.audiofx.AudioEffect$Descriptor[] cachedEffects
org.webrtc.SurfaceTextureHelper$3: org.webrtc.SurfaceTextureHelper this$0
com.cloudwebrtc.webrtc.video.VideoCapturerInfo: int fps
org.webrtc.SurfaceTextureHelper: int textureHeight
org.webrtc.audio.WebRtcAudioTrack: int BUFFERS_PER_SECOND
org.webrtc.AndroidVideoDecoder: org.webrtc.ThreadUtils$ThreadChecker decoderThreadChecker
org.webrtc.VideoDecoderFallback: org.webrtc.VideoDecoder primary
org.webrtc.SurfaceTextureHelper: org.webrtc.VideoSink listener
org.webrtc.NetworkMonitorAutoDetect: android.net.ConnectivityManager$NetworkCallback mobileNetworkCallback
org.webrtc.EglThread: org.webrtc.EglBase$EglConnection eglConnection
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation lastOrientation
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: java.lang.String TAG
org.webrtc.Logging$TraceLevel: int level
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLConfig eglConfig
org.webrtc.RenderSynchronizer: long targetFrameIntervalNanos
org.webrtc.HardwareVideoEncoder: org.webrtc.GlRectDrawer textureDrawer
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.content.Intent mediaProjectionData
com.cloudwebrtc.webrtc.GetUserMediaImpl$6: io.flutter.plugin.common.MethodChannel$Result val$result
org.webrtc.EglBase14Impl$EglConnection: org.webrtc.RefCountDelegate refCountDelegate
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics[] $VALUES
org.webrtc.EglBase: int EGL_RECORDABLE_ANDROID
com.cloudwebrtc.webrtc.audio.AudioProcessingController: com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter renderPreProcessing
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map remoteTracks
org.webrtc.NetworkMonitor$2: org.webrtc.NetworkMonitor this$0
org.webrtc.PeerConnection$IceServer$Builder: java.util.List tlsAlpnProtocols
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_TERSEINFO
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.app.Activity activity
com.cloudwebrtc.webrtc.video.camera.Point: java.lang.Double y
org.webrtc.Camera2Session: android.hardware.camera2.CameraCaptureSession captureSession
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: android.media.AudioTrack originalTrack
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.media.projection.MediaProjection mediaProjection
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus REQUEST_SLI
com.cloudwebrtc.webrtc.utils.PermissionUtils: java.lang.String PERMISSIONS
org.webrtc.NetworkMonitorAutoDetect$NetworkState: boolean connected
org.webrtc.HardwareVideoEncoder: org.webrtc.ThreadUtils$ThreadChecker outputThreadChecker
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState[] $VALUES
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: int resultCode
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean trimOnMemoryPressure
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface surface
org.webrtc.audio.VolumeLogger: java.util.Timer timer
kotlinx.coroutines.internal.Segment: int cleanedAndPointers
org.webrtc.NetworkMonitor: java.lang.String TAG
org.webrtc.AndroidVideoDecoder: java.lang.Object renderedTextureMetadataLock
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory: org.webrtc.VideoEncoderFactory factory
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor outputSamplesInterceptor
org.webrtc.EglBase: int[] CONFIG_PIXEL_RGBA_BUFFER
org.webrtc.Camera1Session: android.os.Handler cameraThreadHandler
org.webrtc.ContextUtils: java.lang.String TAG
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState CONNECTING
org.webrtc.DefaultVideoEncoderFactory: org.webrtc.VideoEncoderFactory hardwareVideoEncoderFactory
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: io.flutter.plugin.common.MethodChannel methodChannel
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager$1: com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager this$0
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type[] $VALUES
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector$ConnectionType currentConnectionType
org.webrtc.MediaStream: java.lang.String TAG
org.webrtc.VideoFileRenderer$1: org.webrtc.VideoFileRenderer this$0
org.webrtc.EglRenderer: java.lang.Object fpsReductionLock
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState[] $VALUES
org.webrtc.VideoFileRenderer: android.os.HandlerThread fileThread
org.webrtc.VideoSource$AspectRatio: int height
org.webrtc.WebrtcBuildVersion: java.lang.String webrtc_revision
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils$1: int[] $SwitchMap$com$cloudwebrtc$webrtc$utils$ObjectType
kotlinx.coroutines.channels.BufferedChannel: long sendersAndCloseStatus
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode AUDIO_RECORD_START_STATE_MISMATCH
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PERMISSIONS
org.webrtc.RTCStats: java.lang.String type
org.webrtc.EglRenderer: org.webrtc.VideoFrameDrawer frameDrawer
org.webrtc.VideoSource: java.lang.Object videoProcessorLock
org.webrtc.FileVideoCapturer: java.util.TimerTask tickTask
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_MEMORY
org.webrtc.NetworkMonitorAutoDetect: long INVALID_NET_ID
org.webrtc.SoftwareVideoEncoderFactory: long nativeFactory
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState FAILED
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType EmptyFrame
io.flutter.embedding.engine.FlutterJNI: java.lang.String TAG
org.webrtc.HardwareVideoEncoder: org.webrtc.MediaCodecWrapper codec
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference BALANCED
org.webrtc.Camera1Session: org.webrtc.Histogram camera1ResolutionHistogram
org.webrtc.VideoFrameDrawer$YuvUploader: java.nio.ByteBuffer copyBuffer
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback stateCallback
org.webrtc.PeerConnection$IceServer: java.lang.String uri
org.webrtc.EglBase10Impl$Context: javax.microedition.khronos.egl.EGLConfig eglContextConfig
org.webrtc.NetworkMonitorAutoDetect: java.lang.String wifiSSID
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.lang.String MIME_TYPE
org.webrtc.ScreenCapturerAndroid: android.content.Intent mediaProjectionPermissionResultData
com.cloudwebrtc.webrtc.utils.AnyThreadResult: io.flutter.plugin.common.MethodChannel$Result result
org.webrtc.EglRenderer: java.lang.Object frameLock
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind[] $VALUES
org.webrtc.IceCandidateErrorEvent: java.lang.String url
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: org.webrtc.RendererCommon$RendererEvents rendererEvents
org.webrtc.NetworkMonitor$InstanceHolder: org.webrtc.NetworkMonitor instance
org.webrtc.RtpCapabilities$HeaderExtensionCapability: int preferredId
org.webrtc.VideoCodecInfo: java.lang.String H264_PROFILE_CONSTRAINED_HIGH
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState HAVE_REMOTE_PRANSWER
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean createNewReader
org.webrtc.SurfaceViewRenderer: org.webrtc.RendererCommon$VideoLayoutMeasure videoLayoutMeasure
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType[] $VALUES
org.webrtc.HardwareVideoEncoder: boolean isEncodingStatisticsEnabled
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: boolean enableInternalTracer
org.webrtc.PeerConnectionFactory$InitializationOptions: org.webrtc.NativeLibraryLoader nativeLibraryLoader
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: android.app.Application application
org.webrtc.EglRenderer: java.lang.String TAG
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState NEW
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: java.lang.Runnable onFrameConsumed
org.webrtc.Priority: int MEDIUM
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLSurface currentSurface
org.webrtc.HardwareVideoEncoder: long lastKeyFrameNs
org.webrtc.VideoCodecInfo: java.util.List scalabilityModes
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean enableVolumeLogger
org.webrtc.audio.WebRtcAudioTrack: long nativeAudioTrack
org.webrtc.ContextUtils: android.content.Context applicationContext
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState COMPLETE
org.webrtc.GlShader: int program
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix finalMatrix
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoDecoder$Callback callback
org.webrtc.Camera1Session: org.webrtc.Histogram camera1StopTimeMsHistogram
org.webrtc.FileVideoCapturer: org.webrtc.FileVideoCapturer$VideoReader videoReader
com.cloudwebrtc.webrtc.PeerConnectionObserver: com.cloudwebrtc.webrtc.StateProvider stateProvider
org.webrtc.RtpTransceiver: long nativeRtpTransceiver
org.webrtc.MediaCodecVideoDecoderFactory: org.webrtc.Predicate codecAllowedPredicate
org.webrtc.SoftwareVideoDecoderFactory$1: org.webrtc.SoftwareVideoDecoderFactory this$0
org.webrtc.PeerConnection$IceServer: org.webrtc.PeerConnection$TlsCertPolicy tlsCertPolicy
org.webrtc.StatsReport$Value: java.lang.String value
kotlinx.coroutines.internal.AtomicOp: java.lang.Object _consensus
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int minBitrateBps
org.webrtc.CameraVideoCapturer$CameraStatistics: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
org.webrtc.VideoFileRenderer: int frameCount
org.webrtc.EncodedImage: java.lang.Integer qp
org.webrtc.HardwareVideoEncoder: int REQUIRED_RESOLUTION_ALIGNMENT
org.webrtc.CryptoOptions$SFrame: org.webrtc.CryptoOptions this$0
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type PRANSWER
org.webrtc.EglBase10Impl: org.webrtc.EglBase10Impl$EglConnection EGL_NO_CONNECTION
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy PRUNE_BASED_ON_PRIORITY
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode[] $VALUES
org.webrtc.SurfaceViewRenderer: java.lang.String TAG
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_UNKNOWN
org.webrtc.EncodedImage: long captureTimeMs
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long lastDequeueTime
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useStereoInput
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType LOOPBACK
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState CHECKING
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout rootView
kotlinx.coroutines.InvokeOnCancelling: int _invoked
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.view.Surface surface
kotlinx.coroutines.channels.BufferedChannel: long receivers
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_INFO
org.webrtc.EglRenderer: org.webrtc.EglBase eglBase
org.webrtc.CameraCapturer$2: org.webrtc.CameraCapturer this$0
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer stunCandidateKeepaliveIntervalMs
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int underlyingNetworkTypeForVpn
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY
org.webrtc.VideoEncoder$BitrateAllocation: int[][] bitratesBbs
org.webrtc.Camera1Session: int cameraId
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.NetworkControllerFactoryFactory networkControllerFactoryFactory
org.webrtc.RtpParameters: org.webrtc.RtpParameters$DegradationPreference degradationPreference
org.webrtc.HardwareVideoEncoder: boolean automaticResizeOn
kotlinx.coroutines.channels.BufferedChannel: long bufferEnd
org.webrtc.HardwareVideoEncoder: java.lang.Integer yuvColorFormat
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.WebRtcAudioEffects effects
org.webrtc.ThreadUtils$3: org.webrtc.ThreadUtils$1CaughtException val$caughtException
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: androidx.lifecycle.ProcessLifecycleOwner this$0
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy ENABLED
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _state
io.flutter.view.AccessibilityViewEmbedder: io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors
org.webrtc.RtpParameters$Encoding: int networkPriority
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String REQUEST_CODE
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.Loggable loggable
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Byte
org.webrtc.audio.WebRtcAudioEffects: boolean shouldEnableAec
com.cloudwebrtc.webrtc.video.VideoCapturerInfo: int height
org.webrtc.GlGenericDrawer: int texMatrixLocation
org.webrtc.audio.WebRtcAudioTrack: int CALLBACK_BUFFER_SIZE_MS
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: int _width
org.webrtc.JavaI420Buffer: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.EglBase14$Context sharedContext
org.webrtc.audio.WebRtcAudioEffects: java.util.UUID AOSP_NOISE_SUPPRESSOR
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus LEVEL_EXCEEDED
com.cloudwebrtc.webrtc.DataChannelObserver: io.flutter.plugin.common.EventChannel eventChannel
com.cloudwebrtc.webrtc.utils.Utils$1: int[] $SwitchMap$org$webrtc$PeerConnection$IceGatheringState
org.webrtc.ScreenCapturerAndroid: org.webrtc.CapturerObserver capturerObserver
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection STOPPED
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection INACTIVE
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo workerThread
org.webrtc.SimulcastVideoEncoder: org.webrtc.VideoEncoderFactory fallback
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean ignoringFence
org.webrtc.MediaStream: java.util.List preservedVideoTracks
org.webrtc.HardwareVideoEncoder$1: org.webrtc.HardwareVideoEncoder this$0
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: android.content.Context applicationContext
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: io.flutter.plugin.common.MethodChannel$Result val$result
org.webrtc.DynamicBitrateAdjuster: double timeSinceLastAdjustmentMs
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$2: com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer this$0
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType VideoFrameKey
org.webrtc.audio.LowLatencyAudioBufferManager: int prevUnderrunCount
org.webrtc.RtpParameters$Encoding: boolean adaptiveAudioPacketTime
com.cloudwebrtc.webrtc.record.FrameCapturer: io.flutter.plugin.common.MethodChannel$Result callback
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: java.lang.String TAG
kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated
kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state
io.flutter.view.AccessibilityViewEmbedder: int nextFlutterId
org.webrtc.AndroidVideoDecoder: int stride
org.webrtc.VideoEncoder$RateControlParameters: double framerateFps
org.webrtc.EncodedImage$Builder: java.lang.Runnable releaseCallback
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor frameCryptor
org.webrtc.RtpParameters$HeaderExtension: java.lang.String uri
org.webrtc.RtpSender: long nativeRtpSender
org.webrtc.GlShader: java.lang.String TAG
org.webrtc.VideoDecoder$DecodeInfo: long renderTimeMs
org.webrtc.GlTextureFrameBuffer: int width
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState IN_PROGRESS
org.webrtc.EglRenderer: long renderTimeNs
org.webrtc.RtpParameters$Rtcp: boolean reducedSize
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: io.flutter.plugin.common.EventChannel eventChannel
org.webrtc.CameraCapturer: int framerate
org.webrtc.Logging: org.webrtc.Loggable loggable
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy[] $VALUES
org.webrtc.Camera2Session: org.webrtc.CameraEnumerationAndroid$CaptureFormat captureFormat
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceCheckIntervalWeakConnectivityMs
org.webrtc.Camera2Enumerator: android.hardware.camera2.CameraManager cameraManager
org.webrtc.SoftwareVideoEncoderFactory$1: org.webrtc.SoftwareVideoEncoderFactory this$0
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy NO_PRUNE
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus NO_OUTPUT
org.webrtc.VideoFrameDrawer: java.lang.String TAG
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetectorFactory networkChangeDetectorFactory
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useStereoOutput
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback animationCallback
org.webrtc.Camera2Session: org.webrtc.CameraSession$Events events
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _prev
org.webrtc.RtpCapabilities$HeaderExtensionCapability: boolean preferredEncrypted
io.flutter.embedding.engine.FlutterJNI: float refreshRateFPS
org.webrtc.Camera1Enumerator: boolean captureToTexture
org.webrtc.PeerConnectionDependencies: org.webrtc.SSLCertificateVerifier sslCertificateVerifier
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object _next
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: org.webrtc.VideoEncoderFactory hardwareVideoEncoderFactory
org.webrtc.MediaCodecUtils: java.lang.String[] SOFTWARE_IMPLEMENTATION_PREFIXES
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.util.HashMap perImageReaders
org.webrtc.VideoFrameDrawer: android.graphics.Point renderSize
org.webrtc.ThreadUtils$3: java.util.concurrent.Callable val$callable
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioManager audioManager
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity[] $VALUES
org.webrtc.audio.WebRtcAudioRecord: boolean isNoiseSuppressorSupported
org.webrtc.VideoEncoder$EncoderInfo: int requestedResolutionAlignment
org.webrtc.audio.WebRtcAudioRecord: void nativeDataIsRecorded(long,int,long)
org.webrtc.RtpReceiver: void nativeSetFrameDecryptor(long,long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void removeTrackForRendererById(java.lang.String)
org.webrtc.HardwareVideoEncoder: void updateInputFormat(android.media.MediaFormat)
org.webrtc.EglBase: void createDummyPbufferSurface()
org.webrtc.PeerConnectionFactory$ThreadInfo: org.webrtc.PeerConnectionFactory$ThreadInfo getCurrent()
org.webrtc.Camera1Session$SessionState: Camera1Session$SessionState(java.lang.String,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void streamDispose(org.webrtc.MediaStream)
org.webrtc.NetworkMonitor: void addNetworkObserver(org.webrtc.NetworkMonitor$NetworkObserver)
org.webrtc.CameraCapturer$3: void run()
org.webrtc.TextureBufferImpl$1: void onDestroy(org.webrtc.TextureBufferImpl)
androidx.window.area.reflectionguard.ExtensionWindowAreaStatusRequirements: int getWindowAreaStatus()
org.webrtc.EglThread: void addExceptionCallback(java.lang.Runnable)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.lang.String getNextTrackUUID()
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State fromNativeIndex(int)
org.webrtc.RtpSender: org.webrtc.RtpParameters nativeGetParameters(long)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$BundlePolicy getBundlePolicy()
org.webrtc.DynamicBitrateAdjuster: DynamicBitrateAdjuster()
org.webrtc.PeerConnection: void stopRtcEventLog()
org.webrtc.Logging: void d(java.lang.String,java.lang.String)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setCaptureTimeMs(long)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.view.Surface createInputSurface()
com.twilio.audioswitch.AbstractAudioSwitch$State: com.twilio.audioswitch.AbstractAudioSwitch$State valueOf(java.lang.String)
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType[] $values()
org.webrtc.AudioTrack: long nativeWrapSink(org.webrtc.AudioTrackSink)
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart valueOf(java.lang.String)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setAudioDecoderFactoryFactory(org.webrtc.AudioDecoderFactoryFactory)
org.webrtc.MediaStream: boolean nativeAddAudioTrackToNativeStream(long,long)
org.webrtc.JavaI420Buffer: void release()
org.webrtc.FileVideoCapturer: void changeCaptureFormat(int,int,int)
org.webrtc.CameraEnumerationAndroid$2: int diff(org.webrtc.Size)
org.webrtc.SurfaceTextureHelper: void lambda$setFrameRotation$4(int)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.lang.Boolean isHardwareEncoder$lambda$7(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorFactoryCreateFrameCryptor(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.MediaStream: void removeVideoTrack(long)
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType[] values()
org.webrtc.TextureBufferImpl$1: TextureBufferImpl$1(java.lang.Runnable)
io.flutter.view.TextureRegistry$SurfaceTextureEntry$-CC: void $default$setOnTrimMemoryListener(io.flutter.view.TextureRegistry$SurfaceTextureEntry,io.flutter.view.TextureRegistry$OnTrimMemoryListener)
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy valueOf(java.lang.String)
org.webrtc.ScreenCapturerAndroid$1: ScreenCapturerAndroid$1(org.webrtc.ScreenCapturerAndroid)
org.webrtc.RtpCapabilities$CodecCapability: org.webrtc.MediaStreamTrack$MediaType getKind()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
org.webrtc.EglBase$-CC: org.webrtc.EglBase14 createEgl14(android.opengl.EGLContext,int[])
com.cloudwebrtc.webrtc.utils.ConstraintsMap: boolean isNull(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: java.lang.String[] computePlatformResolvedLocale(java.lang.String[])
org.webrtc.PeerConnection$RTCConfiguration: boolean getPruneTurnPorts()
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: MediaRecorderImpl(java.lang.Integer,org.webrtc.VideoTrack,com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor)
org.webrtc.EglBase14Impl: EglBase14Impl(org.webrtc.EglBase14Impl$EglConnection)
org.webrtc.DefaultVideoDecoderFactory: DefaultVideoDecoderFactory(org.webrtc.VideoDecoderFactory)
org.webrtc.EglRenderer: void setFpsReduction(float)
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Drawable createAdaptiveIconDrawable(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
org.webrtc.EncodedImage: java.nio.ByteBuffer getBuffer()
org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata: AndroidVideoDecoder$DecodedTextureMetadata(long,java.lang.Integer)
org.webrtc.PeerConnection: void nativeAddIceCandidateWithObserver(java.lang.String,int,java.lang.String,org.webrtc.AddIceObserver)
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraDisconnected()
androidx.core.view.ViewCompat$Api28Impl: java.lang.Object requireViewById(android.view.View,int)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageEmptyResponseCallback(int)
org.webrtc.NetworkChangeDetector$ConnectionType: NetworkChangeDetector$ConnectionType(java.lang.String,int)
org.webrtc.CameraVideoCapturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy valueOf(java.lang.String)
org.webrtc.IceCandidate: int hashCode()
org.webrtc.VideoDecoder$Callback: void onDecodedFrame(org.webrtc.VideoFrame,java.lang.Integer,java.lang.Integer)
org.webrtc.HardwareVideoDecoderFactory$1: HardwareVideoDecoderFactory$1()
org.webrtc.Predicate: org.webrtc.Predicate or(org.webrtc.Predicate)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver$1: void onCancel(java.lang.Object)
org.webrtc.EglRenderer: EglRenderer(java.lang.String,org.webrtc.VideoFrameDrawer)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
org.webrtc.AndroidVideoDecoder: java.lang.String getImplementationName()
org.webrtc.Logging: void e(java.lang.String,java.lang.String)
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String getSourceIdConstraint(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.VideoCodecInfo: int hashCode()
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformView,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,android.view.View$OnFocusChangeListener)
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics[] $values()
com.cloudwebrtc.webrtc.utils.Utils: java.lang.String connectionStateString(org.webrtc.PeerConnection$PeerConnectionState)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpTransceiver$RtpTransceiverInit mapToRtpTransceiverInit(java.util.Map)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.media.MediaCodecInfo getCodecInfo()
org.webrtc.VideoFileRenderer: void lambda$release$3()
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState[] values()
org.webrtc.EglRenderer: void postToRenderThread(java.lang.Runnable)
org.webrtc.Size: boolean equals(java.lang.Object)
org.webrtc.CameraEnumerator: boolean isFrontFacing(java.lang.String)
com.cloudwebrtc.webrtc.utils.PermissionUtils: PermissionUtils()
org.webrtc.MediaCodecWrapper: void release()
org.webrtc.GlRectDrawer: void drawOes(int,float[],int,int,int,int,int,int)
org.webrtc.PeerConnectionFactory: void onSignalingThreadReady()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderRatchetKey(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RtpSender: java.util.List getStreams()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: org.webrtc.MediaStreamTrack getTrackForId(java.lang.String,java.lang.String)
org.webrtc.ExternalAudioProcessingFactory: void setCapturePostProcessing(org.webrtc.ExternalAudioProcessingFactory$AudioProcessing)
org.webrtc.DataChannel$Buffer: DataChannel$Buffer(java.nio.ByteBuffer,boolean)
org.webrtc.PeerConnection: void nativeSetAudioRecording(boolean)
org.webrtc.PeerConnection$IceServer: org.webrtc.PeerConnection$TlsCertPolicy getTlsCertPolicy()
org.webrtc.GlShader: int getAttribLocation(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: boolean peerConnectionDispose(com.cloudwebrtc.webrtc.PeerConnectionObserver)
org.webrtc.EglRenderer$2: EglRenderer$2(org.webrtc.EglRenderer)
org.webrtc.VideoSource$1: VideoSource$1(org.webrtc.VideoSource)
org.webrtc.audio.AudioDeviceModule: long getNativeAudioDeviceModulePointer()
org.webrtc.YuvConverter$ShaderCallbacks: void onPrepareShader(org.webrtc.GlShader,float[],int,int,int,int)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void selectAudioOutput(java.lang.Class)
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType[] $values()
org.webrtc.CameraCapturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceCandidate(org.webrtc.IceCandidate)
org.webrtc.FileVideoCapturer$1: void run()
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState[] $values()
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void lambda$success$0(java.lang.Object)
org.webrtc.NetworkChangeDetector$Observer: void onConnectionTypeChanged(org.webrtc.NetworkChangeDetector$ConnectionType)
org.webrtc.RtpTransceiver: org.webrtc.RtpReceiver nativeGetReceiver(long)
org.webrtc.RtpReceiver: org.webrtc.MediaStreamTrack track()
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: AudioDeviceKind(java.lang.String,int,java.lang.String,java.lang.Class)
org.webrtc.FrameCryptorKeyProvider: FrameCryptorKeyProvider(long)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void enableSpeakerButPreferBluetooth()
org.webrtc.EglRenderer: void resetStatistics(long)
org.webrtc.SoftwareVideoEncoderFactory: java.util.List nativeGetSupportedCodecs(long)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.CryptoOptions getCryptoOptions()
org.webrtc.VideoCodecStatus: VideoCodecStatus(java.lang.String,int,int)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: java.util.ArrayList access$100(com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int)
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils: android.hardware.camera2.params.MeteringRectangle convertPointToMeteringRectangle(android.util.Size,double,double,io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation)
org.webrtc.LibvpxVp9Decoder: long createNative(long)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$ResolutionBitrateLimits[] getResolutionBitrateLimits()
org.webrtc.CameraCapturer$2: CameraCapturer$2(org.webrtc.CameraCapturer)
org.webrtc.NV12Buffer: int getWidth()
org.webrtc.RtpTransceiver$RtpTransceiverInit: RtpTransceiver$RtpTransceiverInit()
androidx.core.view.WindowInsetsCompat$Impl21: boolean isConsumed()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getReceivers(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection: boolean nativeAddIceCandidate(java.lang.String,int,java.lang.String)
androidx.window.layout.adapter.sidecar.DistinctElementSidecarCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
androidx.window.area.reflectionguard.ExtensionWindowAreaStatusRequirements: android.util.DisplayMetrics getWindowAreaDisplayMetrics()
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState fromNativeIndex(int)
org.webrtc.EglRenderer: void notifyCallbacks(org.webrtc.VideoFrame,boolean)
org.webrtc.PeerConnection$Observer: void onDataChannel(org.webrtc.DataChannel)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$release$2()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void cleanup()
org.webrtc.CameraSession$Events: void onFrameCaptured(org.webrtc.CameraSession,org.webrtc.VideoFrame)
org.webrtc.audio.LowLatencyAudioBufferManager: LowLatencyAudioBufferManager()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()
org.webrtc.NetEqFactoryFactory: long createNativeNetEqFactory()
org.webrtc.PeerConnection: void setAudioPlayout(boolean)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void onTrimMemory(int)
org.webrtc.NetworkMonitorAutoDetect: java.lang.String getWifiSSID(org.webrtc.NetworkMonitorAutoDetect$NetworkState)
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType[] values()
org.webrtc.CameraCapturer: void startCapture(int,int,int)
org.webrtc.VideoEncoder$EncoderInfo: boolean getApplyAlignmentToAllSimulcastLayers()
org.webrtc.PeerConnection: PeerConnection(long)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: com.cloudwebrtc.webrtc.utils.ObjectType getType(int)
org.webrtc.EglRenderer: void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer,boolean)
org.webrtc.PeerConnection$Observer$-CC: void $default$onTrack(org.webrtc.PeerConnection$Observer,org.webrtc.RtpTransceiver)
org.webrtc.Predicate$2: Predicate$2(org.webrtc.Predicate,org.webrtc.Predicate)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$6: boolean isEnabled(java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: boolean hasNestedScrollingParent(android.view.View)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map rtpReceiverToMap(org.webrtc.RtpReceiver)
org.webrtc.DtmfSender: boolean canInsertDtmf()
com.cloudwebrtc.webrtc.GetUserMediaImpl$3: GetUserMediaImpl$3(com.cloudwebrtc.webrtc.GetUserMediaImpl,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EncodedImage: EncodedImage(java.nio.ByteBuffer,java.lang.Runnable,int,int,long,org.webrtc.EncodedImage$FrameType,int,java.lang.Integer)
androidx.profileinstaller.ProfileInstallerInitializer: ProfileInstallerInitializer()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void releaseOutputBuffer(int,boolean)
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus[] values()
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkMonitorAutoDetect$NetworkState getCurrentNetworkState()
org.webrtc.ScreenCapturerAndroid: void changeCaptureFormat(int,int,int)
org.webrtc.ThreadUtils: boolean awaitUninterruptibly(java.util.concurrent.CountDownLatch,long)
org.webrtc.NetworkMonitorAutoDetect: NetworkMonitorAutoDetect(org.webrtc.NetworkChangeDetector$Observer,android.content.Context)
org.webrtc.EglBase14Impl: void createPbufferSurface(int,int)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setInjectableLogger(org.webrtc.Loggable,org.webrtc.Logging$Severity)
org.webrtc.audio.WebRtcAudioEffects: WebRtcAudioEffects()
org.webrtc.PeerConnection: boolean getStats(org.webrtc.StatsObserver,org.webrtc.MediaStreamTrack)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: boolean getBoolean(int)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointVariantSelector(int)
org.webrtc.EglRenderer: void disableFpsReduction()
org.webrtc.LibvpxVp9Decoder: boolean nativeIsSupported()
org.webrtc.EglBase$ConfigBuilder: org.webrtc.EglBase$ConfigBuilder setIsRecordable(boolean)
org.webrtc.ExternalAudioProcessingFactory: void setBypassFlagForCapturePost(boolean)
org.webrtc.DynamicBitrateAdjuster: void setTargets(int,double)
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy[] values()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
org.webrtc.PeerConnection$Observer: void onStandardizedIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState)
org.webrtc.JavaI420Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
org.webrtc.ThreadUtils$1: void run()
org.webrtc.PeerConnection$Observer: void onAddTrack(org.webrtc.RtpReceiver,org.webrtc.MediaStream[])
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onSignalingChange(org.webrtc.PeerConnection$SignalingState)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: void onSetFailure(java.lang.String)
org.webrtc.ExternalAudioProcessingFactory: void nativeSetBypassFlagForRenderPre(boolean)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onRemoveStream(org.webrtc.MediaStream)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.lang.String getImplementationName$lambda$5(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState[] values()
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat computeSystemWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat,android.graphics.Rect)
androidx.core.view.WindowInsetsCompat$Impl: void copyWindowDataInto(androidx.core.view.WindowInsetsCompat)
org.webrtc.PeerConnection: PeerConnection(org.webrtc.NativePeerConnectionFactory)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] values()
org.webrtc.CameraCapturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
org.webrtc.VideoEncoderWrapper: void lambda$createEncoderCallback$0(long,org.webrtc.EncodedImage,org.webrtc.VideoEncoder$CodecSpecificInfo)
org.webrtc.CameraEnumerationAndroid$2: CameraEnumerationAndroid$2(int,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: void onCreateSuccess(org.webrtc.SessionDescription)
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode[] values()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
io.flutter.view.AccessibilityViewEmbedder: AccessibilityViewEmbedder(android.view.View,int)
org.webrtc.EglBase14$EglConnection: android.opengl.EGLContext getContext()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void setActivity(android.app.Activity)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.List createIceServers(com.cloudwebrtc.webrtc.utils.ConstraintsArray)
com.cloudwebrtc.webrtc.utils.Utils: java.lang.String iceConnectionStateString(org.webrtc.PeerConnection$IceConnectionState)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: ConstraintsMap()
org.webrtc.NativeAndroidVideoTrackSource: org.webrtc.VideoProcessor$FrameAdaptationParameters createFrameAdaptationParameters(int,int,int,int,int,int,long,boolean)
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityHeading(android.view.View,boolean)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setEnableVolumeLogger(boolean)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void lambda$requestPermissions$0(java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback,java.lang.String[],int[])
org.webrtc.VideoTrack: void nativeAddSink(long,long)
org.webrtc.PeerConnection: long getNativeOwnedPeerConnection()
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLContext getContext()
org.webrtc.IceCandidateErrorEvent: IceCandidateErrorEvent(java.lang.String,int,java.lang.String,int,java.lang.String)
org.webrtc.SurfaceViewRenderer: void release()
org.webrtc.AndroidVideoDecoder: void releaseSurface()
org.webrtc.PeerConnection: void nativeSetLocalDescriptionAutomatically(org.webrtc.SdpObserver)
org.webrtc.PeerConnection: long createNativePeerConnectionObserver(org.webrtc.PeerConnection$Observer)
org.webrtc.EglRenderer: void lambda$swapBuffersOnRenderThread$5(org.webrtc.VideoFrame,long,boolean)
org.webrtc.VideoEncoder: org.webrtc.VideoEncoder$EncoderInfo getEncoderInfo()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStopped(android.app.Activity)
org.webrtc.PeerConnection$RTCConfiguration: int getAudioJitterBufferMaxPackets()
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy,java.lang.String)
org.webrtc.DataChannel: boolean send(org.webrtc.DataChannel$Buffer)
io.flutter.embedding.engine.FlutterJNI: void requestDartDeferredLibrary(int)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void listenRendererEvents()
org.webrtc.Camera1Enumerator: Camera1Enumerator(boolean)
io.flutter.view.TextureRegistry$ImageTextureEntry: long id()
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map mediaTrackToMap(org.webrtc.MediaStreamTrack)
org.webrtc.PeerConnection$Observer: void onConnectionChange(org.webrtc.PeerConnection$PeerConnectionState)
org.webrtc.FrameCryptorKeyProvider: byte[] nativeRatchetKey(long,java.lang.String,int)
org.webrtc.GlRectDrawer$ShaderCallbacks: void onPrepareShader(org.webrtc.GlShader,float[],int,int,int,int)
org.webrtc.YuvConverter: org.webrtc.VideoFrame$I420Buffer convert(org.webrtc.VideoFrame$TextureBuffer)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverSetCodecPreferences(java.lang.String,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.Metrics: void add(java.lang.String,org.webrtc.Metrics$HistogramInfo)
org.webrtc.NetworkChangeDetector$IPAddress: byte[] getAddress()
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface getSurface()
org.webrtc.Camera1Session$1: Camera1Session$1(org.webrtc.Camera1Session)
androidx.core.view.WindowInsetsCompat$BuilderImpl: WindowInsetsCompat$BuilderImpl(androidx.core.view.WindowInsetsCompat)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus encodeTextureBuffer(org.webrtc.VideoFrame,long)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void onFrame(org.webrtc.VideoFrame)
com.cloudwebrtc.webrtc.DataChannelObserver: DataChannelObserver(io.flutter.plugin.common.BinaryMessenger,java.lang.String,java.lang.String,org.webrtc.DataChannel)
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.util.Pair createVideoCapturer(org.webrtc.CameraEnumerator,boolean,java.lang.String,com.cloudwebrtc.webrtc.CameraEventsHandler)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$IceConnectionState nativeIceConnectionState()
org.webrtc.video.CustomVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.MediaStreamTrack: boolean setEnabled(boolean)
org.webrtc.VideoDecoderWrapper: org.webrtc.VideoDecoder$Callback createDecoderCallback(long)
io.flutter.embedding.engine.FlutterJNI: void nativePrefetchDefaultFontManager()
com.cloudwebrtc.webrtc.PeerConnectionObserver: PeerConnectionObserver(org.webrtc.PeerConnection$RTCConfiguration,com.cloudwebrtc.webrtc.StateProvider,io.flutter.plugin.common.BinaryMessenger,java.lang.String)
org.webrtc.WrappedNativeVideoEncoder: WrappedNativeVideoEncoder()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: ReportFragment$LifecycleCallbacks()
org.webrtc.VideoFrame$Buffer$-CC: int $default$getBufferType(org.webrtc.VideoFrame$Buffer)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getFinalClippingPaths()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getSenders(io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: void startRecording(java.io.File)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void setSize(int,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void sendEvent(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type[] values()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: ConstraintsArray()
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getType(java.lang.Object)
org.webrtc.NetworkChangeDetector: java.util.List getActiveNetworkList()
org.webrtc.audio.WebRtcAudioUtils: boolean hasMicrophone(android.content.Context)
org.webrtc.LibaomAv1Encoder: long createNative(long)
org.webrtc.audio.WebRtcAudioTrack: void setSpeakerMute(boolean)
org.webrtc.EglBase14Impl: void createDummyPbufferSurface()
org.webrtc.PeerConnectionFactory: void printInternalStackTraces(boolean)
org.webrtc.PeerConnection: void nativeNewGetStats(org.webrtc.RTCStatsCollectorCallback)
org.webrtc.RTCStats: void appendValue(java.lang.StringBuilder,java.lang.Object)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setNetworkStatePredictorFactoryFactory(org.webrtc.NetworkStatePredictorFactoryFactory)
org.webrtc.PeerConnection$IceServer: java.lang.String getUsername()
org.webrtc.ExternalAudioProcessingFactory: long nativeSetRenderPreProcessing(org.webrtc.ExternalAudioProcessingFactory$AudioProcessing)
org.webrtc.GlTextureFrameBuffer: int getHeight()
org.webrtc.MediaCodecUtils: boolean codecSupportsType(android.media.MediaCodecInfo,org.webrtc.VideoCodecMimeType)
org.webrtc.RtpCapabilities$CodecCapability: java.lang.String getName()
org.webrtc.WrappedNativeI420Buffer: void retain()
org.webrtc.LibvpxVp8Decoder: long createNative(long)
org.webrtc.TextureBufferImpl$2: void onDestroy(org.webrtc.TextureBufferImpl)
org.webrtc.VideoSink: void onFrame(org.webrtc.VideoFrame)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void initialize(boolean,int,boolean,java.util.List,com.cloudwebrtc.webrtc.utils.ConstraintsMap)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: android.media.Image acquireLatestImage()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean access$300(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
io.flutter.view.AccessibilityViewEmbedder: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
org.webrtc.PeerConnection$IceServer: java.util.List getTlsAlpnProtocols()
io.flutter.embedding.engine.FlutterJNI: long nativeAttach(io.flutter.embedding.engine.FlutterJNI)
org.webrtc.CameraSession$-CC: org.webrtc.VideoFrame$TextureBuffer createTextureBufferWithModifiedTransformMatrix(org.webrtc.TextureBufferImpl,boolean,int)
org.webrtc.MediaStream: void addNativeVideoTrack(long)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushDouble(double)
com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter$ExternalAudioFrameProcessing: void initialize(int,int)
io.flutter.embedding.engine.FlutterJNI: void nativeScheduleFrame(long)
org.webrtc.Camera2Session: void stopInternal()
org.webrtc.DataChannel: org.webrtc.DataChannel$State state()
org.webrtc.EglRenderer: void pauseVideo()
org.webrtc.Camera2Enumerator: java.util.List getSupportedSizes(android.hardware.camera2.CameraCharacteristics)
io.flutter.embedding.android.FlutterView: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
org.webrtc.ExternalAudioProcessingFactory: long createNative()
org.webrtc.ScreenCapturerAndroid: void dispose()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: FlutterRTCVideoRenderer(android.graphics.SurfaceTexture,io.flutter.view.TextureRegistry$SurfaceTextureEntry)
org.webrtc.EncodedImage$FrameType: int getNative()
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()
org.webrtc.RtpTransceiver: org.webrtc.RtpTransceiver$RtpTransceiverDirection getDirection()
org.webrtc.JniHelper: JniHelper()
org.webrtc.NetworkMonitor: void nativeNotifyConnectionTypeChanged(long)
org.webrtc.TextureBufferImpl: void release()
org.webrtc.PeerConnection$Observer$-CC: void $default$onSelectedCandidatePairChanged(org.webrtc.PeerConnection$Observer,org.webrtc.CandidatePairChangeEvent)
org.webrtc.CameraCapturer$3: CameraCapturer$3(org.webrtc.CameraCapturer)
org.webrtc.MediaStream: boolean nativeRemoveVideoTrack(long,long)
org.webrtc.AndroidVideoDecoder: void onFrame(org.webrtc.VideoFrame)
org.webrtc.PeerConnection$RTCConfiguration: boolean getOfferExtmapAllowMixed()
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context,boolean,org.webrtc.YuvConverter,org.webrtc.SurfaceTextureHelper$FrameRefMonitor)
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection fromNativeIndex(int)
org.webrtc.WebRtcClassLoader: java.lang.Object getClassLoader()
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.DataChannel: int nativeId()
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String getValue()
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy[] values()
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer getDataV()
org.webrtc.EglRenderer: void releaseEglSurface(java.lang.Runnable)
org.webrtc.EglBase14Impl$Context: android.opengl.EGLContext getRawContext()
org.webrtc.SoftwareVideoDecoderFactory: java.util.List nativeGetSupportedCodecs(long)
org.webrtc.PeerConnection$Observer: void onAddStream(org.webrtc.MediaStream)
org.webrtc.FrameCryptorKeyProvider: byte[] exportSharedKey(int)
org.webrtc.IceCandidate: java.lang.String toString()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionCreateOffer(java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putString(java.lang.String,java.lang.String)
org.webrtc.ScreenCapturerAndroid: void onFrame(org.webrtc.VideoFrame)
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context)
org.webrtc.RtpSender: org.webrtc.MediaStreamTrack track()
org.webrtc.audio.WebRtcAudioRecord: boolean verifyAudioConfig(int,int,android.media.AudioFormat,android.media.AudioDeviceInfo,java.util.List)
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()
com.cloudwebrtc.webrtc.GetUserMediaImpl: int getPreferredInputDevice(android.media.AudioDeviceInfo)
org.webrtc.VideoEncoder$ScalingSettings: VideoEncoder$ScalingSettings(int,int)
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState[] $values()
org.webrtc.PeerConnection$IceServer$Builder: PeerConnection$IceServer$Builder(java.util.List)
io.flutter.embedding.engine.FlutterJNI: void markTextureFrameAvailable(long)
org.webrtc.JavaI420Buffer: int getStrideY()
org.webrtc.EglBase14Impl: int surfaceWidth()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void getDisplayMedia(io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream,android.content.Intent)
org.webrtc.NetworkMonitor: void startMonitoring(android.content.Context)
org.webrtc.Camera2Session$CaptureSessionCallback: void chooseFocusMode(android.hardware.camera2.CaptureRequest$Builder)
org.webrtc.PeerConnection$RTCConfiguration: boolean getEnableDscp()
org.webrtc.CameraVideoCapturer$-CC: void $default$addMediaRecorderToCamera(org.webrtc.CameraVideoCapturer,android.media.MediaRecorder,org.webrtc.CameraVideoCapturer$MediaRecorderHandler)
org.webrtc.MediaStream: java.lang.String getId()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceWindowChanged(long,android.view.Surface)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback: void onWebRtcAudioTrackError(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void disableFenceForTest()
com.cloudwebrtc.webrtc.audio.LocalAudioTrack: void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
org.webrtc.audio.WebRtcAudioRecord: void setPreferredDevice(android.media.AudioDeviceInfo)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionAddICECandidate(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RtpTransceiver: boolean nativeStopped(long)
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLConfig getConfig()
com.cloudwebrtc.webrtc.utils.ObjectType: ObjectType(java.lang.String,int)
kotlinx.coroutines.android.AndroidDispatcherFactory: java.lang.String hintOnError()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: void onFirstFrameRendered()
org.webrtc.Metrics: void enable()
org.webrtc.WrappedNativeVideoEncoder: java.lang.String getImplementationName()
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int write(java.nio.ByteBuffer,int,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.PeerConnection$RTCConfiguration parseRTCConfiguration(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.SoftwareVideoEncoderFactory: SoftwareVideoEncoderFactory()
org.webrtc.PeerConnection$RTCConfiguration: int getIceConnectionReceivingTimeout()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putByte(java.lang.String,byte[])
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushMap(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.NetworkChangeDetectorFactory: org.webrtc.NetworkChangeDetector create(org.webrtc.NetworkChangeDetector$Observer,android.content.Context)
org.webrtc.PeerConnection$RTCConfiguration: boolean getEnableCpuOveruseDetection()
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onAvailable(android.net.Network)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.media.MediaFormat getOutputFormat()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$EncoderInfo getEncoderInfo()
org.webrtc.PeerConnection: boolean addStream(org.webrtc.MediaStream)
org.webrtc.RtpTransceiver: RtpTransceiver(long)
org.webrtc.AddIceObserver: void onAddSuccess()
org.webrtc.audio.WebRtcAudioRecord$1: WebRtcAudioRecord$1(java.util.concurrent.atomic.AtomicInteger)
xyz.luan.audioplayers.ReleaseMode: xyz.luan.audioplayers.ReleaseMode[] values()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$502(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.WindowInsets)
org.webrtc.Camera1Capturer: void dispose()
com.cloudwebrtc.webrtc.DataChannelObserver: void onCancel(java.lang.Object)
org.webrtc.Metrics$HistogramInfo: void addSample(int,int)
org.webrtc.NativeAndroidVideoTrackSource: void nativeOnFrameCaptured(long,int,long,org.webrtc.VideoFrame$Buffer)
com.cloudwebrtc.webrtc.utils.Utils: Utils()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String)
org.webrtc.EglBase10Impl: void checkIsNotReleased()
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType getConnectionType(org.webrtc.NetworkMonitorAutoDetect$NetworkState)
org.webrtc.SurfaceTextureHelper: void setFrameRotation(int)
com.cloudwebrtc.webrtc.video.LocalVideoTrack: void removeProcessor(com.cloudwebrtc.webrtc.video.LocalVideoTrack$ExternalVideoFrameProcessing)
org.webrtc.audio.WebRtcAudioTrack: int getBufferSizeInFrames()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverGetDirection(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.video.camera.CameraUtils: void setExposurePoint(io.flutter.plugin.common.MethodCall,com.cloudwebrtc.webrtc.video.camera.Point,com.cloudwebrtc.webrtc.utils.AnyThreadResult)
org.webrtc.NativeAndroidVideoTrackSource: NativeAndroidVideoTrackSource(long)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback: void onWebRtcAudioTrackStart()
org.webrtc.NV12Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
org.webrtc.SurfaceViewRenderer: java.lang.String getResourceName()
com.cloudwebrtc.webrtc.video.camera.SdkCapabilityChecker: boolean supportsMarshmallowNoiseReductionModes()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int)
org.webrtc.audio.WebRtcAudioTrack: void logBufferCapacityInFrames()
org.webrtc.MediaConstraints$KeyValuePair: int hashCode()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)
org.webrtc.SurfaceTextureHelper: boolean isTextureInUse()
com.cloudwebrtc.webrtc.utils.Utils: java.lang.String signalingStateString(org.webrtc.PeerConnection$SignalingState)
org.webrtc.NetworkMonitor: void startMonitoring(android.content.Context,java.lang.String)
org.webrtc.audio.WebRtcAudioTrack: void nativeGetPlayoutData(long,int)
org.webrtc.NetworkMonitorAutoDetect: void unregisterReceiver()
org.webrtc.Camera2Session$CameraStateCallback: void onError(android.hardware.camera2.CameraDevice,int)
org.webrtc.FrameCryptorKeyProvider: byte[] nativeRatchetSharedKey(long,int)
org.webrtc.CameraCapturer$4: void onCameraOpening(java.lang.String)
org.webrtc.CameraEnumerationAndroid$CaptureFormat: java.lang.String toString()
org.webrtc.audio.WebRtcAudioTrack: int GetPlayoutUnderrunCount()
org.webrtc.EglRenderer$1: void run()
org.webrtc.TurnCustomizer: void nativeFreeTurnCustomizer(long)
org.webrtc.Size: int hashCode()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemWindowInsets()
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture,java.lang.Runnable)
org.webrtc.YuvHelper: void nativeI420Rotate(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int)
org.webrtc.RendererCommon: android.graphics.Point getDisplaySize(org.webrtc.RendererCommon$ScalingType,float,int,int)
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getStableWritableConnectionPingIntervalMs()
org.webrtc.NativeAndroidVideoTrackSource: void nativeSetState(long,boolean)
org.webrtc.EglBase10Impl$EglConnection: void lambda$new$1()
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity[] values()
org.webrtc.Camera2Enumerator: int getFpsUnitFactor(android.util.Range[])
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: com.cloudwebrtc.webrtc.audio.AudioProcessingController getAudioProcessingController()
org.webrtc.EglBase10Impl$EglConnection: EglBase10Impl$EglConnection()
org.webrtc.LibvpxVp9Encoder: java.util.List nativeGetSupportedScalabilityModes()
org.webrtc.VideoFrame$TextureBuffer$-CC: int $default$getUnscaledWidth(org.webrtc.VideoFrame$TextureBuffer)
io.flutter.embedding.engine.FlutterJNI: void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRRect(int,int,int,int,float[])
org.webrtc.VideoEncoder$CodecSpecificInfoAV1: VideoEncoder$CodecSpecificInfoAV1()
org.webrtc.PeerConnectionFactory: long nativeGetNativePeerConnectionFactory(long)
io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long)
org.webrtc.SoftwareVideoEncoderFactory$1: SoftwareVideoEncoderFactory$1(org.webrtc.SoftwareVideoEncoderFactory,org.webrtc.VideoCodecInfo)
org.webrtc.SurfaceTextureHelper$3: void run()
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.embedding.engine.FlutterJNI: void init(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
org.webrtc.WrappedNativeVideoDecoder: org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.ScreenCapturerAndroid: boolean isScreencast()
org.webrtc.FrameCryptor: boolean nativeIsEnabled(long)
androidx.core.view.ViewCompat$Api21Impl: float getTranslationZ(android.view.View)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: void release()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: boolean checkVideoTrack(java.lang.String,java.lang.String)
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.String getAudioDeviceId(android.media.AudioDeviceInfo)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setFormat(int)
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void onWifiP2pGroupChange(android.net.wifi.p2p.WifiP2pGroup)
org.webrtc.PeerConnection$IceGatheringState: PeerConnection$IceGatheringState(java.lang.String,int)
org.webrtc.HardwareVideoEncoder$BusyCount: HardwareVideoEncoder$BusyCount()
org.webrtc.ExternalAudioProcessingFactory: ExternalAudioProcessingFactory()
org.webrtc.Camera2Enumerator: Camera2Enumerator(android.content.Context)
com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter: void removeProcessor(com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter$ExternalAudioFrameProcessing)
org.webrtc.PeerConnection$IceServer: org.webrtc.PeerConnection$IceServer$Builder builder(java.lang.String)
org.webrtc.RtpParameters$HeaderExtension: RtpParameters$HeaderExtension(java.lang.String,int,boolean)
org.webrtc.PeerConnection: org.webrtc.RtpSender nativeAddTrack(long,java.util.List)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.Image acquireLatestImage()
org.webrtc.TextureBufferImpl: void retain()
org.webrtc.YuvHelper: void I420Rotate(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedFling(android.view.View,float,float,boolean)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: MethodCallHandlerImpl(android.content.Context,io.flutter.plugin.common.BinaryMessenger,io.flutter.view.TextureRegistry)
org.webrtc.FrameCryptorAlgorithm: org.webrtc.FrameCryptorAlgorithm[] $values()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void getUserMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream,java.util.List)
org.webrtc.FrameCryptorAlgorithm: org.webrtc.FrameCryptorAlgorithm valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void prefetchDefaultFontManager()
androidx.core.graphics.drawable.IconCompat$Api28Impl: android.net.Uri getUri(java.lang.Object)
org.webrtc.EglRenderer: void clearSurfaceOnRenderThread(float,float,float,float)
org.webrtc.DataChannel$Init: int getId()
org.webrtc.VideoSource: void adaptOutputFormat(int,int,int)
org.webrtc.FrameCryptor: void nativeSetKeyIndex(long,int)
org.webrtc.ThreadUtils$BlockingOperation: void run()
org.webrtc.EncodedImage: int getFrameType()
org.webrtc.PeerConnection: void setAudioRecording(boolean)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$EncoderInfo getEncoderInfo$lambda$10(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
org.webrtc.PeerConnectionFactory$Options: PeerConnectionFactory$Options()
org.webrtc.EncodedImage: org.webrtc.EncodedImage$Builder builder()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.graphics.Rect getSurfaceFrame()
com.cloudwebrtc.webrtc.GetUserMediaImpl: boolean access$402(com.cloudwebrtc.webrtc.GetUserMediaImpl,boolean)
org.webrtc.Camera1Capturer: void printStackTrace()
com.cloudwebrtc.webrtc.DataChannelObserver: void onBufferedAmountChange(long)
org.webrtc.EglBase10Impl$EglConnection: void detachCurrent()
org.webrtc.EglBase10Impl: void releaseSurface()
org.webrtc.EglBase$Context: long getNativeEglContext()
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind valueOf(java.lang.String)
org.webrtc.VideoCodecInfo: java.lang.String getName()
org.webrtc.RtpSender: java.lang.String id()
org.webrtc.PeerConnectionDependencies: org.webrtc.PeerConnectionDependencies$Builder builder(org.webrtc.PeerConnection$Observer)
io.flutter.view.AccessibilityViewEmbedder: boolean performAction(int,int,android.os.Bundle)
org.webrtc.VideoFileRenderer: void lambda$renderFrameOnRenderThread$1(org.webrtc.VideoFrame$I420Buffer,org.webrtc.VideoFrame)
org.webrtc.PeerConnection$Observer: void onRemoveTrack(org.webrtc.RtpReceiver)
org.webrtc.VideoFrameDrawer: void calculateTransformedRenderSize(int,int,android.graphics.Matrix)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void setPreferredInputDevice(java.lang.String)
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions$Builder setEnableGcmCryptoSuites(boolean)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionSetLocalDescription(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.FrameCryptor: boolean isEnabled()
org.webrtc.GlRectDrawer: void release()
com.cloudwebrtc.webrtc.StateProvider: boolean putLocalStream(java.lang.String,org.webrtc.MediaStream)
org.webrtc.MediaStreamTrack: org.webrtc.MediaStreamTrack createMediaStreamTrack(long)
org.webrtc.EglBase10Impl: EglBase10Impl(javax.microedition.khronos.egl.EGLContext,int[])
org.webrtc.MediaConstraints: java.util.List getOptional()
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$Srtp getSrtp()
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraFreezed(java.lang.String)
org.webrtc.audio.WebRtcAudioTrack: int getInitialBufferSizeInFrames()
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils: boolean supportsDistortionCorrection(android.hardware.camera2.CameraCharacteristics)
androidx.core.view.ViewCompat$Api28Impl: void addOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
org.webrtc.SoftwareVideoEncoderFactory: boolean nativeIsSupported(long,org.webrtc.VideoCodecInfo)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: boolean isCreating()
org.webrtc.audio.WebRtcAudioEffects: boolean isNoiseSuppressorSupported()
org.webrtc.CameraCapturer: void createCameraSession(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode[] values()
org.webrtc.VideoCodecInfo: VideoCodecInfo(java.lang.String,java.util.Map,java.util.List)
org.webrtc.Camera1Enumerator: android.hardware.Camera$CameraInfo getCameraInfo(int)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.graphics.Canvas lockCanvas(android.graphics.Rect)
androidx.lifecycle.LifecycleDispatcher$DispatcherActivityCallback: void onActivityCreated(android.app.Activity,android.os.Bundle)
org.webrtc.FrameCryptorKeyProvider: long getNativeKeyProvider()
org.webrtc.AudioTrack: void nativeFreeSink(long)
com.cloudwebrtc.webrtc.utils.PermissionUtils: void requestPermissions(android.content.Context,android.app.Activity,java.lang.String[],com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback)
io.flutter.embedding.engine.FlutterJNI: void onPreEngineRestart()
org.webrtc.RefCountDelegate: void retain()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: int dequeueInputBuffer(long)
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics valueOf(java.lang.String)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setAudioDeviceModule(org.webrtc.audio.AudioDeviceModule)
org.webrtc.DataChannel$Init: java.lang.String getProtocol()
org.webrtc.GlUtil$GlOutOfMemoryException: GlUtil$GlOutOfMemoryException(int,java.lang.String)
org.webrtc.VideoEncoder$-CC: org.webrtc.VideoEncoder$ResolutionBitrateLimits[] $default$getResolutionBitrateLimits(org.webrtc.VideoEncoder)
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem generateCertificate()
org.webrtc.SoftwareVideoDecoderFactory$1: SoftwareVideoDecoderFactory$1(org.webrtc.SoftwareVideoDecoderFactory,org.webrtc.VideoCodecInfo)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int write(byte[],int,int)
org.webrtc.HardwareVideoDecoderFactory$1: boolean test(java.lang.Object)
org.webrtc.YuvHelper: void ABGRToI420(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void setPeerConnection(org.webrtc.PeerConnection)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.view.Surface getSurface()
androidx.window.layout.util.ContextCompatHelperApi30: androidx.core.view.WindowInsetsCompat currentWindowInsets(android.content.Context)
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.Integer getConstrainInt(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl29: WindowInsetsCompat$Impl29(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
org.webrtc.PeerConnectionFactory: long nativeCreatePeerConnection(long,org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.MediaConstraints,long,org.webrtc.SSLCertificateVerifier)
org.webrtc.audio.WebRtcAudioUtils: WebRtcAudioUtils()
com.cloudwebrtc.webrtc.GetUserMediaImpl$6: void onCameraSwitchDone(boolean)
org.webrtc.JavaI420Buffer: int getStrideV()
org.webrtc.RtpSender: org.webrtc.RtpParameters getParameters()
kotlinx.coroutines.selects.TrySelectDetailedResult: kotlinx.coroutines.selects.TrySelectDetailedResult valueOf(java.lang.String)
org.webrtc.EglThread$ReleaseMonitor: boolean onRelease(org.webrtc.EglThread)
org.webrtc.PlatformSoftwareVideoDecoderFactory$1: boolean test(android.media.MediaCodecInfo)
org.webrtc.VideoEncoderFallback: long createNative(long)
androidx.core.view.ViewCompat$Api28Impl: void setScreenReaderFocusable(android.view.View,boolean)
org.webrtc.ThreadUtils: void invokeAtFrontUninterruptibly(android.os.Handler,java.lang.Runnable)
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State[] $values()
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel[] values()
org.webrtc.MediaStreamTrack: java.lang.String id()
org.webrtc.EglBase10Impl: void createDummyPbufferSurface()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: boolean checkMediaStream(java.lang.String,java.lang.String)
org.webrtc.video.CustomVideoDecoderFactory: void setForceSWCodecList(java.util.List)
org.webrtc.audio.WebRtcAudioTrack: void assertTrue(boolean)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader()
org.webrtc.CryptoOptions$Srtp: boolean getEnableGcmCryptoSuites()
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void setOnTrimMemoryListener(io.flutter.view.TextureRegistry$OnTrimMemoryListener)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getTappableElementInsets()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getMutators()
org.webrtc.Camera2Capturer: void dispose()
org.webrtc.DataChannel: long nativeRegisterObserver(org.webrtc.DataChannel$Observer)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorSetEnabled(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$500(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode[] values()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void requestPermissions(java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback)
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType[] values()
org.webrtc.NativeAndroidVideoTrackSource: void nativeSetIsScreencast(long,boolean)
org.webrtc.PlatformSoftwareVideoDecoderFactory$1: boolean test(java.lang.Object)
org.webrtc.SessionDescription: java.lang.String getDescription()
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpReceiver getRtpReceiverById(java.lang.String)
org.webrtc.NativeAndroidVideoTrackSource: org.webrtc.VideoProcessor$FrameAdaptationParameters adaptFrame(org.webrtc.VideoFrame)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: boolean isAttached()
org.webrtc.PeerConnection: boolean setBitrate(java.lang.Integer,java.lang.Integer,java.lang.Integer)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$1: OrientationAwareScreenCapturer$1(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
org.webrtc.PeerConnection$Observer$-CC: void $default$onRemoveTrack(org.webrtc.PeerConnection$Observer,org.webrtc.RtpReceiver)
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer getDataY()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode[] values()
com.cloudwebrtc.webrtc.utils.AnyThreadSink: AnyThreadSink(io.flutter.plugin.common.EventChannel$EventSink)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateDisplayMetrics(long)
org.webrtc.JavaI420Buffer: void nativeCropAndScaleI420(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.PeerConnection: void setLocalDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map rtpSenderToMap(org.webrtc.RtpSender)
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType[] values()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void release()
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.PeerConnection$Observer)
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate: NetworkMonitorAutoDetect$WifiManagerDelegate(android.content.Context)
org.webrtc.Camera2Capturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
org.webrtc.DataChannel: void nativeUnregisterObserver(long)
org.webrtc.NetworkMonitor: void init(android.content.Context)
org.webrtc.EglRenderer: void lambda$release$0(java.util.concurrent.CountDownLatch)
io.flutter.embedding.engine.FlutterJNI: void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager)
org.webrtc.FileVideoCapturer: FileVideoCapturer(java.lang.String)
com.cloudwebrtc.webrtc.audio.AudioProcessingController: AudioProcessingController()
org.webrtc.SoftwareVideoDecoderFactory: SoftwareVideoDecoderFactory()
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver nativeAddTransceiverOfType(org.webrtc.MediaStreamTrack$MediaType,org.webrtc.RtpTransceiver$RtpTransceiverInit)
org.webrtc.HardwareVideoEncoder: boolean shouldForceKeyFrame(long)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.MediaConstraints,org.webrtc.PeerConnection$Observer)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.RtcCertificatePem getCertificate()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.lang.Long createNative$lambda$6(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,long)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void onImage(android.media.ImageReader,android.media.Image)
org.webrtc.Camera1Enumerator: Camera1Enumerator()
org.webrtc.SurfaceEglRenderer: void updateFrameDimensionsAndReportEvents(org.webrtc.VideoFrame)
com.cloudwebrtc.webrtc.LocalTrack: java.lang.String id()
org.webrtc.AudioDecoderFactoryFactory: long createNativeAudioDecoderFactory()
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils: CameraRegionUtils()
org.webrtc.SoftwareVideoEncoderFactory$1: boolean isHardwareEncoder()
org.webrtc.YuvHelper: void nativeABGRToI420(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
androidx.core.view.WindowInsetsCompat$Impl30: WindowInsetsCompat$Impl30(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl30)
org.webrtc.SoftwareVideoDecoderFactory: long nativeCreate(long,long,org.webrtc.VideoCodecInfo)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setOptions(org.webrtc.PeerConnectionFactory$Options)
org.webrtc.CandidatePairChangeEvent: CandidatePairChangeEvent(org.webrtc.IceCandidate,org.webrtc.IceCandidate,int,java.lang.String,int)
kotlinx.coroutines.android.AndroidExceptionPreHandler: AndroidExceptionPreHandler()
org.webrtc.TurnCustomizer: void checkTurnCustomizerExists()
org.webrtc.SurfaceEglRenderer: void surfaceCreated(android.view.SurfaceHolder)
org.webrtc.PeerConnection$TlsCertPolicy: PeerConnection$TlsCertPolicy(java.lang.String,int)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setForceHandleAudioRouting(java.lang.Boolean)
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState[] $values()
org.webrtc.CameraVideoCapturer$CameraStatistics: void release()
com.cloudwebrtc.webrtc.video.camera.CameraUtils: void setZoom(java.lang.String,double,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglRenderer$ErrorCallback: void onGlOutOfMemory()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.MediaStream getStreamForId(java.lang.String,java.lang.String)
com.cloudwebrtc.webrtc.video.camera.SdkCapabilityChecker: boolean supportsEglRecordableAndroid()
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map dtmfSenderToMap(org.webrtc.DtmfSender,java.lang.String)
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: MediaConstraintsUtils()
org.webrtc.PeerConnection$BundlePolicy: PeerConnection$BundlePolicy(java.lang.String,int)
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType[] $values()
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void checkSelfPermissions(boolean)
org.webrtc.AndroidVideoDecoder$1: AndroidVideoDecoder$1(org.webrtc.AndroidVideoDecoder,java.lang.String)
org.webrtc.RtpTransceiver: java.lang.String nativeGetMid(long)
org.webrtc.EglBase14$Context: android.opengl.EGLContext getRawContext()
com.cloudwebrtc.webrtc.CameraEventsHandler: CameraEventsHandler()
org.webrtc.PeerConnection: void removeStream(org.webrtc.MediaStream)
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer getDataY()
org.webrtc.NetworkMonitor: void nativeNotifyOfNetworkDisconnect(long,long)
com.cloudwebrtc.webrtc.StateProvider: org.webrtc.PeerConnectionFactory getPeerConnectionFactory()
org.webrtc.EglBase10Impl: org.webrtc.EglBase$Context getEglBaseContext()
com.cloudwebrtc.webrtc.video.camera.CameraUtils$MeteringRectangleFactory: android.hardware.camera2.params.MeteringRectangle create(int,int,int,int,int)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setManageAudioFocus(java.lang.Boolean)
org.webrtc.VideoSource: void lambda$setVideoProcessor$1(org.webrtc.VideoFrame)
org.webrtc.ThreadUtils$ThreadChecker: void detachThread()
org.webrtc.PeerConnection: boolean nativeRemoveIceCandidates(org.webrtc.IceCandidate[])
androidx.core.view.WindowInsetsCompat$Impl20: WindowInsetsCompat$Impl20(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: org.webrtc.CapturerObserver access$100(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
org.webrtc.VideoDecoderFallback: VideoDecoderFallback(org.webrtc.VideoDecoder,org.webrtc.VideoDecoder)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void lambda$getStatsForTrack$1(io.flutter.plugin.common.MethodChannel$Result,org.webrtc.RTCStatsReport)
org.webrtc.audio.WebRtcAudioRecord: void logMainParameters()
org.webrtc.NetworkChangeDetector$Observer: java.lang.String getFieldTrialsString()
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String transceiverDirectionString(org.webrtc.RtpTransceiver$RtpTransceiverDirection)
org.webrtc.audio.WebRtcAudioManager: android.media.AudioManager getAudioManager(android.content.Context)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void maybeWaitOnFence(android.media.Image)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void access$300(com.cloudwebrtc.webrtc.GetUserMediaImpl,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream,android.content.Intent)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
org.webrtc.LibaomAv1Encoder: LibaomAv1Encoder()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setInputSampleRate(int)
org.webrtc.RendererCommon: RendererCommon()
org.webrtc.Camera1Enumerator: java.util.List getSupportedFormats(java.lang.String)
org.webrtc.VideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
io.flutter.embedding.engine.FlutterJNI: void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int getUnderlyingNetworkTypeForVpn()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: boolean handleMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void removeVideoCapturer(java.lang.String)
com.cloudwebrtc.webrtc.video.LocalVideoTrack: void addProcessor(com.cloudwebrtc.webrtc.video.LocalVideoTrack$ExternalVideoFrameProcessing)
org.webrtc.MediaCodecWrapper: void flush()
org.webrtc.RtpParameters$Encoding: java.lang.Integer getNumTemporalLayers()
org.webrtc.EncodedImage$Builder: EncodedImage$Builder()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setSizeFromLayout()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState[] $values()
org.webrtc.VideoDecoderFallback: long nativeCreate(long,org.webrtc.VideoDecoder,org.webrtc.VideoDecoder)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onPrepare(android.view.WindowInsetsAnimation)
org.webrtc.WrappedNativeI420Buffer: int getStrideY()
org.webrtc.RtpCapabilities$CodecCapability: int getPreferredPayloadType()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void enableSpeakerphone(boolean)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$AdapterType getNetworkPreference()
org.webrtc.RtpTransceiver$RtpTransceiverDirection: int getNativeIndex()
org.webrtc.EglBase14Impl: void checkIsNotReleased()
org.webrtc.CryptoOptions$Builder: CryptoOptions$Builder()
org.webrtc.VideoEncoder$ScalingSettings: java.lang.String toString()
org.webrtc.EglBase10Impl$EglConnection: void release()
org.webrtc.VideoEncoderWrapper: VideoEncoderWrapper()
org.webrtc.IceCandidate: IceCandidate(java.lang.String,int,java.lang.String,java.lang.String,org.webrtc.PeerConnection$AdapterType)
org.webrtc.PeerConnection$TcpCandidatePolicy: PeerConnection$TcpCandidatePolicy(java.lang.String,int)
org.webrtc.Logging$TraceLevel: Logging$TraceLevel(java.lang.String,int,int)
org.webrtc.ThreadUtils: java.lang.Object invokeAtFrontUninterruptibly(android.os.Handler,java.util.concurrent.Callable)
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils: int[] getDistortionCorrectionAvailableModes(android.hardware.camera2.CameraCharacteristics)
org.webrtc.SurfaceViewRenderer: void logD(java.lang.String)
org.webrtc.audio.WebRtcAudioRecord: void scheduleLogRecordingConfigurationsTask(android.media.AudioRecord)
androidx.core.graphics.Insets$Api29Impl: android.graphics.Insets of(int,int,int,int)
org.webrtc.PeerConnectionDependencies: PeerConnectionDependencies(org.webrtc.PeerConnection$Observer,org.webrtc.SSLCertificateVerifier)
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraClosed()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3$1: OrientationAwareScreenCapturer$3$1(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setEncodedHeight(int)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: OrientationAwareScreenCapturer(android.content.Intent,android.media.projection.MediaProjection$Callback)
org.webrtc.audio.WebRtcAudioRecord: java.lang.String lambda$scheduleLogRecordingConfigurationsTask$0(android.media.AudioRecord)
org.webrtc.JavaI420Buffer: JavaI420Buffer(int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.lang.Runnable)
org.webrtc.DataChannel: void dispose()
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceChanged(int,int)
androidx.core.view.ViewCompat$Api21Impl: boolean isNestedScrollingEnabled(android.view.View)
org.webrtc.MediaCodecUtils: MediaCodecUtils()
org.webrtc.EglRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer)
org.webrtc.BaseBitrateAdjuster: void reportEncodedFrame(int)
org.webrtc.TurnCustomizer: TurnCustomizer(long)
org.webrtc.Histogram: void addSample(int)
org.webrtc.DataChannel: void nativeClose()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setEventChannel(io.flutter.plugin.common.EventChannel)
com.cloudwebrtc.webrtc.DataChannelObserver: void sendEvent(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.EglBase: void createPbufferSurface(int,int)
org.webrtc.RefCounted: void release()
org.webrtc.Camera1Session$2: void lambda$onPreviewFrame$1(byte[])
org.webrtc.RtpReceiver: java.lang.String nativeGetId(long)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus initDecodeInternal(int,int)
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType[] values()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifier(int)
org.webrtc.AndroidVideoDecoder$FrameInfo: AndroidVideoDecoder$FrameInfo(long,int)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: void setStreamSettings(org.webrtc.VideoEncoder$Settings)
org.webrtc.NativeLibrary: boolean isLoaded()
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor: void detachCallback(java.lang.Integer)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$PortPrunePolicy getTurnPortPrunePolicy()
io.flutter.plugins.pathprovider.Messages$StorageDirectory: io.flutter.plugins.pathprovider.Messages$StorageDirectory valueOf(java.lang.String)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void release()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushTransform(float[])
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: void invoke(java.lang.Object[])
org.webrtc.IceCandidate: boolean objectEquals(java.lang.Object,java.lang.Object)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$IceTransportsType getIceTransportsType()
org.webrtc.RtpParameters$Rtcp: RtpParameters$Rtcp(java.lang.String,boolean)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode valueOf(java.lang.String)
org.webrtc.SurfaceTextureHelper$2: SurfaceTextureHelper$2(org.webrtc.SurfaceTextureHelper)
org.webrtc.JniCommon: java.nio.ByteBuffer nativeAllocateByteBuffer(int)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setId(int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5: void onSetSuccess()
org.webrtc.CameraVideoCapturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onPause(androidx.lifecycle.LifecycleOwner)
org.webrtc.VideoFrame$I420Buffer$-CC: int $default$getBufferType(org.webrtc.VideoFrame$I420Buffer)
org.webrtc.GlShader: int compileShader(int,java.lang.String)
org.webrtc.NetworkMonitor: boolean networkBindingSupported()
org.webrtc.NetworkMonitor: void notifyObserversOfConnectionTypeChange(org.webrtc.NetworkChangeDetector$ConnectionType)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void startRecordingToFile(java.lang.String,java.lang.Integer,org.webrtc.VideoTrack,com.cloudwebrtc.webrtc.record.AudioChannel)
org.webrtc.FrameCryptor$Observer: void onFrameCryptionStateChanged(java.lang.String,org.webrtc.FrameCryptor$FrameCryptionState)
org.webrtc.HardwareVideoEncoderFactory: boolean isSupportedCodec(android.media.MediaCodecInfo,org.webrtc.VideoCodecMimeType)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: boolean getBoolean(java.lang.String)
com.cloudwebrtc.webrtc.audio.PlaybackSamplesReadyCallbackAdapter: void onWebRtcAudioTrackSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage dequeueImage()
org.webrtc.CameraCapturer$2: void onCameraClosed(org.webrtc.CameraSession)
org.webrtc.RtpTransceiver: java.lang.String getMid()
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage createEncodedImage()
org.webrtc.CameraCapturer$8: CameraCapturer$8(org.webrtc.CameraCapturer,org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
org.webrtc.SurfaceViewRenderer: void surfaceCreated(android.view.SurfaceHolder)
org.webrtc.EglThread: void removeExceptionCallback(java.lang.Runnable)
com.cloudwebrtc.webrtc.video.camera.CameraUtils$NoSuchFieldWithNameException: CameraUtils$NoSuchFieldWithNameException(com.cloudwebrtc.webrtc.video.camera.CameraUtils,java.lang.String,java.lang.String,java.lang.NoSuchFieldException)
org.webrtc.audio.WebRtcAudioRecord: void doAudioRecordStateCallback(int)
org.webrtc.RTCStatsReport: double getTimestampUs()
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map mediaStreamToMap(org.webrtc.MediaStream)
org.webrtc.HardwareVideoEncoder: void requestKeyFrame(long)
io.flutter.embedding.engine.FlutterJNI: void onVsync(long,long,long)
org.webrtc.EglRenderer: void setMirrorVertically(boolean)
org.webrtc.PeerConnection$IceServer: java.lang.String getPassword()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void addTransceiverOfType(java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglBase14Impl$EglConnection: void lambda$new$1()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void initAudioSwitch()
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings()
org.webrtc.EglRenderer: void setMirror(boolean)
org.webrtc.VideoCodecMimeType: VideoCodecMimeType(java.lang.String,int,java.lang.String)
org.webrtc.DtmfSender: boolean nativeInsertDtmf(long,java.lang.String,int,int)
androidx.core.view.ViewCompat$Api28Impl: void removeOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
org.webrtc.audio.WebRtcAudioRecord: boolean startRecording()
androidx.core.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$release$3()
com.cloudwebrtc.webrtc.GetUserMediaImpl$6: GetUserMediaImpl$6(com.cloudwebrtc.webrtc.GetUserMediaImpl,io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
org.webrtc.PeerConnection: org.webrtc.RtpSender createSender(java.lang.String,java.lang.String)
org.webrtc.SimulcastVideoEncoder: long createNative(long)
org.webrtc.PeerConnection: org.webrtc.RtcCertificatePem nativeGetCertificate()
org.webrtc.EglRenderer: void logStatistics()
org.webrtc.VideoCapturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
org.webrtc.RTCStatsCollectorCallback: void onStatsDelivered(org.webrtc.RTCStatsReport)
org.webrtc.ThreadUtils: void checkIsOnMainThread()
org.webrtc.audio.WebRtcAudioEffects: boolean toggleNS(boolean)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void stop()
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind[] values()
org.webrtc.VideoSource$1: void onCapturerStopped()
org.webrtc.DtmfSender: java.lang.String nativeTones(long)
org.webrtc.BaseBitrateAdjuster: void setTargets(int,double)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
com.cloudwebrtc.webrtc.GetUserMediaImpl: GetUserMediaImpl(com.cloudwebrtc.webrtc.StateProvider,android.content.Context)
org.webrtc.NV21Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
org.webrtc.NetworkMonitorAutoDetect: boolean supportNetworkCallback()
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.ScreenCapturerAndroid: void stopCapture()
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setAudioEncoderFactoryFactory(org.webrtc.AudioEncoderFactoryFactory)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation getUIOrientation()
org.webrtc.audio.WebRtcAudioTrack: void nativeCacheDirectBufferAddress(long,java.nio.ByteBuffer)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean handlesCropAndRotation()
org.webrtc.audio.WebRtcAudioTrack: void logMainParameters()
org.webrtc.YuvConverter: void release()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityResumed(android.app.Activity)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5: MethodCallHandlerImpl$5(com.cloudwebrtc.webrtc.MethodCallHandlerImpl,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RtpCapabilities$HeaderExtensionCapability: boolean getPreferredEncrypted()
org.webrtc.VideoDecoderWrapper: void nativeOnDecodedFrame(long,org.webrtc.VideoFrame,java.lang.Integer,java.lang.Integer)
org.webrtc.VideoTrack: boolean shouldReceive()
org.webrtc.RtpReceiver: org.webrtc.RtpParameters nativeGetParameters(long)
org.webrtc.EglBase14Impl: void createSurfaceInternal(java.lang.Object)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void reStartCamera()
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo)
org.webrtc.SurfaceViewRenderer: void onFirstFrameRendered()
org.webrtc.PeerConnection$RTCConfiguration: int getMaxIPv6Networks()
io.flutter.embedding.engine.FlutterJNI: void nativeOnVsync(long,long,long)
org.webrtc.CameraCapturer$SwitchState: CameraCapturer$SwitchState(java.lang.String,int)
com.cloudwebrtc.webrtc.StateProvider: android.app.Activity getActivity()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void dataChannelSend(java.lang.String,java.nio.ByteBuffer,java.lang.Boolean)
org.webrtc.FileVideoCapturer$VideoReaderY4M: org.webrtc.VideoFrame getNextFrame()
org.webrtc.MediaStream: void addNativeAudioTrack(long)
org.webrtc.Logging: void w(java.lang.String,java.lang.String,java.lang.Throwable)
org.webrtc.NetworkMonitor: void notifyObserversOfNetworkDisconnect(long)
org.webrtc.SurfaceViewRenderer: void onMeasure(int,int)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreFling(android.view.View,float,float)
org.webrtc.NetworkMonitor: void assertIsTrue(boolean)
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void scheduleFrame()
org.webrtc.CameraCapturer: CameraCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler,org.webrtc.CameraEnumerator)
org.webrtc.SurfaceTextureHelper$FrameRefMonitor: void onReleaseBuffer(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.PeerConnection: org.webrtc.SessionDescription getRemoteDescription()
org.webrtc.TextureBufferImpl$2: TextureBufferImpl$2(org.webrtc.TextureBufferImpl)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType[] values()
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: WebRtcAudioTrack$AudioTrackThread(org.webrtc.audio.WebRtcAudioTrack,java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl29: void setStableInsets(androidx.core.graphics.Insets)
org.webrtc.NetworkMonitor: org.webrtc.NetworkMonitor getInstance()
org.webrtc.CameraCapturer$2: void onCameraOpening()
org.webrtc.SurfaceViewRenderer: void pauseVideo()
com.cloudwebrtc.webrtc.StateProvider: com.cloudwebrtc.webrtc.PeerConnectionObserver getPeerConnectionObserver(java.lang.String)
org.webrtc.MediaCodecWrapperFactoryImpl: org.webrtc.MediaCodecWrapper createByCodecName(java.lang.String)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoFrame$Buffer copyNV12ToI420Buffer(java.nio.ByteBuffer,int,int,int,int)
org.webrtc.FileVideoCapturer: void dispose()
org.webrtc.MediaCodecWrapper: java.nio.ByteBuffer getInputBuffer(int)
org.webrtc.HardwareVideoDecoderFactory$1: boolean test(android.media.MediaCodecInfo)
org.webrtc.DtmfSender: int interToneGap()
org.webrtc.NativeLibrary$DefaultLoader: NativeLibrary$DefaultLoader()
org.webrtc.SoftwareVideoDecoderFactory: boolean nativeIsSupported(long,org.webrtc.VideoCodecInfo)
com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback: void invoke(java.lang.String[],int[])
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: org.webrtc.FrameCryptorAlgorithm frameCryptorAlgorithmFromInt(int)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void finish()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()
org.webrtc.CameraSession$FailureType: CameraSession$FailureType(java.lang.String,int)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: androidx.core.view.WindowInsetsCompat build()
androidx.core.view.WindowInsetsCompat$Impl20: void loadReflectionField()
org.webrtc.MediaCodecWrapper: void releaseOutputBuffer(int,boolean)
org.webrtc.ThreadUtils$4: java.lang.Object call()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: long getNumCapturedFrames()
org.webrtc.audio.WebRtcAudioManager: int getOutputBufferSize(android.content.Context,android.media.AudioManager,int,int)
org.webrtc.SurfaceTextureHelper: android.graphics.SurfaceTexture getSurfaceTexture()
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus setRates(org.webrtc.VideoEncoder$RateControlParameters)
org.webrtc.EglBase10Impl: int surfaceWidth()
org.webrtc.RtpReceiver: void dispose()
org.webrtc.AddIceObserver: void onAddFailure(java.lang.String)
org.webrtc.MediaCodecUtils: boolean isHardwareAccelerated(android.media.MediaCodecInfo)
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState[] $values()
org.webrtc.PeerConnectionFactory: void nativeInitializeFieldTrials(java.lang.String)
org.webrtc.VideoEncoder$ScalingSettings: VideoEncoder$ScalingSettings(boolean,int,int)
org.webrtc.CameraCapturer$6: CameraCapturer$6(org.webrtc.CameraCapturer,org.webrtc.CameraSession)
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$TextureBuffer applyTransformMatrix(android.graphics.Matrix,int,int)
org.webrtc.SurfaceTextureHelper: void startListening(org.webrtc.VideoSink)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void surfaceCreated(android.graphics.SurfaceTexture)
org.webrtc.SoftwareVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.SurfaceTextureHelper: void lambda$dispose$6()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void getTransformMatrix(float[])
androidx.core.content.ContextCompat$Api28Impl: java.util.concurrent.Executor getMainExecutor(android.content.Context)
org.webrtc.Camera1Session$1: void onError(int,android.hardware.Camera)
org.webrtc.H264Utils: H264Utils()
com.cloudwebrtc.webrtc.video.camera.CameraUtils: CameraUtils(com.cloudwebrtc.webrtc.GetUserMediaImpl,android.app.Activity)
org.webrtc.CameraCapturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule createAudioDeviceModule()
org.webrtc.DefaultVideoEncoderFactory: DefaultVideoEncoderFactory(org.webrtc.EglBase$Context,boolean,boolean)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus encode$lambda$2(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
org.webrtc.EglRenderer: void lambda$removeFrameListener$2(java.util.concurrent.CountDownLatch,org.webrtc.EglRenderer$FrameListener)
org.webrtc.audio.JavaAudioDeviceModule: void release()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorFactoryCreateKeyProvider(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy valueOf(java.lang.String)
androidx.core.view.ViewCompat$Api23Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: boolean equals(java.lang.Object)
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
org.webrtc.Metrics: void nativeEnable()
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy[] values()
org.webrtc.EglThread: org.webrtc.EglThread create(org.webrtc.EglThread$ReleaseMonitor,org.webrtc.EglBase$Context,int[])
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.MediaSource: void dispose()
com.cloudwebrtc.webrtc.video.camera.CameraUtils: void setFocusMode(io.flutter.plugin.common.MethodCall,com.cloudwebrtc.webrtc.utils.AnyThreadResult)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onCancel(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeaturesInNative(int)
org.webrtc.CameraCapturer$4: void onCameraFreezed(java.lang.String)
org.webrtc.MediaSource: void runWithReference(java.lang.Runnable)
org.webrtc.NetworkMonitor: void nativeNotifyOfNetworkPreference(long,org.webrtc.NetworkChangeDetector$ConnectionType,int)
androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()
org.webrtc.audio.WebRtcAudioEffects: boolean setAEC(boolean)
org.webrtc.DataChannel$Observer: void onMessage(org.webrtc.DataChannel$Buffer)
io.flutter.embedding.engine.FlutterJNI: void setPlatformViewsController(io.flutter.plugin.platform.PlatformViewsController)
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType valueOf(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.MediaSource$State: MediaSource$State(java.lang.String,int)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Icon toIcon(androidx.core.graphics.drawable.IconCompat,android.content.Context)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemGestureInsets(androidx.core.graphics.Insets)
org.webrtc.VideoFrame$I420Buffer: int getStrideU()
org.webrtc.Camera1Session: void listenForTextureFrames()
com.cloudwebrtc.webrtc.video.camera.SdkCapabilityChecker: boolean supportsVideoPause()
io.flutter.embedding.engine.FlutterJNI: void registerImageTexture(long,io.flutter.view.TextureRegistry$ImageConsumer)
org.webrtc.NetworkMonitorAutoDetect: java.util.List getActiveNetworkList()
org.webrtc.VideoCapturer: void stopCapture()
org.webrtc.CallSessionFileRotatingLogSink: CallSessionFileRotatingLogSink(java.lang.String,int,org.webrtc.Logging$Severity)
org.webrtc.EglBase$ConfigBuilder: org.webrtc.EglBase$ConfigBuilder setHasAlphaChannel(boolean)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: GetUserMediaImpl$1(com.cloudwebrtc.webrtc.GetUserMediaImpl,android.os.Handler,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.NetworkMonitor: void nativeNotifyOfNetworkConnect(long,org.webrtc.NetworkChangeDetector$NetworkInformation)
org.webrtc.audio.WebRtcAudioManager: boolean isLowLatencyInputSupported(android.content.Context)
androidx.lifecycle.LifecycleDispatcher$DispatcherActivityCallback: LifecycleDispatcher$DispatcherActivityCallback()
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterImageTexture(long,long,java.lang.ref.WeakReference)
org.webrtc.MediaSource: org.webrtc.MediaSource$State state()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void streamDispose(java.lang.String)
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection valueOf(java.lang.String)
org.webrtc.AudioProcessingFactory: long createNative()
org.webrtc.CameraCapturer$4: void onCameraClosed()
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpTransceiver$RtpTransceiverDirection stringToTransceiverDirection(java.lang.String)
org.webrtc.VideoEncoder: long createNative(long)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.media.projection.MediaProjection access$302(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer,android.media.projection.MediaProjection)
org.webrtc.PeerConnection$RTCConfiguration: java.lang.String getTurnLoggingId()
kotlin.collections.AbstractList: AbstractList()
androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.DisplayCutoutCompat getDisplayCutout()
io.flutter.embedding.engine.FlutterJNI: java.lang.String getObservatoryUri()
androidx.window.area.reflectionguard.ExtensionWindowAreaPresentationRequirements: android.content.Context getPresentationContext()
org.webrtc.CameraEnumerationAndroid$1: int diff(org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State valueOf(java.lang.String)
org.webrtc.JNILogging: JNILogging(org.webrtc.Loggable)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values()
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int getMinStartBitrateBps()
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer getDataV()
org.webrtc.RtpSender: void setFrameEncryptor(org.webrtc.FrameEncryptor)
org.webrtc.audio.WebRtcAudioUtils: java.lang.String streamTypeToString(int)
org.webrtc.PeerConnection: void setRemoteDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)
org.webrtc.HardwareVideoEncoder: HardwareVideoEncoder(org.webrtc.MediaCodecWrapperFactory,java.lang.String,org.webrtc.VideoCodecMimeType,java.lang.Integer,java.lang.Integer,java.util.Map,int,int,org.webrtc.BitrateAdjuster,org.webrtc.EglBase14$Context)
org.webrtc.EglRenderer: void renderFrameOnRenderThread()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$new$1(int)
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState valueOf(java.lang.String)
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type valueOf(java.lang.String)
org.webrtc.PeerConnectionFactory: void onWorkerThreadReady()
org.webrtc.GlUtil: java.nio.FloatBuffer createFloatBuffer(float[])
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents,int[],org.webrtc.RendererCommon$GlDrawer)
org.webrtc.NV21Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
org.webrtc.EglBase10Impl: void swapBuffers()
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeNotifyLowMemoryWarning(long)
org.webrtc.TimestampAligner: void dispose()
org.webrtc.DataChannel: void close()
org.webrtc.CameraVideoCapturer$-CC: void $default$removeMediaRecorderFromCamera(org.webrtc.CameraVideoCapturer,org.webrtc.CameraVideoCapturer$MediaRecorderHandler)
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector createNetworkChangeDetector(android.content.Context,java.lang.String)
org.webrtc.FrameCryptorKeyProvider: byte[] ratchetKey(java.lang.String,int)
org.webrtc.RtpSender: void checkRtpSenderExists()
org.webrtc.PeerConnectionFactory: boolean nativeStartInternalTracingCapture(java.lang.String)
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy valueOf(java.lang.String)
org.webrtc.CryptoOptions$Srtp: CryptoOptions$Srtp(org.webrtc.CryptoOptions,boolean,boolean,boolean)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderExportKey(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.MediaConstraints: java.lang.String toString()
org.webrtc.HardwareVideoEncoder$BusyCount: void increment()
org.webrtc.VideoTrack: void nativeRemoveSink(long,long)
org.webrtc.GlShader: GlShader(java.lang.String,java.lang.String)
org.webrtc.PeerConnection$IceServer: org.webrtc.PeerConnection$IceServer$Builder builder(java.util.List)
com.cloudwebrtc.webrtc.audio.RecordSamplesReadyCallbackAdapter: void removeCallback(org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map candidateToMap(org.webrtc.IceCandidate)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setTlsEllipticCurves(java.util.List)
org.webrtc.PeerConnection$Observer: void onSelectedCandidatePairChanged(org.webrtc.CandidatePairChangeEvent)
org.webrtc.SurfaceViewRenderer: void surfaceChanged(android.view.SurfaceHolder,int,int,int)
org.webrtc.FrameCryptorAlgorithm: org.webrtc.FrameCryptorAlgorithm[] values()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer)
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.Integer getStreamTypeForString(java.lang.String)
org.webrtc.HardwareVideoDecoderFactory: HardwareVideoDecoderFactory()
org.webrtc.Logging: void log(org.webrtc.Logging$Severity,java.lang.String,java.lang.String)
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceUnwritableMinChecks()
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode valueOf(java.lang.String)
org.webrtc.VideoEncoderFactory: org.webrtc.VideoEncoderFactory$VideoEncoderSelector getEncoderSelector()
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType[] values()
androidx.profileinstaller.FileSectionType: androidx.profileinstaller.FileSectionType[] values()
org.webrtc.Camera1Session: void checkIsOnCameraThread()
org.webrtc.EglRenderer$FrameListener: void onFrame(android.graphics.Bitmap)
org.webrtc.RendererCommon$GlDrawer: void drawOes(int,float[],int,int,int,int,int,int)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer createIceServer()
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: JavaAudioDeviceModule$AudioRecordStartErrorCode(java.lang.String,int)
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraFreezed(java.lang.String)
org.webrtc.GlRectDrawer$ShaderCallbacks: void onNewShader(org.webrtc.GlShader)
org.webrtc.FileVideoCapturer: boolean isScreencast()
androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor: void attachCallback(java.lang.Integer,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void onCancel(java.lang.Object)
org.webrtc.TextureBufferImpl$2: void onRetain(org.webrtc.TextureBufferImpl)
io.flutter.view.TextureRegistry$ImageConsumer: android.media.Image acquireLatestImage()
io.flutter.view.TextureRegistry$SurfaceProducer: void release()
org.webrtc.DynamicBitrateAdjuster: double getBitrateAdjustmentScale()
org.webrtc.VideoFrameDrawer$YuvUploader: int[] uploadYuvData(int,int,int[],java.nio.ByteBuffer[])
org.webrtc.PeerConnection: void nativeCreateAnswer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)
com.cloudwebrtc.webrtc.DataChannelObserver: java.lang.String dataChannelStateString(org.webrtc.DataChannel$State)
org.webrtc.ExternalAudioProcessingFactory$AudioProcessing: void reset(int)
org.webrtc.StatsReport: java.lang.String toString()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointRegionalIndicator(int)
org.webrtc.EncodedImage$FrameType: EncodedImage$FrameType(java.lang.String,int,int)
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.Integer getAudioAttributesUsageTypeForString(java.lang.String)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void registerIn(android.app.Activity)
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor: OutputAudioSamplesInterceptor(org.webrtc.audio.JavaAudioDeviceModule)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect)
org.webrtc.TimestampAligner: TimestampAligner()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void access$100(com.cloudwebrtc.webrtc.GetUserMediaImpl,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream,java.util.List)
com.cloudwebrtc.webrtc.audio.AudioUtils: AudioUtils()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void getDisplayMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream)
org.webrtc.NV21Buffer: void retain()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceGatheringChange(org.webrtc.PeerConnection$IceGatheringState)
org.webrtc.RtpTransceiver: org.webrtc.RtpTransceiver$RtpTransceiverDirection nativeCurrentDirection(long)
org.webrtc.MediaStreamTrack: void checkMediaStreamTrackExists()
io.flutter.view.TextureRegistry$SurfaceProducer: int getHeight()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceUnwritableTimeout()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityPaused(android.app.Activity)
org.webrtc.CameraCapturer$1: void onFailure(org.webrtc.CameraSession$FailureType,java.lang.String)
org.webrtc.YuvConverter: YuvConverter(org.webrtc.VideoFrameDrawer)
org.webrtc.RtpParameters$HeaderExtension: boolean getEncrypted()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceCheckIntervalStrongConnectivity()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onDetachedFromActivity()
org.webrtc.PeerConnection$Observer: void onIceGatheringChange(org.webrtc.PeerConnection$IceGatheringState)
org.webrtc.VideoDecoder: java.lang.String getImplementationName()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setAudioStreamType(java.lang.String)
org.webrtc.ThreadUtils$2: ThreadUtils$2(java.util.concurrent.CountDownLatch)
org.webrtc.SimulcastVideoEncoder: SimulcastVideoEncoder(org.webrtc.VideoEncoderFactory,org.webrtc.VideoEncoderFactory,org.webrtc.VideoCodecInfo)
org.webrtc.NetworkMonitor$2: java.lang.String getFieldTrialsString()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: MethodCallHandlerImpl$2(com.cloudwebrtc.webrtc.MethodCallHandlerImpl,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamRemoveTrack(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.audio.PlaybackSamplesReadyCallbackAdapter: void removeCallback(org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback)
org.webrtc.audio.WebRtcAudioTrack: int getStreamVolume()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityStarted(android.app.Activity)
org.webrtc.PeerConnection: org.webrtc.SessionDescription nativeGetRemoteDescription()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String)
org.webrtc.JniHelper: java.lang.Object getStringClass()
org.webrtc.RefCountDelegate: boolean safeRetain()
org.webrtc.VideoTrack: void nativeSetShouldReceive(long,boolean)
org.webrtc.RTCStatsReport: org.webrtc.RTCStatsReport create(long,java.util.Map)
org.webrtc.EglRenderer$1: EglRenderer$1(org.webrtc.EglRenderer)
org.webrtc.VideoTrack: long getNativeVideoTrack()
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle getLifecycle()
org.webrtc.GlGenericDrawer: void drawRgb(int,float[],int,int,int,int,int,int)
org.webrtc.RendererCommon$VideoLayoutMeasure: RendererCommon$VideoLayoutMeasure()
org.webrtc.VideoDecoder$DecodeInfo: VideoDecoder$DecodeInfo(boolean,long)
io.flutter.embedding.engine.FlutterJNI: void onFirstFrame()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode valueOf(java.lang.String)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix getFinalMatrix()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: com.cloudwebrtc.webrtc.LocalTrack getLocalTrack(java.lang.String)
org.webrtc.Logging$Severity: Logging$Severity(java.lang.String,int)
org.webrtc.ApplicationContextProvider: ApplicationContextProvider()
org.webrtc.NetworkMonitorAutoDetect$NetworkState: NetworkMonitorAutoDetect$NetworkState(boolean,int,int,int,int)
org.webrtc.YuvHelper: void I420Rotate(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void error(java.lang.String,java.lang.String,java.lang.Object)
org.webrtc.FrameCryptor: void nativeSetEnabled(long,boolean)
org.webrtc.EglBase$-CC: org.webrtc.EglBase create(org.webrtc.EglBase$Context,int[])
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: WebRtcAudioRecord$AudioRecordThread(org.webrtc.audio.WebRtcAudioRecord,java.lang.String)
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorGetKeyIndex(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: void stop()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader access$800(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
org.webrtc.Camera2Session$CaptureSessionCallback: Camera2Session$CaptureSessionCallback(org.webrtc.Camera2Session)
org.webrtc.VideoSource: VideoSource(long)
org.webrtc.PeerConnection: void nativeRestartIce()
org.webrtc.MediaSource: void checkMediaSourceExists()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: ConstraintsMap(java.util.Map)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader getOrCreatePerImageReader(android.media.ImageReader)
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int getAudioFormat()
com.cloudwebrtc.webrtc.audio.LocalAudioTrack: int getBytesPerSample(int)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: boolean isDeviceOrientationPortrait()
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int getChannelCount()
org.webrtc.Camera2Helper: Camera2Helper()
org.webrtc.AudioTrack: AudioTrack(long)
org.webrtc.SurfaceViewRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents)
org.webrtc.ThreadUtils$3: void run()
androidx.core.view.ViewCompat$Api21Impl: void setNestedScrollingEnabled(android.view.View,boolean)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setFocusMode(java.lang.String)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpSender getRtpSenderById(java.lang.String)
org.webrtc.NetworkChangeDetector$Observer: void onNetworkConnect(org.webrtc.NetworkChangeDetector$NetworkInformation)
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraOpening(java.lang.String)
org.webrtc.audio.WebRtcAudioTrack: void setNativeAudioTrack(long)
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity[] $values()
org.webrtc.VideoEncoder$CodecSpecificInfoH264: VideoEncoder$CodecSpecificInfoH264()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$initAudioSwitch$2()
org.webrtc.RendererCommon$GlDrawer: void drawRgb(int,float[],int,int,int,int,int,int)
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: java.util.List getActiveNetworkList()
org.webrtc.VideoFrame: void retain()
org.webrtc.PeerConnection: void restartIce()
org.webrtc.PeerConnection$IceServer: java.lang.String toString()
org.webrtc.PeerConnectionFactory$InitializationOptions: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder builder(android.content.Context)
org.webrtc.PeerConnection: void createAnswer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getSources(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.YuvHelper: void I420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)
org.webrtc.SurfaceViewRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float)
org.webrtc.GlRectDrawer: void drawRgb(int,float[],int,int,int,int,int,int)
org.webrtc.VideoEncoder$Callback: void onEncodedFrame(org.webrtc.EncodedImage,org.webrtc.VideoEncoder$CodecSpecificInfo)
org.webrtc.EglBase14Impl$EglConnection: void release()
org.webrtc.TextureBufferImpl: int getHeight()
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
org.webrtc.EncodedImage: int getEncodedWidth()
org.webrtc.SessionDescription$Type: SessionDescription$Type(java.lang.String,int)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: void requestMobileNetwork(android.net.ConnectivityManager$NetworkCallback)
io.flutter.embedding.engine.FlutterJNI: long performNativeAttach(io.flutter.embedding.engine.FlutterJNI)
org.webrtc.JniHelper: java.lang.Object getValue(java.util.Map$Entry)
org.webrtc.RtpTransceiver: boolean isStopped()
org.webrtc.DtmfSender: int nativeDuration(long)
org.webrtc.RtpCapabilities: RtpCapabilities(java.util.List,java.util.List)
org.webrtc.EglBase10Impl: void release()
org.webrtc.CameraEnumerator: org.webrtc.CameraVideoCapturer createCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
org.webrtc.MediaCodecWrapper: int dequeueInputBuffer(long)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long id()
io.flutter.embedding.engine.FlutterJNI: void cleanupMessageData(long)
org.webrtc.NV21Buffer: NV21Buffer(byte[],int,int,java.lang.Runnable)
org.webrtc.RtpTransceiver$RtpTransceiverInit: RtpTransceiver$RtpTransceiverInit(org.webrtc.RtpTransceiver$RtpTransceiverDirection)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioRecordStateCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: double getDouble(int)
org.webrtc.VideoEncoder$CodecSpecificInfoVP8: VideoEncoder$CodecSpecificInfoVP8()
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: java.lang.String toString()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceDestroyed(long)
org.webrtc.RendererCommon: android.graphics.Point getDisplaySize(float,float,int,int)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.media.MediaFormat getOutputFormat(int)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putArray(java.lang.String,java.util.ArrayList)
xyz.luan.audioplayers.PlayerMode: xyz.luan.audioplayers.PlayerMode valueOf(java.lang.String)
org.webrtc.DataChannel: void unregisterObserver()
org.webrtc.ThreadUtils: java.lang.StackTraceElement[] concatStackTraces(java.lang.StackTraceElement[],java.lang.StackTraceElement[])
androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: com.cloudwebrtc.webrtc.utils.ConstraintsArray getArray(java.lang.String)
org.webrtc.LibaomAv1Encoder: boolean isHardwareEncoder()
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageEmptyResponseCallback(long,int)
org.webrtc.GlGenericDrawer$ShaderCallbacks: void onPrepareShader(org.webrtc.GlShader,float[],int,int,int,int)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.hardware.display.VirtualDisplay access$202(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer,android.hardware.display.VirtualDisplay)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkMonitorAutoDetect$NetworkState getNetworkState(android.net.Network)
org.webrtc.VideoFrame$I420Buffer: java.nio.ByteBuffer getDataY()
org.webrtc.AudioTrackSink: void onData(java.nio.ByteBuffer,int,int,int,int,long)
org.webrtc.Histogram: org.webrtc.Histogram createCounts(java.lang.String,int,int,int)
org.webrtc.audio.WebRtcAudioTrack: void reportWebRtcAudioTrackStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode,java.lang.String)
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference valueOf(java.lang.String)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String)
org.webrtc.BuiltinAudioDecoderFactoryFactory: BuiltinAudioDecoderFactoryFactory()
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType valueOf(java.lang.String)
androidx.core.graphics.drawable.IconCompat: IconCompat()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void queueInputBuffer(int,int,int,long,int)
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getTappableElementInsets()
org.webrtc.CameraEnumerationAndroid: CameraEnumerationAndroid()
org.webrtc.CameraEnumerationAndroid$CaptureFormat: CameraEnumerationAndroid$CaptureFormat(int,int,int,int)
org.webrtc.EglBase14$EglConnection: android.opengl.EGLConfig getConfig()
org.webrtc.IceCandidate: boolean equals(java.lang.Object)
org.webrtc.PeerConnectionFactory: void initializeFieldTrials(java.lang.String)
org.webrtc.EglRenderer: void printStackTrace()
org.webrtc.audio.WebRtcAudioUtils: java.lang.String modeToString(int)
org.webrtc.audio.WebRtcAudioManager: int getMinInputFrameSize(int,int)
androidx.core.view.ViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)
org.webrtc.audio.AudioDeviceModule: void release()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorDispose(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType valueOf(java.lang.String)
org.webrtc.RtpCapabilities$CodecCapability: java.util.Map getParameters()
org.webrtc.Camera2Session: void reportError(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int getHeight()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioFormat(int)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
org.webrtc.VideoEncoderFactory$-CC: org.webrtc.VideoCodecInfo[] $default$getImplementations(org.webrtc.VideoEncoderFactory)
org.webrtc.EglBase: void makeCurrent()
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback: void onWebRtcAudioTrackStop()
org.webrtc.Camera2Session$CaptureSessionCallback: void onConfigureFailed(android.hardware.camera2.CameraCaptureSession)
io.flutter.view.TextureRegistry$SurfaceProducer: long id()
org.webrtc.MediaCodecUtils: boolean isHardwareAcceleratedQOrHigher(android.media.MediaCodecInfo)
org.webrtc.GlShader: void setVertexAttribArray(java.lang.String,int,int,java.nio.FloatBuffer)
org.webrtc.NetworkMonitor: NetworkMonitor()
org.webrtc.PeerConnectionFactory: org.webrtc.RtpCapabilities nativeGetRtpSenderCapabilities(long,org.webrtc.MediaStreamTrack$MediaType)
org.webrtc.VideoEncoder$CodecSpecificInfoVP9: VideoEncoder$CodecSpecificInfoVP9()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader getActiveReader()
org.webrtc.RtpSender: long nativeGetDtmfSender(long)
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void onResume()
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.String getAudioDeviceLabel(android.media.AudioDeviceInfo)
org.webrtc.LibvpxVp9Encoder: long createNative(long)
org.webrtc.SurfaceEglRenderer: void logD(java.lang.String)
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind valueOf(java.lang.String)
org.webrtc.FrameCryptorFactory: org.webrtc.FrameCryptor createFrameCryptorForRtpReceiver(org.webrtc.PeerConnectionFactory,org.webrtc.RtpReceiver,java.lang.String,org.webrtc.FrameCryptorAlgorithm,org.webrtc.FrameCryptorKeyProvider)
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLConfig getEglConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,int[])
org.webrtc.VideoEncoder: boolean isHardwareEncoder()
org.webrtc.PeerConnection: boolean nativeSetConfiguration(org.webrtc.PeerConnection$RTCConfiguration)
com.cloudwebrtc.webrtc.LocalTrack: java.lang.String kind()
org.webrtc.NetworkMonitor: boolean isOnline()
org.webrtc.Camera1Session$2: void onPreviewFrame(byte[],android.hardware.Camera)
org.webrtc.VideoDecoder$-CC: long $default$createNative(org.webrtc.VideoDecoder,long)
org.webrtc.DataChannel$Init: DataChannel$Init()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numTrims()
org.webrtc.MediaCodecWrapper: android.media.MediaFormat getOutputFormat(int)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: com.cloudwebrtc.webrtc.utils.ConstraintsArray getArray(int)
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver nativeAddTransceiverWithTrack(long,org.webrtc.RtpTransceiver$RtpTransceiverInit)
org.webrtc.PeerConnection: java.util.List nativeGetTransceivers()
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void onReceive(android.content.Context,android.content.Intent)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverStop(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection: long nativeGetNativePeerConnection()
org.webrtc.EglThread: void scheduleRenderUpdate(org.webrtc.EglThread$RenderUpdate)
org.webrtc.DtmfSender: int nativeInterToneGap(long)
org.webrtc.TurnCustomizer: long getNativeTurnCustomizer()
org.webrtc.VideoFrameDrawer: void drawTexture(org.webrtc.RendererCommon$GlDrawer,org.webrtc.VideoFrame$TextureBuffer,android.graphics.Matrix,int,int,int,int,int,int)
org.webrtc.FrameCryptorKeyProvider: boolean setSharedKey(int,byte[])
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getStunCandidateKeepaliveInterval()
org.webrtc.FrameCryptorKeyProvider: boolean nativeSetKey(long,java.lang.String,int,byte[])
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
org.webrtc.VideoCodecInfo: VideoCodecInfo(int,java.lang.String,java.util.Map)
org.webrtc.Camera1Helper: org.webrtc.Size findClosestCaptureFormat(int,int,int)
org.webrtc.audio.WebRtcAudioTrack: boolean startPlayout()
org.webrtc.audio.WebRtcAudioRecord: boolean setNoiseSuppressorEnabled(boolean)
org.webrtc.FrameCryptor: long nativeSetObserver(long,org.webrtc.FrameCryptor$Observer)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionSetConfiguration(com.cloudwebrtc.webrtc.utils.ConstraintsMap,org.webrtc.PeerConnection)
org.webrtc.FrameCryptor: void setObserver(org.webrtc.FrameCryptor$Observer)
org.webrtc.MediaCodecWrapper: android.media.MediaCodecInfo getCodecInfo()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void switchCamera(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.MediaCodecVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.HardwareVideoEncoder: boolean canUseSurface()
org.webrtc.StatsObserver: void onComplete(org.webrtc.StatsReport[])
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
io.flutter.embedding.engine.FlutterJNI: void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void release()
org.webrtc.audio.WebRtcAudioUtils: void logDeviceInfo(java.lang.String)
org.webrtc.DataChannel: void checkDataChannelExists()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseHardwareNoiseSuppressor(boolean)
org.webrtc.Camera2Capturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
org.webrtc.PeerConnection: void setLocalDescription(org.webrtc.SdpObserver)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onDetachedFromActivityForConfigChanges()
org.webrtc.audio.WebRtcAudioRecord: boolean isAcousticEchoCancelerSupported()
org.webrtc.CameraCapturer$4: void onFirstFrameAvailable()
android.support.v4.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
androidx.core.view.WindowInsetsCompat$BuilderImpl30: WindowInsetsCompat$BuilderImpl30()
org.webrtc.SurfaceEglRenderer: void setFpsReduction(float)
org.webrtc.RtpTransceiver: void stopInternal()
androidx.lifecycle.ProcessLifecycleInitializer: ProcessLifecycleInitializer()
org.webrtc.PlatformSoftwareVideoDecoderFactory: PlatformSoftwareVideoDecoderFactory(org.webrtc.EglBase$Context)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver$1: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
com.cloudwebrtc.webrtc.video.camera.CameraUtils: void setExposureMode(io.flutter.plugin.common.MethodCall,com.cloudwebrtc.webrtc.utils.AnyThreadResult)
androidx.core.view.WindowInsetsCompat$Impl: boolean isRound()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int getWidth()
org.webrtc.Predicate$-CC: org.webrtc.Predicate $default$negate(org.webrtc.Predicate)
org.webrtc.SurfaceEglRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents,int[],org.webrtc.RendererCommon$GlDrawer)
org.webrtc.VideoFrameDrawer$YuvUploader: void release()
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory createPeerConnectionFactory()
org.webrtc.Camera2Capturer: void startCapture(int,int,int)
org.webrtc.RtpTransceiver: void nativeSetCodecPreferences(long,java.util.List)
org.webrtc.SurfaceTextureHelper$2: void onRetain(org.webrtc.TextureBufferImpl)
org.webrtc.NetworkMonitor: void setNetworkChangeDetectorFactory(org.webrtc.NetworkChangeDetectorFactory)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void renderFrameOnRenderThread(org.webrtc.VideoFrame)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseStereoInput(boolean)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getBufferSizeInFrames()
org.webrtc.JavaI420Buffer: org.webrtc.VideoFrame$Buffer cropAndScaleI420(org.webrtc.VideoFrame$I420Buffer,int,int,int,int,int,int)
org.webrtc.SurfaceTextureHelper$3: SurfaceTextureHelper$3(org.webrtc.SurfaceTextureHelper)
org.webrtc.SdpObserver: void onSetSuccess()
org.webrtc.Camera1Enumerator: java.util.List convertFramerates(java.util.List)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)
org.webrtc.HardwareVideoEncoderFactory: boolean isMediaCodecAllowed(android.media.MediaCodecInfo)
androidx.profileinstaller.ProfileInstallerInitializer$Handler28Impl: android.os.Handler createAsync(android.os.Looper)
org.webrtc.MediaCodecWrapper: android.media.MediaFormat getInputFormat()
org.webrtc.RtpSender: org.webrtc.DtmfSender dtmf()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void flush()
org.webrtc.audio.WebRtcAudioManager: boolean isLowLatencyOutputSupported(android.content.Context)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: boolean isHardwareEncoder()
org.webrtc.audio.WebRtcAudioUtils: java.lang.String deviceTypeToString(int)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setCaptureTimeNs(long)
org.webrtc.PeerConnectionFactory$Builder: PeerConnectionFactory$Builder()
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateJavaAssetManager(long,android.content.res.AssetManager,java.lang.String)
org.webrtc.Predicate$3: boolean test(java.lang.Object)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void success(java.lang.Object)
org.webrtc.TimestampAligner: void nativeReleaseTimestampAligner(long)
org.webrtc.RendererCommon: float[] getLayoutMatrix(boolean,float,float)
org.webrtc.FrameCryptor: FrameCryptor(long)
org.webrtc.FrameCryptorKeyProvider: void nativeSetSifTrailer(long,byte[])
androidx.core.view.WindowInsetsCompat$Impl: WindowInsetsCompat$Impl(androidx.core.view.WindowInsetsCompat)
org.webrtc.FrameCryptorFactory: org.webrtc.FrameCryptor nativeCreateFrameCryptorForRtpReceiver(long,long,java.lang.String,int,long)
org.webrtc.Histogram: Histogram(long)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void pushImage(android.media.Image)
io.flutter.embedding.engine.FlutterJNI: void nativeMarkTextureFrameAvailable(long,long)
org.webrtc.CapturerObserver: void onCapturerStopped()
androidx.core.view.WindowInsetsCompat$BuilderImpl29: androidx.core.view.WindowInsetsCompat build()
org.webrtc.ScreenCapturerAndroid: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
org.webrtc.TextureBufferImpl$RefCountMonitor: void onRetain(org.webrtc.TextureBufferImpl)
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$I420Buffer toI420()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushBoolean(boolean)
org.webrtc.WebRtcClassLoader: WebRtcClassLoader()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: void onCreateFailure(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: boolean getIsSoftwareRenderingEnabled()
org.webrtc.EglThread: void lambda$onRenderWindowClose$3()
org.webrtc.RtpCapabilities$HeaderExtensionCapability: RtpCapabilities$HeaderExtensionCapability(java.lang.String,int,boolean)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: FlutterWebRTCPlugin$LifeCycleObserver(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$1)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String)
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: DeviceOrientationManager(android.app.Activity,int)
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus release()
io.flutter.embedding.engine.FlutterJNI: void updateDisplayMetrics(int,float,float,float)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: void onCreateSuccess(org.webrtc.SessionDescription)
io.flutter.view.TextureRegistry$SurfaceTextureEntry$-CC: void $default$setOnFrameConsumedListener(io.flutter.view.TextureRegistry$SurfaceTextureEntry,io.flutter.view.TextureRegistry$OnFrameConsumedListener)
org.webrtc.VideoEncoder$Capabilities: VideoEncoder$Capabilities(boolean)
io.flutter.embedding.engine.FlutterJNI: void detachFromNativeAndReleaseResources()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverSetDirection(java.lang.String,java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.Metrics: org.webrtc.Metrics nativeGetAndReset()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] values()
org.webrtc.VideoCapturer: void startCapture(int,int,int)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)
org.webrtc.CapturerObserver: void onCapturerStarted(boolean)
org.webrtc.DtmfSender: boolean insertDtmf(java.lang.String,int,int)
org.webrtc.EglRenderer: void logD(java.lang.String)
org.webrtc.GlRectDrawer$ShaderCallbacks: GlRectDrawer$ShaderCallbacks()
org.webrtc.PeerConnectionFactory: org.webrtc.RtpCapabilities getRtpSenderCapabilities(org.webrtc.MediaStreamTrack$MediaType)
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabled(boolean)
org.webrtc.EglRenderer: void createEglSurfaceInternal(java.lang.Object)
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: void onRequestPermissionsResult(int,java.lang.String[],int[])
org.webrtc.PeerConnectionFactory: org.webrtc.AudioTrack createAudioTrack(java.lang.String,org.webrtc.AudioSource)
org.webrtc.VideoSource: void setIsScreencast(boolean)
org.webrtc.JNILogging: void logToInjectable(java.lang.String,java.lang.Integer,java.lang.String)
androidx.profileinstaller.ProfileVerifier$Api33Impl: android.content.pm.PackageInfo getPackageInfo(android.content.pm.PackageManager,android.content.Context)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean access$900(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetRight(android.view.DisplayCutout)
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: NetworkMonitorAutoDetect$WifiDirectManagerDelegate(org.webrtc.NetworkChangeDetector$Observer,android.content.Context)
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void requestStart(android.app.Activity,int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader29()
org.webrtc.ThreadUtils: void executeUninterruptibly(org.webrtc.ThreadUtils$BlockingOperation)
org.webrtc.AndroidVideoDecoder: boolean isSupportedColorFormat(int)
org.webrtc.audio.WebRtcAudioTrack: void logMainParametersExtended()
org.webrtc.audio.WebRtcAudioRecord: int channelCountToConfiguration(int)
org.webrtc.GlShader: void setVertexAttribArray(java.lang.String,int,java.nio.FloatBuffer)
io.flutter.embedding.engine.FlutterJNI: void unregisterTexture(long)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverSetDirection(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.SessionDescription$Type: java.lang.String canonicalForm()
org.webrtc.video.CustomVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus release$lambda$1(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
org.webrtc.EglBase$-CC: org.webrtc.EglBase10 createEgl10(javax.microedition.khronos.egl.EGLContext,int[])
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String,java.lang.String,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numImages()
org.webrtc.CameraCapturer$4: void onCameraDisconnected()
org.webrtc.GlShader: void useProgram()
com.cloudwebrtc.webrtc.video.camera.CameraUtils: void setFocusPoint(io.flutter.plugin.common.MethodCall,com.cloudwebrtc.webrtc.video.camera.Point,com.cloudwebrtc.webrtc.utils.AnyThreadResult)
com.cloudwebrtc.webrtc.utils.PermissionUtils: void access$100(android.content.Context,android.app.Activity,java.lang.String[],android.os.ResultReceiver)
org.webrtc.audio.WebRtcAudioTrack: void logUnderrunCount()
io.flutter.embedding.engine.FlutterJNI: void loadDartDeferredLibrary(int,java.lang.String[])
org.webrtc.VideoFrame$Buffer: int getBufferType()
org.webrtc.Loggable: void onLogMessage(java.lang.String,org.webrtc.Logging$Severity,java.lang.String)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setTlsAlpnProtocols(java.util.List)
org.webrtc.Camera1Session: void stop()
androidx.core.view.WindowInsetsCompat$Impl20: boolean equals(java.lang.Object)
org.webrtc.SurfaceViewRenderer: void updateSurfaceSize()
org.webrtc.DataChannel$Observer: void onBufferedAmountChange(long)
org.webrtc.PeerConnection$Observer: void onIceCandidateError(org.webrtc.IceCandidateErrorEvent)
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState[] values()
io.flutter.embedding.engine.FlutterJNI: void updateJavaAssetManager(android.content.res.AssetManager,java.lang.String)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onCancel(java.lang.Object)
org.webrtc.MediaCodecWrapper: void stop()
org.webrtc.audio.WebRtcAudioEffects: boolean effectTypeIsVoIP(java.util.UUID)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$402(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.View)
org.webrtc.EglThread: EglThread(org.webrtc.EglThread$ReleaseMonitor,org.webrtc.EglThread$HandlerWithExceptionCallbacks,org.webrtc.EglBase$EglConnection,org.webrtc.RenderSynchronizer)
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState valueOf(java.lang.String)
org.webrtc.SurfaceViewRenderer: void setScalingType(org.webrtc.RendererCommon$ScalingType)
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.graphics.Insets getStableInsets()
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifierBase(int)
org.webrtc.audio.WebRtcAudioRecord: boolean enableBuiltInAEC(boolean)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void drainAudio()
kotlinx.coroutines.selects.TrySelectDetailedResult: kotlinx.coroutines.selects.TrySelectDetailedResult[] values()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int)
org.webrtc.NetworkMonitorAutoDetect: void setConnectivityManagerDelegateForTests(org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void access$200(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.NativeAndroidVideoTrackSource: void nativeAdaptOutputFormat(long,int,int,java.lang.Integer,int,int,java.lang.Integer,java.lang.Integer)
org.webrtc.VideoProcessor$-CC: void $default$onFrameCaptured(org.webrtc.VideoProcessor,org.webrtc.VideoFrame,org.webrtc.VideoProcessor$FrameAdaptationParameters)
org.webrtc.NetworkMonitor$NetworkObserver: void onConnectionTypeChanged(org.webrtc.NetworkChangeDetector$ConnectionType)
kotlin.random.Random: Random()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRect(int,int,int,int)
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils: android.util.Size getSensorInfoPixelArraySize(android.hardware.camera2.CameraCharacteristics)
io.flutter.embedding.engine.FlutterJNI: void attachToNative()
org.webrtc.Logging: void w(java.lang.String,java.lang.String)
org.webrtc.ThreadUtils: void awaitUninterruptibly(java.util.concurrent.CountDownLatch)
androidx.core.view.ViewCompat$Api28Impl: boolean isAccessibilityHeading(android.view.View)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: void checkSelfPermissions(boolean)
org.webrtc.VideoEncoderWrapper: java.lang.Integer getScalingSettingsHigh(org.webrtc.VideoEncoder$ScalingSettings)
org.webrtc.VideoTrack: boolean nativeGetShouldReceive(long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpSenderSetParameters(java.lang.String,java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getMandatorySystemGestureInsets()
org.webrtc.CalledByNative: java.lang.String value()
org.webrtc.RtpParameters$Codec: java.lang.String getName()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void removeStreamForRendererById(java.lang.String)
android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
org.webrtc.EglRenderer: void logE(java.lang.String,java.lang.Throwable)
org.webrtc.audio.WebRtcAudioTrack: WebRtcAudioTrack(android.content.Context,android.media.AudioManager,android.media.AudioAttributes,org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback,org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback,org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback,boolean,boolean)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeStableInsets()
org.webrtc.CryptoOptions$Srtp: boolean getEnableEncryptedRtpHeaderExtensions()
org.webrtc.TurnCustomizer: void dispose()
androidx.startup.InitializationProvider: InitializationProvider()
org.webrtc.EglRenderer$EglSurfaceCreation: void setSurface(java.lang.Object)
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.utils.ConstraintsMap getUserVideo(com.cloudwebrtc.webrtc.utils.ConstraintsMap,org.webrtc.MediaStream)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setNetEqFactoryFactory(org.webrtc.NetEqFactoryFactory)
org.webrtc.SdpObserver: void onCreateSuccess(org.webrtc.SessionDescription)
androidx.lifecycle.ReportFragment: ReportFragment()
org.webrtc.Histogram: long nativeCreateCounts(java.lang.String,int,int,int)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void lambda$error$1(java.lang.String,java.lang.String,java.lang.Object)
org.webrtc.Predicate: org.webrtc.Predicate negate()
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLDisplay getEglDisplay(javax.microedition.khronos.egl.EGL10)
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityStopped(android.app.Activity)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemWindowInsets(androidx.core.graphics.Insets)
org.webrtc.MediaCodecWrapper: java.nio.ByteBuffer getOutputBuffer(int)
io.flutter.view.TextureRegistry$SurfaceProducer: android.view.Surface getSurface()
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector$ConnectionType getCurrentConnectionType()
com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter: void initialize(int,int)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void addRearDisplayPresentationStatusListener(androidx.window.extensions.core.util.function.Consumer)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionRemoveStream(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.ThreadUtils$1Result: ThreadUtils$1Result()
org.webrtc.RtpTransceiver: org.webrtc.RtpSender nativeGetSender(long)
org.webrtc.AudioTrack: long getNativeAudioTrack()
io.flutter.plugins.pathprovider.Messages$StorageDirectory: io.flutter.plugins.pathprovider.Messages$StorageDirectory[] values()
org.webrtc.PeerConnectionFactory: void nativeFreeFactory(long)
org.webrtc.Camera1Enumerator: java.lang.String getDeviceName(int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void maybeWaitOnFence(android.media.Image)
org.webrtc.SurfaceTextureHelper: void lambda$new$0(android.graphics.SurfaceTexture)
org.webrtc.EglBase14Impl: void release()
androidx.core.view.WindowInsetsCompat$Impl20: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)
org.webrtc.EglBase: int surfaceWidth()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setMicrophoneMute(boolean)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.hardware.display.VirtualDisplay access$200(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
org.webrtc.RtpCapabilities$HeaderExtensionCapability: int getPreferredId()
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State[] values()
org.webrtc.VideoCodecInfo: java.util.Map getParams()
com.cloudwebrtc.webrtc.utils.EglUtils: org.webrtc.EglBase$Context getRootEglBaseContext()
org.webrtc.FecControllerFactoryFactoryInterface: long createNative()
org.webrtc.PeerConnection: boolean nativeRemoveTrack(long)
org.webrtc.HardwareVideoEncoder: void releaseCodecOnOutputThread()
org.webrtc.MediaCodecWrapperFactory: org.webrtc.MediaCodecWrapper createByCodecName(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$6: MethodCallHandlerImpl$6(com.cloudwebrtc.webrtc.MethodCallHandlerImpl)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setTappableElementInsets(androidx.core.graphics.Insets)
org.webrtc.PeerConnection: boolean nativeAddLocalStream(long)
org.webrtc.TimestampAligner: long getRtcTimeNanos()
org.webrtc.VideoTrack: long nativeWrapSink(org.webrtc.VideoSink)
org.webrtc.PeerConnection: boolean nativeStartRtcEventLog(int,int)
org.webrtc.MediaStream: java.lang.String toString()
org.webrtc.EncodedImage: java.lang.Integer getQp()
org.webrtc.CameraCapturer$2: void onCameraDisconnected(org.webrtc.CameraSession)
org.webrtc.VideoSource$1: void onCapturerStarted(boolean)
org.webrtc.RtpParameters$Rtcp: boolean getReducedSize()
org.webrtc.EglBase14Impl: org.webrtc.EglBase$Context getEglBaseContext()
org.webrtc.AudioTrack: void dispose()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putDouble(java.lang.String,double)
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType valueOf(java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$200(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceDestroyed()
org.webrtc.EglRenderer: void lambda$clearImage$4(float,float,float,float)
org.webrtc.audio.WebRtcAudioUtils: java.lang.String audioEncodingToString(int)
org.webrtc.Logging: void nativeEnableLogToDebugOutput(int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onEnd(android.view.WindowInsetsAnimation)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.PeerConnection getPeerConnection()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void stop()
com.cloudwebrtc.webrtc.video.camera.CameraUtils: void hasTorch(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
org.webrtc.VideoProcessor: void setSink(org.webrtc.VideoSink)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: boolean hasKey(java.lang.String)
org.webrtc.Logging: void enableTracing(java.lang.String,java.util.EnumSet)
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void setOnFrameConsumedListener(io.flutter.view.TextureRegistry$OnFrameConsumedListener)
androidx.profileinstaller.ProfileInstallerInitializer$Choreographer16Impl: void postFrameCallback(java.lang.Runnable)
com.cloudwebrtc.webrtc.utils.Utils: java.lang.String iceGatheringStateString(org.webrtc.PeerConnection$IceGatheringState)
org.webrtc.FrameCryptorKeyProvider: void setSifTrailer(byte[])
org.webrtc.EglBase$EglConnection$-CC: org.webrtc.EglBase$EglConnection create(org.webrtc.EglBase$Context,int[])
org.webrtc.SurfaceTextureHelper$FrameRefMonitor: void onNewBuffer(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.RtpTransceiver: void stopStandard()
io.flutter.embedding.engine.FlutterJNI: void nativeUnregisterTexture(long,long)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetTop(android.view.DisplayCutout)
org.webrtc.MediaCodecVideoDecoderFactory: boolean isCodecAllowed(android.media.MediaCodecInfo)
com.example.webrtc_translator.MainActivity: MainActivity()
org.webrtc.YuvConverter$ShaderCallbacks: YuvConverter$ShaderCallbacks()
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI spawn(java.lang.String,java.lang.String,java.lang.String,java.util.List)
org.webrtc.PeerConnection: void nativeRemoveLocalStream(long)
org.webrtc.PeerConnection$RTCConfiguration: int getIceBackupCandidatePairPingInterval()
org.webrtc.MediaSource: MediaSource(long)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode[] $values()
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode valueOf(java.lang.String)
org.webrtc.EglBase: int surfaceHeight()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void lambda$getStatsForTrack$0(io.flutter.plugin.common.MethodChannel$Result,org.webrtc.RTCStatsReport)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setFecControllerFactoryFactoryInterface(org.webrtc.FecControllerFactoryFactoryInterface)
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformView getView()
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: GetUserMediaImpl$2(com.cloudwebrtc.webrtc.GetUserMediaImpl,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream)
org.webrtc.HardwareVideoEncoder: void fillInputBuffer(java.nio.ByteBuffer,org.webrtc.VideoFrame$Buffer)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void dispose()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void removeTrack(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.Predicate: boolean test(java.lang.Object)
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState[] $values()
org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback: void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setPassword(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void dataChannelClose(java.lang.String,java.lang.String)
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
org.webrtc.PeerConnection: boolean nativeSetBitrate(java.lang.Integer,java.lang.Integer,java.lang.Integer)
org.webrtc.PeerConnectionFactory: void nativeInitializeAndroidGlobals()
org.webrtc.TimestampAligner: void checkNativeAlignerExists()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3: void run()
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions createInitializationOptions()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: void onCreateFailure(java.lang.String)
org.webrtc.NetworkMonitor: int getNumObservers()
org.webrtc.JniCommon: void nativeAddRef(long)
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType[] $values()
org.webrtc.Logging: void injectLoggable(org.webrtc.Loggable,org.webrtc.Logging$Severity)
org.webrtc.VideoEncoder$CodecSpecificInfo: VideoEncoder$CodecSpecificInfo()
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState fromNativeIndex(int)
org.webrtc.SurfaceViewRenderer: void setMirror(boolean)
org.webrtc.CameraCapturer: boolean isScreencast()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.MediaConstraints defaultConstraints()
org.webrtc.Camera1Session: void stopInternal()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.content.Context getApplicationContext()
org.webrtc.RtpSender: boolean setParameters(org.webrtc.RtpParameters)
io.flutter.view.FlutterCallbackInformation: FlutterCallbackInformation(java.lang.String,java.lang.String,java.lang.String)
org.webrtc.RtpParameters: java.util.List getCodecs()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void waitOnFence(android.media.Image)
org.webrtc.audio.WebRtcAudioRecord: void releaseAudioResources()
org.webrtc.audio.JavaAudioDeviceModule: org.webrtc.audio.JavaAudioDeviceModule$Builder builder(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void nativeSetAccessibilityFeatures(long,int)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides[] values()
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: void onResume()
org.webrtc.DefaultVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getDisplayMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$300(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState[] values()
org.webrtc.EglBase14Impl: EglBase14Impl(android.opengl.EGLContext,int[])
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLConfig getConfig()
org.webrtc.audio.WebRtcAudioTrack: void logBufferSizeInFrames()
org.webrtc.NetworkMonitor: int androidSdkInt()
org.webrtc.PeerConnection$Observer$-CC: void $default$onIceCandidateError(org.webrtc.PeerConnection$Observer,org.webrtc.IceCandidateErrorEvent)
org.webrtc.WrappedNativeI420Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] values()
org.webrtc.EglThread$HandlerWithExceptionCallbacks: EglThread$HandlerWithExceptionCallbacks(android.os.Looper)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void getUserMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream)
org.webrtc.EglRenderer$FrameListenerAndParams: EglRenderer$FrameListenerAndParams(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer,boolean)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void post(java.lang.Runnable)
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl: void setOverriddenInsets(androidx.core.graphics.Insets[])
org.webrtc.VideoFrame$Buffer: int getWidth()
org.webrtc.audio.WebRtcAudioUtils: java.lang.String getThreadInfo()
org.webrtc.FrameCryptor: void dispose()
org.webrtc.Camera2Enumerator: java.util.List convertFramerates(android.util.Range[],int)
org.webrtc.DefaultVideoDecoderFactory: DefaultVideoDecoderFactory(org.webrtc.EglBase$Context)
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpSenderSetStreams(java.lang.String,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$302(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
org.webrtc.VideoFrame$I420Buffer: int getStrideY()
io.flutter.embedding.engine.FlutterJNI: void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)
androidx.core.view.WindowInsetsCompat$BuilderImpl: androidx.core.view.WindowInsetsCompat build()
org.webrtc.HardwareVideoEncoderFactory: HardwareVideoEncoderFactory(org.webrtc.EglBase$Context,boolean,boolean)
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type valueOf(java.lang.String)
org.webrtc.SessionDescription: java.lang.String getTypeInCanonicalForm()
org.webrtc.audio.WebRtcAudioTrack: int getStreamMaxVolume()
org.webrtc.RtpTransceiver: void dispose()
org.webrtc.Predicate$1: boolean test(java.lang.Object)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode valueOf(java.lang.String)
org.webrtc.YuvConverter$ShaderCallbacks: void onNewShader(org.webrtc.GlShader)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.MediaStreamTrack getTransceiversTrack(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void access$100(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.TurnCustomizer getTurnCustomizer()
org.webrtc.SurfaceTextureHelper$2: void onRelease(org.webrtc.TextureBufferImpl)
org.webrtc.MediaStream: void dispose()
org.webrtc.DataChannel: long bufferedAmount()
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int,int)
org.webrtc.SurfaceViewRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents,int[],org.webrtc.RendererCommon$GlDrawer)
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils$MeteringRectangleFactory: android.hardware.camera2.params.MeteringRectangle create(int,int,int,int,int)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetLeft(android.view.DisplayCutout)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: io.flutter.plugin.common.EventChannel$EventSink access$000(com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver)
androidx.core.view.ViewCompat$Api21Impl: void setElevation(android.view.View,float)
org.webrtc.YuvHelper: void nativeI420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.WrappedNativeVideoDecoder: org.webrtc.VideoCodecStatus release()
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int getMaxBitrateBps()
org.webrtc.EncodedImage: long getCaptureTimeNs()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.graphics.Canvas lockCanvas()
org.webrtc.RtpParameters$Codec: RtpParameters$Codec(int,java.lang.String,org.webrtc.MediaStreamTrack$MediaType,java.lang.Integer,java.lang.Integer,java.util.Map)
io.flutter.view.TextureRegistry$SurfaceProducer: void scheduleFrame()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.media.projection.MediaProjection access$300(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
org.webrtc.PeerConnectionFactory: org.webrtc.AudioSource createAudioSource(org.webrtc.MediaConstraints)
io.flutter.embedding.engine.FlutterJNI: void lambda$decodeImage$0(long,android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState valueOf(java.lang.String)
org.webrtc.NetworkMonitor$InstanceHolder: NetworkMonitor$InstanceHolder()
androidx.window.core.VerificationMode: androidx.window.core.VerificationMode valueOf(java.lang.String)
org.webrtc.JavaI420Buffer: void lambda$allocate$0(java.nio.ByteBuffer)
org.webrtc.MediaStream: boolean nativeRemoveAudioTrack(long,long)
org.webrtc.CameraCapturer: void createSessionInternal(int)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: org.webrtc.MediaStreamTrack getRemoteTrack(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void finalize()
org.webrtc.LibvpxVp9Encoder: boolean nativeIsSupported()
org.webrtc.RtpParameters: RtpParameters(java.lang.String,org.webrtc.RtpParameters$DegradationPreference,org.webrtc.RtpParameters$Rtcp,java.util.List,java.util.List,java.util.List)
org.webrtc.RendererCommon: android.graphics.Matrix convertMatrixToAndroidGraphicsMatrix(float[])
org.webrtc.EglBase14Impl: android.opengl.EGLContext createEglContext(android.opengl.EGLContext,android.opengl.EGLDisplay,android.opengl.EGLConfig,int)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setStableInsets(androidx.core.graphics.Insets)
org.webrtc.audio.JavaAudioDeviceModule$Builder: JavaAudioDeviceModule$Builder(android.content.Context)
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraOpening(java.lang.String)
com.cloudwebrtc.webrtc.record.FrameCapturer: void onFrame(org.webrtc.VideoFrame)
org.webrtc.RtpSender: boolean nativeSetParameters(long,org.webrtc.RtpParameters)
org.webrtc.VideoDecoder: org.webrtc.VideoCodecStatus release()
org.webrtc.GlGenericDrawer: void drawYuv(int[],float[],int,int,int,int,int,int)
org.webrtc.TextureBufferImpl$2: void onRelease(org.webrtc.TextureBufferImpl)
org.webrtc.EglRenderer$EglSurfaceCreation: void run()
org.webrtc.PeerConnection$IceTransportsType: PeerConnection$IceTransportsType(java.lang.String,int)
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] values()
org.webrtc.AudioTrack: void removeSink(org.webrtc.AudioTrackSink)
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference[] values()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: com.cloudwebrtc.webrtc.MethodCallHandlerImpl access$100(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin)
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State[] values()
io.flutter.view.TextureRegistry$SurfaceTextureEntry: android.graphics.SurfaceTexture surfaceTexture()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceChanged(long,int,int)
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: GetUserMediaImpl$ScreenRequestPermissionsFragment()
org.webrtc.Camera1Session: void create(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,boolean,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.JniCommon: void nativeFreeByteBuffer(java.nio.ByteBuffer)
org.webrtc.RtpParameters$Encoding: java.lang.String getScalabilityMode()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifierBase(int)
org.webrtc.PeerConnectionFactory: void nativeStopAecDump(long)
org.webrtc.RendererCommon$VideoLayoutMeasure: void setScalingType(org.webrtc.RendererCommon$ScalingType,org.webrtc.RendererCommon$ScalingType)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void Dispose()
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] values()
io.flutter.view.AccessibilityViewEmbedder: android.view.View platformViewOfNode(int)
org.webrtc.FrameCryptor: long getNativeFrameCryptor()
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraError(java.lang.String)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: long createNative(long)
io.flutter.embedding.engine.FlutterJNI: void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void addTrack(java.lang.String,java.lang.String,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpSenderSetParameters(java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.YuvHelper: void I420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.CameraCapturer$7: CameraCapturer$7(org.webrtc.CameraCapturer,org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetBottom(android.view.DisplayCutout)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values()
org.webrtc.PeerConnection$RTCConfiguration: java.util.List getIceServers()
org.webrtc.SimulcastVideoEncoderFactory: SimulcastVideoEncoderFactory(org.webrtc.VideoEncoderFactory,org.webrtc.VideoEncoderFactory)
org.webrtc.Logging: void nativeLog(int,java.lang.String,java.lang.String)
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: void run()
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: void stopThread()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: AudioSwitchManager(android.content.Context)
org.webrtc.EglRenderer: void setErrorCallback(org.webrtc.EglRenderer$ErrorCallback)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: FlutterWebRTCPlugin$LifeCycleObserver(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin)
org.webrtc.RtpTransceiver: boolean setDirection(org.webrtc.RtpTransceiver$RtpTransceiverDirection)
io.flutter.embedding.engine.FlutterJNI: void ensureNotAttachedToNative()
org.webrtc.Camera2Session: void findCaptureFormat()
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values()
org.webrtc.Size: Size(int,int)
io.flutter.embedding.engine.FlutterJNI: void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate)
org.webrtc.ContextUtils: android.content.Context getApplicationContext()
androidx.core.view.ViewCompat$Api21Impl: float getZ(android.view.View)
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: int hashCode()
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType valueOf(java.lang.String)
org.webrtc.Camera2Session$CaptureSessionCallback: void lambda$onConfigured$0(org.webrtc.VideoFrame)
org.webrtc.EglBase10Impl$Context: javax.microedition.khronos.egl.EGLContext getRawContext()
org.webrtc.audio.WebRtcAudioEffects: boolean setNS(boolean)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState)
com.cloudwebrtc.webrtc.video.camera.CameraUtils: void resultError(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifier(int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String getFacingMode(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.audio.WebRtcAudioRecord: boolean isNoiseSuppressorSupported()
org.webrtc.TextureBufferImpl: int getUnscaledWidth()
org.webrtc.RendererCommon$VideoLayoutMeasure: android.graphics.Point measure(int,int,int,int)
org.webrtc.LibaomAv1Encoder: java.util.List scalabilityModes()
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: java.io.File getRecordFile()
org.webrtc.Camera2Enumerator: java.util.List getSupportedFormats(android.content.Context,java.lang.String)
com.cloudwebrtc.webrtc.video.camera.SdkCapabilityChecker: boolean supportsZoomRatio()
org.webrtc.Camera1Capturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
org.webrtc.GlGenericDrawer: java.lang.String createFragmentShaderString(java.lang.String,org.webrtc.GlGenericDrawer$ShaderType)
org.webrtc.VideoCodecInfo: java.util.List getScalabilityModes()
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String toString()
com.twilio.audioswitch.AbstractAudioSwitch$State: com.twilio.audioswitch.AbstractAudioSwitch$State[] values()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onRemoveTrack(org.webrtc.RtpReceiver)
org.webrtc.PeerConnectionFactory: long nativeCreateVideoTrack(long,java.lang.String,long)
org.webrtc.NetworkMonitorAutoDetect: long getDefaultNetId()
org.webrtc.audio.WebRtcAudioEffects: void assertTrue(boolean)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void createDataChannel(java.lang.String,java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceCheckMinInterval()
org.webrtc.VideoSource: org.webrtc.CapturerObserver getCapturerObserver()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.util.ArrayList getListArray(java.lang.String)
com.cloudwebrtc.webrtc.utils.PermissionUtils: void send(android.os.ResultReceiver,int,java.lang.String[],int[])
org.webrtc.audio.AudioDeviceModule: void setSpeakerMute(boolean)
org.webrtc.AudioTrack: void setVolume(double)
org.webrtc.SurfaceTextureHelper: void tryDeliverTextureFrame()
com.cloudwebrtc.webrtc.GetUserMediaImpl$IsCameraEnabled: boolean isEnabled(java.lang.String)
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioRecord createAudioRecordOnLowerThanM(int,int,int,int,int)
org.webrtc.PeerConnection$RTCConfiguration: boolean getActiveResetSrtpParams()
org.webrtc.PeerConnection: boolean startRtcEventLog(int,int)
com.cloudwebrtc.webrtc.StateProvider: android.content.Context getApplicationContext()
org.webrtc.NetworkMonitor: void notifyObserversOfNetworkConnect(org.webrtc.NetworkChangeDetector$NetworkInformation)
org.webrtc.PeerConnection$ContinualGatheringPolicy: PeerConnection$ContinualGatheringPolicy(java.lang.String,int)
org.webrtc.video.CustomVideoEncoderFactory: CustomVideoEncoderFactory(org.webrtc.EglBase$Context,boolean,boolean)
org.webrtc.FrameCryptor$FrameCryptionState: FrameCryptor$FrameCryptionState(java.lang.String,int)
io.flutter.plugins.GeneratedPluginRegistrant: void registerWith(io.flutter.embedding.engine.FlutterEngine)
org.webrtc.audio.WebRtcAudioRecord: void assertTrue(boolean)
org.webrtc.Camera1Session: org.webrtc.Size findClosestPictureSize(android.hardware.Camera$Parameters,int,int)
org.webrtc.TextureBufferImpl: android.os.Handler getToI420Handler()
org.webrtc.MediaStream: java.lang.String nativeGetId(long)
org.webrtc.audio.WebRtcAudioTrack: int initPlayout(int,int,double)
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
org.webrtc.SoftwareVideoEncoderFactory: long nativeCreateFactory()
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$initVideoEncoder$0()
androidx.core.view.ViewCompat$Api21Impl$1: ViewCompat$Api21Impl$1(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)
org.webrtc.RtpParameters$Encoding: java.lang.Integer getMaxFramerate()
io.flutter.embedding.engine.FlutterJNI: void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback: void onWebRtcAudioTrackInitError(java.lang.String)
org.webrtc.TextureBufferImpl: TextureBufferImpl(int,int,org.webrtc.VideoFrame$TextureBuffer$Type,int,android.graphics.Matrix,android.os.Handler,org.webrtc.YuvConverter,org.webrtc.TextureBufferImpl$RefCountMonitor)
org.webrtc.NV21Buffer: void release()
org.webrtc.CameraSession: void stop()
org.webrtc.VideoSource$1: void onFrameCaptured(org.webrtc.VideoFrame)
org.webrtc.video.CustomVideoEncoderFactory: void setForceSWCodec(boolean)
org.webrtc.NetworkMonitorAutoDetect: void destroy()
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(java.util.List,org.webrtc.PeerConnection$Observer)
org.webrtc.RenderSynchronizer: void onDisplayRefreshCycleBegin(long)
org.webrtc.ScreenCapturerAndroid: ScreenCapturerAndroid(android.content.Intent,android.media.projection.MediaProjection$Callback)
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityPreCreated(android.app.Activity,android.os.Bundle)
org.webrtc.EglBase$-CC: org.webrtc.EglBase10 createEgl10(int[])
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void clearCommunicationDevice()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void resultError(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: void onSetSuccess()
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy valueOf(java.lang.String)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents)
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int frameSize()
org.webrtc.LibvpxVp8Encoder: long nativeCreate(long)
org.webrtc.MediaStream: MediaStream(long)
org.webrtc.EglBase10Impl: void swapBuffers(long)
org.webrtc.Camera2Enumerator: boolean isBackFacing(java.lang.String)
org.webrtc.Camera1Enumerator: org.webrtc.CameraVideoCapturer createCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
org.webrtc.VideoFrame$Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
org.webrtc.VideoEncoderFallback: long nativeCreate(long,org.webrtc.VideoEncoder,org.webrtc.VideoEncoder)
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioAttributes getAudioAttributes(android.media.AudioAttributes)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.lang.String toString()
org.webrtc.Camera1Enumerator: java.util.List convertSizes(java.util.List)
org.webrtc.TextureBufferImpl$1: void onRetain(org.webrtc.TextureBufferImpl)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityStopped(android.app.Activity)
org.webrtc.PeerConnectionFactory: void nativeDeleteLoggable()
org.webrtc.BuiltinAudioEncoderFactoryFactory: long createNativeAudioEncoderFactory()
org.webrtc.NetworkMonitorAutoDetect: void connectionTypeChanged(org.webrtc.NetworkMonitorAutoDetect$NetworkState)
org.webrtc.HardwareVideoEncoder$1: HardwareVideoEncoder$1(org.webrtc.HardwareVideoEncoder)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpSenderSetTrack(java.lang.String,java.lang.String,java.lang.String,boolean,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnectionFactory$InitializationOptions: PeerConnectionFactory$InitializationOptions(android.content.Context,java.lang.String,boolean,org.webrtc.NativeLibraryLoader,java.lang.String,org.webrtc.Loggable,org.webrtc.Logging$Severity)
kotlinx.coroutines.android.AndroidDispatcherFactory: AndroidDispatcherFactory()
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
org.webrtc.MediaCodecWrapper: int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)
androidx.core.view.DisplayCutoutCompat$Api28Impl: java.util.List getBoundingRects(android.view.DisplayCutout)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.util.concurrent.ExecutorService getExecutor()
io.flutter.embedding.engine.FlutterJNI: void deferredComponentInstallFailure(int,java.lang.String,boolean)
org.webrtc.Camera1Enumerator: boolean isFrontFacing(java.lang.String)
org.webrtc.EglRenderer: void clearImage()
org.webrtc.AndroidVideoDecoder: void deliverTextureFrame(int,android.media.MediaCodec$BufferInfo,int,java.lang.Integer)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void removeTrack(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: SurfaceTextureRenderer(java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: boolean isImportantForAccessibility(android.view.View)
org.webrtc.NativeCapturerObserver: void onFrameCaptured(org.webrtc.VideoFrame)
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void onActivityResult(int,int,android.content.Intent)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void releaseInternal()
org.webrtc.NetworkMonitor: java.util.List getNativeNetworkObserversSync()
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType valueOf(java.lang.String)
org.webrtc.RtpParameters$Encoding: java.lang.Long getSsrc()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderExportSharedKey(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.audio.WebRtcAudioRecord: boolean stopRecording()
com.cloudwebrtc.webrtc.audio.LocalAudioTrack: void addSink(org.webrtc.AudioTrackSink)
org.webrtc.SurfaceViewRenderer: void onFrame(org.webrtc.VideoFrame)
org.webrtc.RtpSender: void nativeSetStreams(long,java.util.List)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides valueOf(java.lang.String)
org.webrtc.CameraCapturer$1: CameraCapturer$1(org.webrtc.CameraCapturer)
org.webrtc.PlatformSoftwareVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView getCurrentImageSurface()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onCreate(androidx.lifecycle.LifecycleOwner)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setAudioAttributesUsageType(java.lang.String)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void addTransceiver(org.webrtc.MediaStreamTrack,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.Histogram: long nativeCreateEnumeration(java.lang.String,int)
io.flutter.view.AccessibilityViewEmbedder: java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord)
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] values()
androidx.core.view.WindowInsetsCompat$Impl30: WindowInsetsCompat$Impl30(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
org.webrtc.RtpParameters: java.util.List getHeaderExtensions()
io.flutter.embedding.engine.FlutterJNI: void onEndFrame()
com.cloudwebrtc.webrtc.GetUserMediaImpl$5: GetUserMediaImpl$5(com.cloudwebrtc.webrtc.GetUserMediaImpl)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onConnectionChange(org.webrtc.PeerConnection$PeerConnectionState)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory: SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory(org.webrtc.VideoEncoderFactory)
org.webrtc.YuvHelper: void I420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int)
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void post(java.lang.Runnable)
com.cloudwebrtc.webrtc.video.camera.Point: Point(java.lang.Double,java.lang.Double)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void lambda$getStats$2(io.flutter.plugin.common.MethodChannel$Result,org.webrtc.RTCStatsReport)
org.webrtc.CameraSession$-CC: int getDeviceOrientation(android.content.Context)
org.webrtc.Camera1Session$2: Camera1Session$2(org.webrtc.Camera1Session)
org.webrtc.audio.WebRtcAudioManager: int getLowLatencyFramesPerBuffer(android.media.AudioManager)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpParameters$Encoding mapToEncoding(java.util.Map)
org.webrtc.PeerConnection$Observer: void onIceConnectionReceivingChange(boolean)
androidx.core.view.WindowInsetsCompat$Impl20: void copyRootViewBounds(android.view.View)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpParameters updateRtpParameters(org.webrtc.RtpParameters,java.util.Map)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: io.flutter.plugin.common.EventChannel$EventSink access$002(com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver,io.flutter.plugin.common.EventChannel$EventSink)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.MediaStreamTrack$MediaType stringToMediaType(java.lang.String)
org.webrtc.EglBase$ConfigBuilder: org.webrtc.EglBase$ConfigBuilder setSupportsPixelBuffer(boolean)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getUnderrunCount()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: void asyncWaitForVsync(long)
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel valueOf(java.lang.String)
org.webrtc.video.CustomVideoEncoderFactory: void setForceSWCodecList(java.util.List)
org.webrtc.EglRenderer: void onFrame(org.webrtc.VideoFrame)
org.webrtc.SurfaceTextureHelper: void lambda$setTextureSize$2(int,int)
org.webrtc.Camera1Helper: Camera1Helper()
io.flutter.embedding.engine.FlutterJNI: void nativeDeferredComponentInstallFailure(int,java.lang.String,boolean)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String getNextDataChannelUUID()
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getInsets(int)
org.webrtc.SSLCertificateVerifier: boolean verify(byte[])
org.webrtc.PeerConnection: boolean addIceCandidate(org.webrtc.IceCandidate)
org.webrtc.RtpCapabilities: java.util.List getHeaderExtensions()
org.webrtc.audio.WebRtcAudioTrackUtils: WebRtcAudioTrackUtils()
org.webrtc.CameraEnumerationAndroid$1: int progressivePenalty(int,int,int,int)
org.webrtc.BuiltinAudioEncoderFactoryFactory: BuiltinAudioEncoderFactoryFactory()
org.webrtc.RtpTransceiver: org.webrtc.RtpReceiver getReceiver()
org.webrtc.audio.WebRtcAudioTrack: void releaseAudioResources()
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioAttributes$Builder applyAttributesOnQOrHigher(android.media.AudioAttributes$Builder,android.media.AudioAttributes)
org.webrtc.PeerConnection$RtcpMuxPolicy: PeerConnection$RtcpMuxPolicy(java.lang.String,int)
org.webrtc.FileVideoCapturer$VideoReaderY4M: FileVideoCapturer$VideoReaderY4M(java.lang.String)
org.webrtc.RtpParameters: java.lang.String getTransactionId()
org.webrtc.SurfaceTextureHelper: org.webrtc.VideoFrame$I420Buffer textureToYuv(org.webrtc.VideoFrame$TextureBuffer)
androidx.core.view.ViewCompat$Api21Impl: void setZ(android.view.View,float)
org.webrtc.VideoFrame$Buffer: void release()
org.webrtc.RtpParameters$Encoding: RtpParameters$Encoding(java.lang.String,boolean,double,int,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Double,java.lang.String,java.lang.Long,boolean)
org.webrtc.Logging: void v(java.lang.String,java.lang.String)
org.webrtc.NetworkChangeDetector: boolean supportNetworkCallback()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void setParameters(android.os.Bundle)
org.webrtc.VideoFileRenderer$1: VideoFileRenderer$1(org.webrtc.VideoFileRenderer,org.webrtc.EglBase$Context)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$RtcpMuxPolicy getRtcpMuxPolicy()
org.webrtc.MediaConstraints: MediaConstraints()
org.webrtc.VideoEncoderWrapper: java.lang.Integer getScalingSettingsLow(org.webrtc.VideoEncoder$ScalingSettings)
org.webrtc.VideoFrame$TextureBuffer: int getUnscaledHeight()
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection[] values()
org.webrtc.NativeLibraryLoader: boolean load(java.lang.String)
org.webrtc.PeerConnectionFactory: void checkPeerConnectionFactoryExists()
org.webrtc.PeerConnectionFactory: void initializeInternalTracer()
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel[] $values()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityStarted(android.app.Activity)
org.webrtc.PeerConnectionFactory: void shutdownInternalTracer()
org.webrtc.EglBase10$EglConnection: javax.microedition.khronos.egl.EGLContext getContext()
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection[] $values()
org.webrtc.JavaI420Buffer: int getWidth()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void updateTexImage()
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State fromNativeIndex(int)
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy[] $values()
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow[] values()
org.webrtc.CameraCapturer$6: void run()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushInt(int)
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State[] $values()
org.webrtc.RtpTransceiver: void stop()
org.webrtc.NetworkMonitor: void stopMonitoring(long)
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType valueOf(java.lang.String)
org.webrtc.MediaStreamTrack: long getNativeMediaStreamTrack()
org.webrtc.VideoFrameDrawer$YuvUploader: int[] getYuvTextures()
com.cloudwebrtc.webrtc.utils.Callback: void invoke(java.lang.Object[])
org.webrtc.HardwareVideoEncoderFactory: boolean isH264HighProfileSupported(android.media.MediaCodecInfo)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void addTransceiver(java.lang.String,java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.view.TextureRegistry$SurfaceProducer$Callback access$200(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
org.webrtc.NetworkMonitor: void removeObserver(org.webrtc.NetworkMonitor$NetworkObserver)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setFieldTrials(java.lang.String)
org.webrtc.WrappedVideoDecoderFactory: boolean disableSurfaceTextureFrame(java.lang.String)
org.webrtc.ThreadUtils: ThreadUtils()
org.webrtc.EglRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer,boolean)
org.webrtc.SurfaceEglRenderer: void onFrame(org.webrtc.VideoFrame)
org.webrtc.WrappedNativeI420Buffer: int getStrideU()
org.webrtc.Camera2Session: void stop()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.lang.String getImplementationName()
org.webrtc.VideoEncoder: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onStandardizedIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState)
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy[] $values()
org.webrtc.RtpParameters$Encoding: double getBitratePriority()
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: ProcessLifecycleOwner$attach$1$onActivityPreCreated$1(androidx.lifecycle.ProcessLifecycleOwner)
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String,java.util.List,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy,java.lang.String,java.util.List,java.util.List)
org.webrtc.FrameCryptorFactory: org.webrtc.FrameCryptor nativeCreateFrameCryptorForRtpSender(long,long,java.lang.String,int,long)
com.cloudwebrtc.webrtc.utils.AnyThreadResult: AnyThreadResult(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int getFrameSizePixels()
org.webrtc.AudioTrack: void nativeAddSink(long,long)
org.webrtc.Histogram: void nativeAddSample(long,int)
org.webrtc.audio.WebRtcAudioUtils: void logAudioStateBasic(java.lang.String,android.content.Context,android.media.AudioManager)
org.webrtc.NetworkMonitor: void startMonitoring()
org.webrtc.VideoCapturer: void dispose()
com.cloudwebrtc.webrtc.StateProvider: java.lang.String getNextTrackUUID()
org.webrtc.StatsReport$Value: StatsReport$Value(java.lang.String,java.lang.String)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void unlockCanvasAndPost(android.graphics.Canvas)
org.webrtc.video.CustomVideoDecoderFactory: void setForceSWCodec(boolean)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.lang.String getString(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: void registerNetworkCallback(android.net.ConnectivityManager$NetworkCallback)
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation calculateSensorOrientation(int)
org.webrtc.PeerConnection$Observer$-CC: void $default$onConnectionChange(org.webrtc.PeerConnection$Observer,org.webrtc.PeerConnection$PeerConnectionState)
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String getKey()
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack,org.webrtc.RtpTransceiver$RtpTransceiverInit)
org.webrtc.Logging: void nativeEnableLogThreads()
com.cloudwebrtc.webrtc.audio.RecordSamplesReadyCallbackAdapter: void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
org.webrtc.FrameCryptorFactory: org.webrtc.FrameCryptorKeyProvider createFrameCryptorKeyProvider(boolean,byte[],int,byte[],int,int,boolean)
io.flutter.embedding.engine.FlutterJNI: void loadLibrary(android.content.Context)
com.cloudwebrtc.webrtc.audio.RecordSamplesReadyCallbackAdapter: RecordSamplesReadyCallbackAdapter()
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)
org.webrtc.SurfaceViewRenderer: SurfaceViewRenderer(android.content.Context,android.util.AttributeSet)
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack$MediaType)
org.webrtc.SurfaceTextureHelper: void updateTexImage()
org.webrtc.VideoSource: long getNativeVideoTrackSource()
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$onWebRtcAudioRecordSamplesReady$4(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
org.webrtc.SurfaceViewRenderer: void removeFrameListener(org.webrtc.EglRenderer$FrameListener)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void stopListening()
org.webrtc.TextureBufferImpl: TextureBufferImpl(int,int,int,int,org.webrtc.VideoFrame$TextureBuffer$Type,int,android.graphics.Matrix,android.os.Handler,org.webrtc.YuvConverter,org.webrtc.TextureBufferImpl$RefCountMonitor)
org.webrtc.PeerConnectionDependencies: org.webrtc.PeerConnection$Observer getObserver()
com.cloudwebrtc.webrtc.LocalTrack: void dispose()
org.webrtc.CameraEnumerator: java.lang.String[] getDeviceNames()
org.webrtc.NV12Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
org.webrtc.SurfaceViewRenderer: void setFpsReduction(float)
org.webrtc.Camera1Capturer: void changeCaptureFormat(int,int,int)
org.webrtc.CameraCapturer: void switchCameraInternal(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: JavaAudioDeviceModule$AudioSamples(int,int,int,byte[])
org.webrtc.audio.WebRtcAudioManager: int getInputBufferSize(android.content.Context,android.media.AudioManager,int,int)
org.webrtc.LibvpxVp9Decoder: long nativeCreateDecoder()
com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter$ExternalAudioFrameProcessing: void reset(int)
org.webrtc.PeerConnectionFactory: java.lang.String nativeFindFieldTrialsFullName(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkMonitorAutoDetect$NetworkState getNetworkState(android.net.NetworkInfo)
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions$Builder setRequireFrameEncryption(boolean)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: java.nio.ByteBuffer getOutputBuffer(int)
org.webrtc.RenderSynchronizer: void lambda$new$0()
org.webrtc.ThreadUtils$1CaughtException: ThreadUtils$1CaughtException()
org.webrtc.EglRenderer: java.lang.String averageTimeAsString(long,int)
org.webrtc.VideoTrack: VideoTrack(long)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setAudioMode(java.lang.String)
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type[] $values()
org.webrtc.EncodedImage: int getRotation()
org.webrtc.PeerConnectionFactory: boolean startAecDump(int,int)
org.webrtc.EglThread$RenderUpdate: void update(boolean)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: java.lang.Byte[] getByte(int)
org.webrtc.MediaConstraints: java.lang.String stringifyKeyValuePairList(java.util.List)
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState fromNativeIndex(int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean access$302(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer,boolean)
org.webrtc.EglBase$-CC: org.webrtc.EglBase create()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionCreateAnswer(java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type fromCanonicalForm(java.lang.String)
org.webrtc.PeerConnection$Observer$-CC: void $default$onAddTrack(org.webrtc.PeerConnection$Observer,org.webrtc.RtpReceiver,org.webrtc.MediaStream[])
com.cloudwebrtc.webrtc.GetUserMediaImpl$5: void onStop()
org.webrtc.audio.WebRtcAudioEffects: void release()
org.webrtc.MediaCodecWrapper: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)
org.webrtc.audio.WebRtcAudioRecord: void reportWebRtcAudioRecordStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode,java.lang.String)
org.webrtc.RtpParameters$Codec: int getPayloadType()
org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback: void onWebRtcAudioTrackSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
org.webrtc.PeerConnection$RTCConfiguration: boolean getSurfaceIceCandidatesOnIceTransportTypeChanged()
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreScroll(android.view.View,int,int,int[],int[])
io.flutter.plugin.platform.PlatformViewWrapper: int getRenderTargetHeight()
org.webrtc.audio.WebRtcAudioRecord: void logMainParametersExtended()
org.webrtc.LibvpxVp9Encoder: java.util.List scalabilityModes()
org.webrtc.EglRenderer$EglSurfaceCreation: EglRenderer$EglSurfaceCreation(org.webrtc.EglRenderer)
org.webrtc.PeerConnection: org.webrtc.RtpSender nativeCreateSender(java.lang.String,java.lang.String)
org.webrtc.VideoFrame: void release()
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmoji(int)
org.webrtc.EglBase$-CC: org.webrtc.EglBase10 createEgl10(org.webrtc.EglBase10$Context,int[])
org.webrtc.DataChannel: void registerObserver(org.webrtc.DataChannel$Observer)
org.webrtc.PeerConnectionFactory: org.webrtc.VideoTrack createVideoTrack(java.lang.String,org.webrtc.VideoSource)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceConnectionReceivingChange(boolean)
org.webrtc.JavaI420Buffer: org.webrtc.JavaI420Buffer allocate(int,int)
org.webrtc.EglBase14Impl: void releaseSurface()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.PeerConnectionFactory getPeerConnectionFactory()
kotlinx.coroutines.android.AndroidExceptionPreHandler: void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils: boolean lambda$supportsDistortionCorrection$0(int)
io.flutter.embedding.engine.FlutterJNI: void notifyLowMemoryWarning()
org.webrtc.audio.WebRtcAudioRecord: void reportWebRtcAudioRecordError(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: FlutterJNI()
org.webrtc.VideoFrame$TextureBuffer: int getUnscaledWidth()
org.webrtc.MediaSource: void lambda$new$0(long)
org.webrtc.PeerConnection: java.util.List nativeGetSenders()
org.webrtc.EglRenderer: void init(org.webrtc.EglThread,org.webrtc.RendererCommon$GlDrawer,boolean)
androidx.window.extensions.core.util.function.Consumer: void accept(java.lang.Object)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityPaused(android.app.Activity)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: FlutterRTCVideoRenderer$1(com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer)
org.webrtc.RtpTransceiver$RtpTransceiverInit: RtpTransceiver$RtpTransceiverInit(org.webrtc.RtpTransceiver$RtpTransceiverDirection,java.util.List,java.util.List)
org.webrtc.PeerConnection$KeyType: PeerConnection$KeyType(java.lang.String,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: boolean putLocalStream(java.lang.String,org.webrtc.MediaStream)
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioRecord createAudioRecordOnMOrHigher(int,int,int,int,int)
org.webrtc.audio.WebRtcAudioUtils: java.lang.String channelMaskToString(int)
org.webrtc.CryptoOptions$SFrame: boolean getRequireFrameEncryption()
org.webrtc.NetworkChangeDetector$Observer: void onNetworkDisconnect(long)
org.webrtc.EglBase14Impl$EglConnection: void detachCurrent()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderDispose(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.FileVideoCapturer$VideoReaderY4M: void close()
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType getCurrentConnectionType()
org.webrtc.GlGenericDrawer$ShaderType: GlGenericDrawer$ShaderType(java.lang.String,int)
org.webrtc.EglBase10Impl$EglConnection: void retain()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityStopped(android.app.Activity)
org.webrtc.EglBase14Impl: android.opengl.EGLConfig getEglConfig(android.opengl.EGLDisplay,int[])
org.webrtc.VideoEncoderFallback: VideoEncoderFallback(org.webrtc.VideoEncoder,org.webrtc.VideoEncoder)
org.webrtc.AndroidVideoDecoder: AndroidVideoDecoder(org.webrtc.MediaCodecWrapperFactory,java.lang.String,org.webrtc.VideoCodecMimeType,int,org.webrtc.EglBase$Context)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: com.cloudwebrtc.webrtc.utils.ConstraintsMap getMap(int)
org.webrtc.DtmfSender: void dispose()
org.webrtc.CameraEnumerationAndroid$ClosestComparator: int compare(java.lang.Object,java.lang.Object)
org.webrtc.VideoFileRenderer: void renderFrameOnRenderThread(org.webrtc.VideoFrame)
org.webrtc.MediaStreamTrack: void dispose()
org.webrtc.RtpParameters$DegradationPreference: RtpParameters$DegradationPreference(java.lang.String,int)
androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void screenRequestPermissions(android.os.ResultReceiver)
androidx.core.view.WindowInsetsCompat$BuilderImpl: WindowInsetsCompat$BuilderImpl()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: double deltaMillis(long)
org.webrtc.Camera2Capturer: void stopCapture()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$400(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
org.webrtc.CameraCapturer: void printStackTrace()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setAudioAttributesContentType(java.lang.String)
org.webrtc.VideoFrame$I420Buffer: java.nio.ByteBuffer getDataV()
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoEncoder$EncoderInfo getEncoderInfo()
org.webrtc.NativeLibrary$DefaultLoader: boolean load(java.lang.String)
org.webrtc.CameraCapturer$2: void onCameraError(org.webrtc.CameraSession,java.lang.String)
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType fromNativeIndex(int)
io.flutter.embedding.engine.FlutterJNI: void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
org.webrtc.VideoEncoderFactory$-CC: org.webrtc.VideoEncoderFactory$VideoEncoderSelector $default$getEncoderSelector(org.webrtc.VideoEncoderFactory)
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus setRates(org.webrtc.VideoEncoder$RateControlParameters)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View)
org.webrtc.PeerConnection: void addIceCandidate(org.webrtc.IceCandidate,org.webrtc.AddIceObserver)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: int size()
org.webrtc.audio.LowLatencyAudioBufferManager: void maybeAdjustBufferSize(android.media.AudioTrack)
org.webrtc.TextureBufferImpl$RefCountMonitor: void onDestroy(org.webrtc.TextureBufferImpl)
org.webrtc.Camera2Enumerator: org.webrtc.CameraVideoCapturer createCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType valueOf(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void requestPermissions(java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback)
org.webrtc.GlRectDrawer: void drawYuv(int[],float[],int,int,int,int,int,int)
org.webrtc.PeerConnection$IceServer: int hashCode()
com.cloudwebrtc.webrtc.video.camera.SdkCapabilityChecker: boolean supportsDistortionCorrection()
org.webrtc.MediaStream: boolean removeTrack(org.webrtc.AudioTrack)
org.webrtc.ScreenCapturerAndroid: void startCapture(int,int,int)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onLost(android.net.Network)
org.webrtc.CallSessionFileRotatingLogSink: byte[] getLogData(java.lang.String)
org.webrtc.Camera2Session$CameraStateCallback: void onOpened(android.hardware.camera2.CameraDevice)
org.webrtc.VideoProcessor: void onFrameCaptured(org.webrtc.VideoFrame,org.webrtc.VideoProcessor$FrameAdaptationParameters)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void addDefaultAudioConstraints(org.webrtc.MediaConstraints)
org.webrtc.LibvpxVp8Encoder: LibvpxVp8Encoder()
org.webrtc.audio.VolumeLogger$LogVolumeTask: void run()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$start$3()
androidx.core.graphics.drawable.IconCompat$Api30Impl: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)
androidx.core.view.ViewCompat$Api20Impl: void requestApplyInsets(android.view.View)
org.webrtc.PeerConnectionFactory: void dispose()
org.webrtc.PeerConnectionFactory: org.webrtc.RtpCapabilities getRtpReceiverCapabilities(org.webrtc.MediaStreamTrack$MediaType)
androidx.core.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
io.flutter.view.TextureRegistry$GLTextureConsumer: android.graphics.SurfaceTexture getSurfaceTexture()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.lang.String getNextStreamUUID()
org.webrtc.CameraSession$CreateSessionCallback: void onDone(org.webrtc.CameraSession)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values()
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)
org.webrtc.RtpReceiver: void setFrameDecryptor(org.webrtc.FrameDecryptor)
org.webrtc.MediaCodecUtils: java.util.Map getCodecProperties(org.webrtc.VideoCodecMimeType,boolean)
android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
org.webrtc.FrameCryptorAlgorithm: FrameCryptorAlgorithm(java.lang.String,int)
org.webrtc.HardwareVideoEncoderFactory: HardwareVideoEncoderFactory(boolean,boolean)
org.webrtc.RtpCapabilities: java.util.List getCodecs()
androidx.core.view.WindowInsetsCompat$Impl21: WindowInsetsCompat$Impl21(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl21)
org.webrtc.VideoEncoderFactory: org.webrtc.VideoCodecInfo[] getImplementations()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionAddStream(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RtpTransceiver$RtpTransceiverInit: RtpTransceiver$RtpTransceiverInit(org.webrtc.RtpTransceiver$RtpTransceiverDirection,java.util.List)
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: void onActivityPostResumed(android.app.Activity)
org.webrtc.VideoSource$AspectRatio: VideoSource$AspectRatio(int,int)
androidx.core.view.WindowInsetsCompat$Impl: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)
org.webrtc.CameraCapturer$1: void onDone(org.webrtc.CameraSession)
org.webrtc.RtpReceiver: long nativeSetObserver(long,org.webrtc.RtpReceiver$Observer)
org.webrtc.SurfaceTextureHelper$FrameRefMonitor: void onRetainBuffer(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.MediaStreamTrack$MediaType: int getNative()
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setEncodedWidth(int)
org.webrtc.JniHelper: byte[] getStringBytes(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void onDisplayOverlaySurface(int,int,int,int,int)
io.flutter.embedding.engine.FlutterJNI: void nativeCleanupMessageData(long)
org.webrtc.MediaCodecVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numImageReaders()
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate: java.lang.String getWifiSSID()
androidx.core.view.WindowInsetsCompat$Impl20: void copyWindowDataInto(androidx.core.view.WindowInsetsCompat)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void resultError(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState valueOf(java.lang.String)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus release()
io.flutter.embedding.engine.FlutterJNI: boolean nativeShouldDisableAHB()
org.webrtc.RtpTransceiver: void checkRtpTransceiverExists()
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] values()
androidx.core.view.WindowInsetsCompat$Impl: void setStableInsets(androidx.core.graphics.Insets)
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState[] values()
org.webrtc.SoftwareVideoEncoderFactory$1: long createNative(long)
org.webrtc.EglBase10$EglConnection: javax.microedition.khronos.egl.EGL10 getEgl()
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: void handleUIOrientationChange()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: ConstraintsArray(java.util.ArrayList)
org.webrtc.FrameCryptor: void setKeyIndex(int)
io.flutter.embedding.engine.FlutterJNI: void nativeDestroy(long)
androidx.core.view.ViewCompat$Api21Impl: boolean startNestedScroll(android.view.View,int)
org.webrtc.EglThread: boolean lambda$create$1(org.webrtc.EglThread)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void markDirty()
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: void finish()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void addTransceiverOfType(java.lang.String,java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.graphics.Insets getInsets(int)
com.cloudwebrtc.webrtc.record.AudioChannel: AudioChannel(java.lang.String,int)
org.webrtc.CameraCapturer$8: void run()
androidx.core.graphics.drawable.IconCompat$Api28Impl: java.lang.String getResPackage(java.lang.Object)
org.webrtc.EglBase10Impl$EglConnection: EglBase10Impl$EglConnection(javax.microedition.khronos.egl.EGLContext,int[])
org.webrtc.RtpCapabilities$CodecCapability: java.lang.Integer getClockRate()
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int)
org.webrtc.Camera2Enumerator: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)
org.webrtc.PeerConnection: long getNativePeerConnection()
org.webrtc.PeerConnectionFactory: void stopAecDump()
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$Builder builder()
org.webrtc.PeerConnection$AdapterType: PeerConnection$AdapterType(java.lang.String,int,java.lang.Integer)
org.webrtc.audio.WebRtcAudioManager: int getSampleRateForApiLevel(android.media.AudioManager)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void dataChannelSend(java.lang.String,java.lang.String,java.nio.ByteBuffer,java.lang.Boolean)
org.webrtc.ThreadUtils$3: ThreadUtils$3(org.webrtc.ThreadUtils$1Result,java.util.concurrent.Callable,org.webrtc.ThreadUtils$1CaughtException,java.util.concurrent.CountDownLatch)
org.webrtc.VideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: boolean isNull(int)
org.webrtc.VideoEncoder$EncoderInfo: int getRequestedResolutionAlignment()
io.flutter.embedding.android.FlutterTextureView: void setRenderSurface(android.view.Surface)
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfoEx: GetUserMediaImpl$VideoCapturerInfoEx()
org.webrtc.WrappedNativeVideoEncoder: boolean isHardwareEncoder()
org.webrtc.RtpTransceiver: org.webrtc.MediaStreamTrack$MediaType getMediaType()
org.webrtc.SurfaceTextureHelper$FrameRefMonitor: void onDestroyBuffer(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack)
org.webrtc.NativeLibrary: void initialize(org.webrtc.NativeLibraryLoader,java.lang.String)
org.webrtc.PeerConnectionFactory: void nativePrintStackTrace(int)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: android.graphics.Matrix getPlatformViewMatrix()
org.webrtc.SurfaceTextureHelper$1: java.lang.Object call()
org.webrtc.audio.WebRtcAudioRecord: void reportWebRtcAudioRecordInitError(java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: void setTranslationZ(android.view.View,float)
org.webrtc.CryptoOptions: CryptoOptions(boolean,boolean,boolean,boolean)
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraClosed()
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: android.util.DisplayMetrics getRearDisplayMetrics()
com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter: void process(int,int,java.nio.ByteBuffer)
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity valueOf(java.lang.String)
org.webrtc.VideoFileRenderer: void lambda$release$2(java.util.concurrent.CountDownLatch)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: FlutterRenderer$ImageReaderSurfaceProducer(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void attachToGLContext(int)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setOutputSampleRate(int)
org.webrtc.NetworkChangeDetector$NetworkInformation: long getHandle()
org.webrtc.EglRenderer: void createEglSurface(android.graphics.SurfaceTexture)
androidx.core.view.WindowInsetsCompat$Impl: int hashCode()
org.webrtc.VideoFrame$I420Buffer: java.nio.ByteBuffer getDataU()
org.webrtc.SurfaceTextureHelper$1: org.webrtc.SurfaceTextureHelper call()
org.webrtc.VideoTrack: void addSink(org.webrtc.VideoSink)
androidx.window.extensions.core.util.function.Function: java.lang.Object apply(java.lang.Object)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemGestureInsets(androidx.core.graphics.Insets)
org.webrtc.EglRenderer: void removeFrameListener(org.webrtc.EglRenderer$FrameListener)
org.webrtc.PeerConnection$RTCConfiguration: int getIceCandidatePoolSize()
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus reinitDecode(int,int)
org.webrtc.AudioSource: long getNativeAudioSource()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void updateFrameDimensionsAndReportEvents(org.webrtc.VideoFrame)
org.webrtc.PeerConnection: org.webrtc.RtpSender addTrack(org.webrtc.MediaStreamTrack,java.util.List)
org.webrtc.EglThread: void lambda$onRenderWindowOpen$2()
org.webrtc.NetworkMonitor: void addObserver(org.webrtc.NetworkMonitor$NetworkObserver)
org.webrtc.MediaSource: long getNativeMediaSource()
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: void handleOrientationChange(io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation,io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation)
org.webrtc.NativePeerConnectionFactory: long createNativePeerConnection()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceCheckIntervalWeakConnectivity()
org.webrtc.EglBase14Impl: void swapBuffers()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onAddStream(org.webrtc.MediaStream)
org.webrtc.YuvHelper: void I420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: void onSetSuccess()
org.webrtc.VideoFrame: long getTimestampNs()
kotlinx.coroutines.android.AndroidDispatcherFactory: int getLoadPriority()
org.webrtc.audio.AudioDeviceModule: void setMicrophoneMute(boolean)
org.webrtc.RenderSynchronizer: RenderSynchronizer(float)
org.webrtc.EglBase14Impl$EglConnection: EglBase14Impl$EglConnection(android.opengl.EGLContext,int[])
org.webrtc.PeerConnectionFactory: long nativeCreateAudioSource(long,org.webrtc.MediaConstraints)
org.webrtc.VideoFileRenderer: void release()
org.webrtc.RenderSynchronizer$Listener: void onRenderWindowOpen()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.utils.ConstraintsMap getCameraInfo(int)
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference[] $values()
org.webrtc.PeerConnection: java.util.List getSenders()
org.webrtc.SurfaceTextureHelper: void lambda$forceFrame$3()
org.webrtc.RtpParameters$Encoding: java.lang.String getRid()
org.webrtc.RendererCommon: float convertScalingTypeToVisibleFraction(org.webrtc.RendererCommon$ScalingType)
org.webrtc.Logging: void enableLogThreads()
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel valueOf(java.lang.String)
org.webrtc.Camera2Session$SessionState: Camera2Session$SessionState(java.lang.String,int)
org.webrtc.Camera1Capturer: Camera1Capturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler,boolean)
org.webrtc.audio.WebRtcAudioRecord: int logRecordingConfigurations(android.media.AudioRecord,boolean)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String)
org.webrtc.SurfaceViewRenderer: void clearImage()
androidx.core.view.WindowInsetsCompat$Impl20: WindowInsetsCompat$Impl20(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl20)
org.webrtc.EglBase: void swapBuffers(long)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putBoolean(java.lang.String,boolean)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$updatePreferredDeviceList$6()
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions$Builder setEnableEncryptedRtpHeaderExtensions(boolean)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String)
com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter: void addProcessor(com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter$ExternalAudioFrameProcessing)
org.webrtc.GlGenericDrawer: GlGenericDrawer(java.lang.String,org.webrtc.GlGenericDrawer$ShaderCallbacks)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.PeerConnectionObserver getPeerConnectionObserver(java.lang.String)
org.webrtc.FrameCryptor: void nativeUnSetObserver(long)
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy[] $values()
org.webrtc.VideoFrame: int getRotatedWidth()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void merge(java.util.Map)
com.cloudwebrtc.webrtc.StateProvider: io.flutter.plugin.common.BinaryMessenger getMessenger()
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()
org.webrtc.RendererCommon$GlDrawer: void release()
com.cloudwebrtc.webrtc.DataChannelObserver: void onStateChange()
org.webrtc.EglBase14Impl: void createSurface(android.graphics.SurfaceTexture)
org.webrtc.RtpParameters$Encoding: boolean getAdaptivePTime()
org.webrtc.EglBase14Impl: android.opengl.EGLDisplay getEglDisplay()
org.webrtc.audio.VolumeLogger: VolumeLogger(android.media.AudioManager)
org.webrtc.ScreenCapturerAndroid: void createVirtualDisplay()
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getPlayState()
org.webrtc.TextureBufferImpl: int getWidth()
org.webrtc.SurfaceEglRenderer: void surfaceDestroyed(android.view.SurfaceHolder)
org.webrtc.RtpReceiver$Observer: void onFirstPacketReceived(org.webrtc.MediaStreamTrack$MediaType)
org.webrtc.PeerConnection: org.webrtc.SessionDescription nativeGetLocalDescription()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getStatsForTrack(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: CameraEnumerationAndroid$CaptureFormat$FramerateRange(int,int)
com.cloudwebrtc.webrtc.record.FrameCapturer: void lambda$onFrame$0()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: void onCreateSuccess(org.webrtc.SessionDescription)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamTrackRelease(java.lang.String,java.lang.String)
org.webrtc.VideoFrame$I420Buffer: int getBufferType()
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: void stopThread()
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$TextureBuffer$Type getType()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionDispose(java.lang.String)
androidx.window.core.VerificationMode: androidx.window.core.VerificationMode[] values()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setVideoTrack(org.webrtc.VideoTrack)
org.webrtc.H264Utils: boolean isSameH264Profile(java.util.Map,java.util.Map)
org.webrtc.TextureBufferImpl: org.webrtc.YuvConverter getYuvConverter()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: FlutterRenderer$ImageTextureRegistryEntry(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: FlutterWebRTCPlugin()
org.webrtc.PeerConnection: long nativeCreatePeerConnectionObserver(org.webrtc.PeerConnection$Observer)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture()
org.webrtc.PeerConnectionFactory: void nativeInjectLoggable(org.webrtc.JNILogging,int)
org.webrtc.Camera1Capturer: void stopCapture()
org.webrtc.RendererCommon: void adjustOrigin(float[])
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)
org.webrtc.Camera1Capturer: void startCapture(int,int,int)
org.webrtc.Logging: void nativeEnableLogTimeStamps()
org.webrtc.NetworkMonitor$2: void onNetworkConnect(org.webrtc.NetworkChangeDetector$NetworkInformation)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void start()
org.webrtc.MediaCodecUtils: java.lang.Integer selectColorFormat(int[],android.media.MediaCodecInfo$CodecCapabilities)
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType[] values()
org.webrtc.MediaStreamTrack: boolean enabled()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void startCapture(int,int,int)
android.support.v4.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
androidx.core.view.WindowInsetsCompat$Impl28: int hashCode()
org.webrtc.EglBase$ConfigBuilder: int[] createConfigAttributes()
org.webrtc.JavaI420Buffer: void retain()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamAddTrack(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.YuvConverter$ShaderCallbacks: void setPlaneU()
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getMandatorySystemGestureInsets()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getTransceivers(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.GlUtil: int generateTexture(int)
org.webrtc.AndroidVideoDecoder: void deliverByteFrame(int,android.media.MediaCodec$BufferInfo,int,java.lang.Integer)
org.webrtc.PeerConnection$Observer: void onRemoveStream(org.webrtc.MediaStream)
org.webrtc.audio.JavaAudioDeviceModule: boolean isBuiltInNoiseSuppressorSupported()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: MethodCallHandlerImpl$3(com.cloudwebrtc.webrtc.MethodCallHandlerImpl,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.MediaStream: void checkMediaStreamExists()
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: CameraEventsHandler$CameraState(java.lang.String,int)
org.webrtc.NetworkMonitor: void nativeNotifyOfActiveNetworkList(long,org.webrtc.NetworkChangeDetector$NetworkInformation[])
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void setCallback(io.flutter.view.TextureRegistry$SurfaceProducer$Callback)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings()
org.webrtc.ExternalAudioProcessingFactory: long nativeSetCapturePostProcessing(org.webrtc.ExternalAudioProcessingFactory$AudioProcessing)
org.webrtc.VideoFrame$TextureBuffer: org.webrtc.VideoFrame$TextureBuffer applyTransformMatrix(android.graphics.Matrix,int,int)
org.webrtc.NV12Buffer: void release()
org.webrtc.LibvpxVp8Decoder: LibvpxVp8Decoder()
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State valueOf(java.lang.String)
org.webrtc.EglBase10$Context: javax.microedition.khronos.egl.EGLContext getRawContext()
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int)
org.webrtc.EglRenderer: void clearImage(float,float,float,float)
org.webrtc.CameraVideoCapturer$CameraSwitchHandler: void onCameraSwitchError(java.lang.String)
org.webrtc.EglThread: org.webrtc.EglBase$EglConnection lambda$create$0(org.webrtc.EglBase$Context,int[])
org.webrtc.CameraEnumerationAndroid$CaptureFormat: CameraEnumerationAndroid$CaptureFormat(int,int,org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkMonitorAutoDetect$NetworkState getNetworkState()
org.webrtc.EglThread: void release()
org.webrtc.CameraVideoCapturer$MediaRecorderHandler: void onMediaRecorderSuccess()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void disableFpsReduction()
org.webrtc.JavaI420Buffer: org.webrtc.JavaI420Buffer wrap(int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.lang.Runnable)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioTrackErrorCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback)
org.webrtc.Camera2Capturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
org.webrtc.CameraVideoCapturer$MediaRecorderHandler: void onMediaRecorderError(java.lang.String)
com.cloudwebrtc.webrtc.GetUserMediaImpl: boolean access$400(com.cloudwebrtc.webrtc.GetUserMediaImpl)
org.webrtc.FrameCryptor: int nativeGetKeyIndex(long)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map rtpParametersToMap(org.webrtc.RtpParameters)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event valueOf(java.lang.String)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$enableSpeakerphone$7()
org.webrtc.Predicate$-CC: org.webrtc.Predicate $default$and(org.webrtc.Predicate,org.webrtc.Predicate)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus initEncodeInternal()
org.webrtc.MediaCodecWrapper: void setParameters(android.os.Bundle)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemGestureInsets()
org.webrtc.Camera2Session$CameraCaptureCallback: void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: void onSetFailure(java.lang.String)
org.webrtc.CameraCapturer: void dispose()
org.webrtc.EglRenderer: void lambda$addFrameListener$1(org.webrtc.RendererCommon$GlDrawer,org.webrtc.EglRenderer$FrameListener,float,boolean)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setEnableInternalTracer(boolean)
androidx.core.view.WindowInsetsCompat$Impl28: WindowInsetsCompat$Impl28(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl28)
org.webrtc.PeerConnection$Observer: void onSignalingChange(org.webrtc.PeerConnection$SignalingState)
org.webrtc.VideoFrameDrawer: void release()
org.webrtc.audio.WebRtcAudioTrackUtils: void detachOutputCallback(org.webrtc.audio.JavaAudioDeviceModule)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityResumed(android.app.Activity)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.DisplayCutoutCompat getDisplayCutout()
org.webrtc.SdpObserver: void onSetFailure(java.lang.String)
org.webrtc.HardwareVideoEncoderFactory: boolean isHardwareSupportedInCurrentSdk(android.media.MediaCodecInfo,org.webrtc.VideoCodecMimeType)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.MediaStreamTrack getTrackForId(java.lang.String,java.lang.String)
org.webrtc.RtpTransceiver$RtpTransceiverInit: java.util.List getSendEncodings()
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap getBitmap()
org.webrtc.MediaStreamTrack: boolean nativeSetEnabled(long,boolean)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: kotlin.Unit lambda$new$0(java.util.List,com.twilio.audioswitch.AudioDevice)
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$Builder builder()
org.webrtc.FrameCryptorKeyProvider: byte[] ratchetSharedKey(int)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
org.webrtc.SurfaceViewRenderer: void onLayout(boolean,int,int,int,int)
org.webrtc.BaseBitrateAdjuster: BaseBitrateAdjuster()
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioTrack createAudioTrackOnOreoOrHigher(int,int,int,android.media.AudioAttributes)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
org.webrtc.EglThread$HandlerWithExceptionCallbacks: void dispatchMessage(android.os.Message)
org.webrtc.PeerConnectionFactory: long nativeCreateAudioTrack(long,java.lang.String,long)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: ImeSyncDeferringInsetsCallback$AnimationCallback(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
org.webrtc.NV21Buffer: int getHeight()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpSenderSetTrack(java.lang.String,org.webrtc.MediaStreamTrack,io.flutter.plugin.common.MethodChannel$Result,boolean)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setStream(org.webrtc.MediaStream,java.lang.String)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$IceGatheringState nativeIceGatheringState()
org.webrtc.Camera2Capturer: boolean isScreencast()
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamTrackSetEnabled(java.lang.String,boolean,java.lang.String)
org.webrtc.PeerConnection: void nativeStopRtcEventLog()
org.webrtc.WrappedNativeVideoDecoder: long createNative(long)
org.webrtc.PeerConnection$IceServer: java.util.List getUrls()
org.webrtc.EglThread: void onRenderWindowOpen()
org.webrtc.VideoFrame$TextureBuffer: int getTextureId()
org.webrtc.audio.JavaAudioDeviceModule: boolean isBuiltInAcousticEchoCancelerSupported()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putInt(java.lang.String,int)
org.webrtc.NetworkMonitor: void stopMonitoring()
org.webrtc.BuiltinAudioEncoderFactoryFactory: long nativeCreateBuiltinAudioEncoderFactory()
io.flutter.embedding.engine.FlutterJNI: void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
org.webrtc.DataChannel: long nativeBufferedAmount()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5: void onSetFailure(java.lang.String)
org.webrtc.Camera2Session: void start()
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void error(java.lang.String,java.lang.String,java.lang.Object)
org.webrtc.EglThread: org.webrtc.EglBase createEglBaseWithSharedConnection()
org.webrtc.VideoFrameDrawer$YuvUploader: int[] uploadFromBuffer(org.webrtc.VideoFrame$I420Buffer)
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils$SizeFactory: CameraRegionUtils$SizeFactory()
io.flutter.view.TextureRegistry$ImageTextureEntry: void release()
org.webrtc.Camera1Helper: int getCameraId(java.lang.String)
org.webrtc.audio.WebRtcAudioRecord: boolean isAudioSourceMatchingRecordingSession()
org.webrtc.ThreadUtils: void joinUninterruptibly(java.lang.Thread)
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager create(android.app.Activity,int)
org.webrtc.Predicate$3: Predicate$3(org.webrtc.Predicate)
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$I420Buffer lambda$toI420$1()
org.webrtc.Camera1Enumerator: java.util.List getSupportedFormats(int)
org.webrtc.Metrics: Metrics()
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setRotation(int)
org.webrtc.ExternalAudioProcessingFactory: long nativeGetDefaultApm()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.media.MediaFormat getInputFormat()
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus encodeByteBuffer(org.webrtc.VideoFrame,long)
org.webrtc.RtpParameters$Codec: java.lang.Integer getNumChannels()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void release()
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()
org.webrtc.PeerConnectionFactory: boolean nativeStartAecDump(long,int,int)
org.webrtc.RtpTransceiver$RtpTransceiverInit: java.util.List getStreamIds()
org.webrtc.Camera2Session$CaptureSessionCallback: void onConfigured(android.hardware.camera2.CameraCaptureSession)
org.webrtc.Empty: Empty()
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: void run()
io.flutter.view.TextureRegistry$SurfaceProducer: int getWidth()
org.webrtc.MediaStreamTrack$MediaType: MediaStreamTrack$MediaType(java.lang.String,int,int)
org.webrtc.PeerConnection$Observer$-CC: void $default$onStandardizedIceConnectionChange(org.webrtc.PeerConnection$Observer,org.webrtc.PeerConnection$IceConnectionState)
org.webrtc.RtpSender: void dispose()
androidx.core.view.ViewCompat$Api21Impl: void setTransitionName(android.view.View,java.lang.String)
org.webrtc.VideoEncoderWrapper: org.webrtc.VideoEncoder$Callback createEncoderCallback(long)
org.webrtc.MediaConstraints$KeyValuePair: boolean equals(java.lang.Object)
org.webrtc.EglRenderer: void setLayoutAspectRatio(float)
org.webrtc.LibvpxVp8Encoder: boolean isHardwareEncoder()
org.webrtc.VideoEncoder$BitrateAllocation: VideoEncoder$BitrateAllocation(int[][])
org.webrtc.audio.WebRtcAudioRecord: boolean logActiveRecordingConfigs(int,java.util.List)
org.webrtc.CameraCapturer: void reportCameraSwitchError(java.lang.String,org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getUserMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnectionFactory: org.webrtc.VideoSource createVideoSource(boolean)
org.webrtc.PeerConnection: boolean setConfiguration(org.webrtc.PeerConnection$RTCConfiguration)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: NetworkMonitorAutoDetect$SimpleNetworkCallback(org.webrtc.NetworkMonitorAutoDetect,java.util.Set)
org.webrtc.PeerConnection: void createOffer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)
org.webrtc.Camera1Session: void startCapturing()
org.webrtc.MediaCodecVideoDecoderFactory: boolean isH264HighProfileSupported(android.media.MediaCodecInfo)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushByte(byte[])
io.flutter.view.TextureRegistry$ImageTextureEntry: void pushImage(android.media.Image)
org.webrtc.LibvpxVp8Encoder: long createNative(long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverSetCodecPreferences(java.lang.String,java.lang.String,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.FrameCryptor: void checkFrameCryptorExists()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioTrackStateCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback)
org.webrtc.EglBase$-CC: org.webrtc.EglBase$ConfigBuilder configBuilder()
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback: void onWebRtcAudioRecordStart()
androidx.core.view.WindowInsetsCompat$Impl: boolean isConsumed()
org.webrtc.PeerConnection: void nativeClose()
org.webrtc.NativeCapturerObserver: void onCapturerStarted(boolean)
org.webrtc.PeerConnectionFactory: void stopInternalTracingCapture()
org.webrtc.CameraEnumerationAndroid: org.webrtc.Size getClosestSupportedSize(java.util.List,int,int)
org.webrtc.AndroidVideoDecoder: void reformat(android.media.MediaFormat)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus setRates(org.webrtc.VideoEncoder$RateControlParameters)
org.webrtc.video.CustomVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.PeerConnection$SdpSemantics: PeerConnection$SdpSemantics(java.lang.String,int)
com.cloudwebrtc.webrtc.StateProvider: boolean putLocalTrack(java.lang.String,com.cloudwebrtc.webrtc.LocalTrack)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState valueOf(java.lang.String)
org.webrtc.EglRenderer: void swapBuffersOnRenderThread(org.webrtc.VideoFrame,long)
org.webrtc.NativeAndroidVideoTrackSource: void setState(boolean)
com.cloudwebrtc.webrtc.video.camera.SdkCapabilityChecker: boolean supportsSessionConfiguration()
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy[] $values()
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: void start()
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLDisplay getDisplay()
com.cloudwebrtc.webrtc.utils.PermissionUtils$1: PermissionUtils$1(android.os.Handler,com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback)
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind[] values()
org.webrtc.NativeLibrary: NativeLibrary()
org.webrtc.SurfaceTextureHelper: void setTextureSize(int,int)
org.webrtc.MediaConstraints: java.util.List getMandatory()
org.webrtc.EglRenderer: void createEglSurface(android.view.Surface)
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState[] values()
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: void play()
com.cloudwebrtc.webrtc.utils.PermissionUtils: void requestPermissions(android.content.Context,android.app.Activity,java.lang.String[],android.os.ResultReceiver)
org.webrtc.GlGenericDrawer: GlGenericDrawer(java.lang.String,java.lang.String,org.webrtc.GlGenericDrawer$ShaderCallbacks)
org.webrtc.NetworkMonitor: void startMonitoring(android.content.Context,long,java.lang.String)
org.webrtc.audio.WebRtcAudioUtils: void logAudioStateVolume(java.lang.String,android.media.AudioManager)
org.webrtc.EglRenderer: void logW(java.lang.String)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setKeepScreenOn(boolean)
io.flutter.embedding.android.FlutterTextureView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
org.webrtc.GlUtil: GlUtil()
io.flutter.embedding.android.FlutterView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
org.webrtc.CameraVideoCapturer$CameraStatistics$1: CameraVideoCapturer$CameraStatistics$1(org.webrtc.CameraVideoCapturer$CameraStatistics)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus setRateAllocation$lambda$3(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,org.webrtc.VideoEncoder$BitrateAllocation,int)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap decodeImage(java.nio.ByteBuffer,long)
com.cloudwebrtc.webrtc.utils.PermissionUtils$1: void onReceiveResult(int,android.os.Bundle)
org.webrtc.EglBase14Impl$EglConnection: void lambda$new$0()
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setBuffer(java.nio.ByteBuffer,java.lang.Runnable)
org.webrtc.PeerConnectionFactory: org.webrtc.MediaStream createLocalMediaStream(java.lang.String)
org.webrtc.PeerConnection$PeerConnectionState: PeerConnection$PeerConnectionState(java.lang.String,int)
org.webrtc.audio.WebRtcAudioTrack: void doAudioTrackStateCallback(int)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int getNetworkType()
org.webrtc.Camera2Session: int getFrameOrientation()
org.webrtc.GlShader: void release()
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)
org.webrtc.HardwareVideoEncoderFactory: boolean isHardwareSupportedInCurrentSdkH264(android.media.MediaCodecInfo)
org.webrtc.ApplicationContextProvider: android.content.Context getApplicationContext()
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setFrameType(org.webrtc.EncodedImage$FrameType)
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: HiddenLifecycleReference(androidx.lifecycle.Lifecycle)
org.webrtc.RtpReceiver: long nativeGetTrack(long)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void addTrack(org.webrtc.MediaStreamTrack,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback: void onWebRtcAudioRecordStop()
org.webrtc.BaseBitrateAdjuster: int getAdjustedBitrateBps()
org.webrtc.VideoFrame: int getRotatedHeight()
org.webrtc.CameraVideoCapturer$CameraStatistics: void checkThread()
org.webrtc.CameraCapturer$4: void onCameraError(java.lang.String)
org.webrtc.audio.WebRtcAudioManager: WebRtcAudioManager()
org.webrtc.PeerConnection: void dispose()
org.webrtc.CameraEnumerator: boolean isBackFacing(java.lang.String)
org.webrtc.EglBase$ConfigBuilder: org.webrtc.EglBase$ConfigBuilder setOpenGlesVersion(int)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushNull()
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType[] values()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getStats(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.NV21Buffer: void nativeCropAndScale(int,int,int,int,int,int,byte[],int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int)
org.webrtc.EglBase: void createSurface(android.view.Surface)
org.webrtc.NetworkMonitor$1: org.webrtc.NetworkChangeDetector create(org.webrtc.NetworkChangeDetector$Observer,android.content.Context)
org.webrtc.EglThread: android.os.Handler getHandler()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values()
org.webrtc.HardwareVideoEncoderFactory: int getForcedKeyFrameIntervalMs(org.webrtc.VideoCodecMimeType,java.lang.String)
org.webrtc.VideoFrame: VideoFrame(org.webrtc.VideoFrame$Buffer,int,long)
io.flutter.embedding.engine.FlutterJNI: void destroyOverlaySurfaces()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void startListening(android.content.Context,io.flutter.plugin.common.BinaryMessenger,io.flutter.view.TextureRegistry)
org.webrtc.YuvConverter: YuvConverter()
org.webrtc.VideoEncoderFactory$VideoEncoderSelector: org.webrtc.VideoCodecInfo onResolutionChange(int,int)
org.webrtc.PeerConnection: void getStats(org.webrtc.RTCStatsCollectorCallback)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.utils.ConstraintsMap capabilitiestoMap(org.webrtc.RtpCapabilities)
org.webrtc.SurfaceViewRenderer: void setEnableHardwareScaler(boolean)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void finalize()
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String)
xyz.luan.audioplayers.PlayerMode: xyz.luan.audioplayers.PlayerMode[] values()
org.webrtc.VideoFrameDrawer: VideoFrameDrawer()
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$KeyType getKeyType()
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel[] $values()
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: GetUserMediaImpl$4(com.cloudwebrtc.webrtc.GetUserMediaImpl,android.os.Handler,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream)
org.webrtc.VideoFileRenderer$1: void run()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int,boolean)
org.webrtc.JniHelper: java.lang.Object getKey(java.util.Map$Entry)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$ResolutionBitrateLimits[] getResolutionBitrateLimits$lambda$9(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
org.webrtc.BitrateAdjuster: void setTargets(int,double)
org.webrtc.PlatformSoftwareVideoDecoderFactory$1: PlatformSoftwareVideoDecoderFactory$1()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType valueOf(java.lang.String)
org.webrtc.PeerConnectionFactory: void onNetworkThreadReady()
org.webrtc.MediaStreamTrack: org.webrtc.MediaStreamTrack$State nativeGetState(long)
org.webrtc.EglBase10Impl: void detachCurrent()
io.flutter.embedding.engine.FlutterJNI: void setLocalizationPlugin(io.flutter.plugin.localization.LocalizationPlugin)
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.utils.ConstraintsMap getUserAudio(com.cloudwebrtc.webrtc.utils.ConstraintsMap,org.webrtc.MediaStream)
org.webrtc.audio.WebRtcAudioUtils: void logAudioState(java.lang.String,android.content.Context,android.media.AudioManager)
io.flutter.embedding.engine.FlutterJNI: boolean ShouldDisableAHB()
org.webrtc.ScreenCapturerAndroid: void updateVirtualDisplay()
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getSystemGestureInsets()
org.webrtc.HardwareVideoEncoder: java.lang.Thread createOutputThread()
org.webrtc.EglThread: void onRenderWindowClose()
org.webrtc.CameraEnumerationAndroid$1: int diff(java.lang.Object)
org.webrtc.audio.VolumeLogger: void stop()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: FlutterMutatorsStack()
androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()
org.webrtc.PeerConnectionDependencies$Builder: PeerConnectionDependencies$Builder(org.webrtc.PeerConnection$Observer)
org.webrtc.RenderSynchronizer: RenderSynchronizer()
org.webrtc.audio.JavaAudioDeviceModule: void setMicrophoneMute(boolean)
org.webrtc.audio.WebRtcAudioTrack: void logNativeOutputSampleRate(int)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setNetworkControllerFactoryFactory(org.webrtc.NetworkControllerFactoryFactory)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void endRearDisplayPresentationSession()
org.webrtc.EglBase$-CC: org.webrtc.EglBase create(org.webrtc.EglBase$Context)
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$IPAddress[] getIpAddresses()
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State valueOf(java.lang.String)
org.webrtc.GlGenericDrawer$ShaderCallbacks: void onNewShader(org.webrtc.GlShader)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void stopCapture()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: int getInt(java.lang.String)
androidx.lifecycle.ProcessLifecycleOwner$Api29Impl: void registerActivityLifecycleCallbacks(android.app.Activity,android.app.Application$ActivityLifecycleCallbacks)
androidx.core.view.ViewCompat$Api21Impl: android.content.res.ColorStateList getBackgroundTintList(android.view.View)
org.webrtc.MediaSource: org.webrtc.MediaSource$State nativeGetState(long)
org.webrtc.ExternalAudioProcessingFactory: void nativeSetBypassFlagForCapturePost(boolean)
org.webrtc.PeerConnection$Observer: void onIceCandidatesRemoved(org.webrtc.IceCandidate[])
org.webrtc.ThreadUtils$4: ThreadUtils$4(java.lang.Runnable)
org.webrtc.PeerConnection$RTCConfiguration: boolean getEnableImplicitRollback()
org.webrtc.VideoFrame$Buffer: int getHeight()
org.webrtc.audio.WebRtcAudioTrack: void reportWebRtcAudioTrackInitError(java.lang.String)
com.cloudwebrtc.webrtc.CameraEventsHandler: void onFirstFrameAvailable()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int)
org.webrtc.CameraEnumerationAndroid$CaptureFormat: boolean equals(java.lang.Object)
org.webrtc.MediaCodecWrapper: void queueInputBuffer(int,int,int,long,int)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioSource(int)
org.webrtc.Camera2Capturer: void createCameraSession(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType[] values()
org.webrtc.EglThread$HandlerWithExceptionCallbacks: void addExceptionCallback(java.lang.Runnable)
com.cloudwebrtc.webrtc.audio.PlaybackSamplesReadyCallbackAdapter: void addCallback(org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback)
org.webrtc.HardwareVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void removeRearDisplayStatusListener(androidx.window.extensions.core.util.function.Consumer)
org.webrtc.MediaStream: boolean addPreservedTrack(org.webrtc.VideoTrack)
org.webrtc.VideoEncoder$-CC: org.webrtc.VideoCodecStatus $default$setRates(org.webrtc.VideoEncoder,org.webrtc.VideoEncoder$RateControlParameters)
org.webrtc.PeerConnection: org.webrtc.DataChannel nativeCreateDataChannel(java.lang.String,org.webrtc.DataChannel$Init)
org.webrtc.VideoSource: void adaptOutputFormat(int,int,int,int,int)
org.webrtc.CallSessionFileRotatingLogSink: byte[] nativeGetLogData(java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setPlaybackSamplesReadyCallback(org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback)
org.webrtc.VideoFileRenderer: void onFrame(org.webrtc.VideoFrame)
org.webrtc.WrappedNativeI420Buffer: int getStrideV()
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemWindowInsets(androidx.core.graphics.Insets)
org.webrtc.SurfaceTextureHelper: void lambda$returnTextureFrame$5()
org.webrtc.VideoFrame: int getRotation()
org.webrtc.DataChannel$Init: boolean getNegotiated()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void tryAddRendererToVideoTrack()
org.webrtc.RtpTransceiver$RtpTransceiverInit: int getDirectionNativeIndex()
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy[] values()
org.webrtc.RenderSynchronizer: void traceRenderWindowChange()
org.webrtc.Camera2Session$CameraStateCallback: java.lang.String getErrorDescription(int)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsVariationSelector(int)
io.flutter.embedding.engine.FlutterJNI: void onRenderingStopped()
org.webrtc.PeerConnectionFactory: void nativeStopInternalTracingCapture()
org.webrtc.RtpCapabilities$CodecCapability: RtpCapabilities$CodecCapability()
org.webrtc.EglBase14Impl: void createSurface(android.view.Surface)
com.cloudwebrtc.webrtc.video.camera.CameraUtils: void setTorch(java.lang.String,boolean,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.H264Utils: java.util.Map getDefaultH264Params(boolean)
org.webrtc.EglBase$EglConnection$-CC: org.webrtc.EglBase$EglConnection createEgl14(int[])
org.webrtc.NV21Buffer: int getWidth()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: void onFrameCryptionStateChanged(java.lang.String,org.webrtc.FrameCryptor$FrameCryptionState)
androidx.window.layout.adapter.sidecar.DistinctElementSidecarCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
org.webrtc.CameraEnumerator: java.util.List getSupportedFormats(java.lang.String)
org.webrtc.ExternalAudioProcessingFactory: void nativeDestroy()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setTlsCertPolicy(org.webrtc.PeerConnection$TlsCertPolicy)
org.webrtc.PeerConnection: boolean nativeOldGetStats(org.webrtc.StatsObserver,long)
org.webrtc.audio.WebRtcAudioEffects: android.media.audiofx.AudioEffect$Descriptor[] getAvailableEffects()
org.webrtc.PeerConnection: void nativeNewGetStatsSender(long,org.webrtc.RTCStatsCollectorCallback)
org.webrtc.WrappedNativeI420Buffer: int getWidth()
org.webrtc.Camera1Session: void updateCameraParameters(android.hardware.Camera,android.hardware.Camera$Parameters,org.webrtc.CameraEnumerationAndroid$CaptureFormat,org.webrtc.Size,boolean)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: org.webrtc.SurfaceTextureHelper access$000(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String)
org.webrtc.CapturerObserver: void onFrameCaptured(org.webrtc.VideoFrame)
org.webrtc.PeerConnection: void getStats(org.webrtc.RtpSender,org.webrtc.RTCStatsCollectorCallback)
org.webrtc.audio.VolumeLogger$LogVolumeTask: VolumeLogger$LogVolumeTask(org.webrtc.audio.VolumeLogger,int,int)
org.webrtc.SurfaceViewRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setVideoEncoderFactory(org.webrtc.VideoEncoderFactory)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void createDataChannel(java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$onFrame$1(org.webrtc.VideoFrame)
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState valueOf(java.lang.String)
org.webrtc.NetworkStatePredictorFactoryFactory: long createNativeNetworkStatePredictorFactory()
androidx.core.view.ViewCompat$Api21Impl: float getElevation(android.view.View)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void onFrame(org.webrtc.VideoFrame)
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void lambda$error$1(java.lang.String,java.lang.String,java.lang.Object)
org.webrtc.video.CustomVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.SurfaceTextureHelper: void lambda$stopListening$1()
org.webrtc.EglBase10$EglConnection: javax.microedition.khronos.egl.EGLDisplay getDisplay()
org.webrtc.EglBase14Impl: int surfaceHeight()
org.webrtc.SimulcastVideoEncoder: long nativeCreateEncoder(long,org.webrtc.VideoEncoderFactory,org.webrtc.VideoEncoderFactory,org.webrtc.VideoCodecInfo)
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void lambda$new$0(android.net.wifi.p2p.WifiP2pGroup)
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils: java.lang.Integer getControlMaxRegionsAutoExposure(android.hardware.camera2.CameraCharacteristics)
org.webrtc.SurfaceTextureHelper: void forceFrame()
org.webrtc.YuvHelper: void I420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy[] $values()
androidx.core.view.ViewCompat$Api28Impl: void setAutofillId(android.view.View,androidx.core.view.autofill.AutofillIdCompat)
org.webrtc.LibvpxVp9Encoder: LibvpxVp9Encoder()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: int getInt(int)
org.webrtc.Camera2Enumerator: java.lang.String[] getDeviceNames()
org.webrtc.WrappedVideoDecoderFactory: WrappedVideoDecoderFactory(org.webrtc.EglBase$Context)
org.webrtc.HardwareVideoEncoderFactory: boolean isHardwareSupportedInCurrentSdkVp8(android.media.MediaCodecInfo)
org.webrtc.PeerConnection$IceServer: java.util.List getTlsEllipticCurves()
androidx.core.view.DisplayCutoutCompat$Api28Impl: android.view.DisplayCutout createDisplayCutout(android.graphics.Rect,java.util.List)
org.webrtc.RenderSynchronizer: void registerListener(org.webrtc.RenderSynchronizer$Listener)
org.webrtc.H264Utils: boolean nativeIsSameH264Profile(java.util.Map,java.util.Map)
org.webrtc.VideoCodecMimeType: java.lang.String mimeType()
org.webrtc.GlTextureFrameBuffer: GlTextureFrameBuffer(int)
org.webrtc.EglBase$EglConnection$-CC: org.webrtc.EglBase$EglConnection createEgl10(int[])
org.webrtc.audio.JavaAudioDeviceModule: void setSpeakerMute(boolean)
org.webrtc.Camera1Capturer: boolean isScreencast()
org.webrtc.DataChannel$Init: int getMaxRetransmits()
org.webrtc.HardwareVideoEncoder$1: void run()
org.webrtc.VideoTrack: void setShouldReceive(boolean)
io.flutter.embedding.engine.FlutterOverlaySurface: int getId()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int access$500(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
org.webrtc.VideoDecoder: org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo)
org.webrtc.Logging: java.util.logging.Logger createFallbackLogger()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture)
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraDisconnected()
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setAudioProcessingFactory(org.webrtc.AudioProcessingFactory)
org.webrtc.Camera2Helper: java.util.List getSupportedFormats(android.hardware.camera2.CameraManager,java.lang.String)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$IceConnectionState iceConnectionState()
org.webrtc.DataChannel$State: DataChannel$State(java.lang.String,int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$102(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: void onCancel(java.lang.Object)
org.webrtc.RtpParameters$Encoding: int getNetworkPriority()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceCreated(long,android.view.Surface)
io.flutter.embedding.engine.FlutterJNI: void nativeImageHeaderCallback(long,int,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String getUIDForStream(org.webrtc.MediaStream)
org.webrtc.VideoFrame$I420Buffer: int getStrideV()
org.webrtc.audio.WebRtcAudioTrack: boolean stopPlayout()
org.webrtc.HardwareVideoEncoderFactory: android.media.MediaCodecInfo findCodecForType(org.webrtc.VideoCodecMimeType)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsRegionalIndicator(int)
org.webrtc.SessionDescription: SessionDescription(org.webrtc.SessionDescription$Type,java.lang.String)
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType[] values()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getSenders(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void checkNotDisposed()
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoCodecStatus release()
com.cloudwebrtc.webrtc.video.LocalVideoTrack$ExternalVideoFrameProcessing: org.webrtc.VideoFrame onFrame(org.webrtc.VideoFrame)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: com.twilio.audioswitch.AudioDevice selectedAudioDevice()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void detachFromGLContext()
org.webrtc.VideoEncoder: org.webrtc.VideoEncoder$ResolutionBitrateLimits[] getResolutionBitrateLimits()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$2: void run()
org.webrtc.NetworkMonitor: void updateCurrentConnectionType(org.webrtc.NetworkChangeDetector$ConnectionType)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map transceiverToMap(java.lang.String,org.webrtc.RtpTransceiver)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5: void onCreateSuccess(org.webrtc.SessionDescription)
org.webrtc.RtpSender: RtpSender(long)
org.webrtc.PeerConnection$Observer: void onTrack(org.webrtc.RtpTransceiver)
androidx.core.view.WindowInsetsCompat$Impl29: WindowInsetsCompat$Impl29(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl29)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$Settings getStreamSettings()
org.webrtc.NetworkChangeDetector$Observer: NetworkChangeDetector$Observer()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setStream(org.webrtc.MediaStream,java.lang.String,java.lang.String)
org.webrtc.NetworkMonitor$1: NetworkMonitor$1(org.webrtc.NetworkMonitor)
org.webrtc.EglBase10Impl$EglConnection: void lambda$new$0()
org.webrtc.SurfaceEglRenderer: void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer)
android.support.v4.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
org.webrtc.PeerConnectionFactory: void nativeShutdownInternalTracer()
org.webrtc.ScreenCapturerAndroid: void checkNotDisposed()
androidx.core.app.CoreComponentFactory: CoreComponentFactory()
org.webrtc.Camera1Capturer: void createCameraSession(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioTrack createAudioTrackBeforeOreo(int,int,int,android.media.AudioAttributes)
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType valueOf(java.lang.String)
org.webrtc.DataChannel: boolean nativeSend(byte[],boolean)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState,android.view.View$OnFocusChangeListener,boolean)
org.webrtc.MediaStream: boolean addTrack(org.webrtc.VideoTrack)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode[] $values()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpSenderSetStreams(java.lang.String,java.lang.String,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.FrameCryptorKeyProvider: void checkKeyProviderExists()
androidx.core.view.WindowInsetsCompat$Impl28: boolean equals(java.lang.Object)
androidx.core.view.WindowInsetsCompat$Impl: void setRootViewData(androidx.core.graphics.Insets)
org.webrtc.LibvpxVp9Decoder: LibvpxVp9Decoder()
org.webrtc.RenderSynchronizer: void removeListener(org.webrtc.RenderSynchronizer$Listener)
org.webrtc.PeerConnection$CandidateNetworkPolicy: PeerConnection$CandidateNetworkPolicy(java.lang.String,int)
org.webrtc.NativeAndroidVideoTrackSource: org.webrtc.VideoProcessor$FrameAdaptationParameters nativeAdaptFrame(long,int,int,int,long)
org.webrtc.PeerConnection: java.util.List getReceivers()
org.webrtc.VideoFrameDrawer: org.webrtc.VideoFrame$Buffer prepareBufferForViewportSize(org.webrtc.VideoFrame$Buffer,int,int)
org.webrtc.VideoDecoder: org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setScheduler(java.util.concurrent.ScheduledExecutorService)
org.webrtc.RendererCommon$ScalingType: RendererCommon$ScalingType(java.lang.String,int)
androidx.core.view.WindowInsetsCompat$Impl20: void setOverriddenInsets(androidx.core.graphics.Insets[])
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType getConnectionType(boolean,int,int)
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics[] values()
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy[] values()
org.webrtc.RtpReceiver: org.webrtc.RtpParameters getParameters()
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.Integer getFocusModeForString(java.lang.String)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void drainEncoder()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.media.projection.MediaProjection$Callback access$400(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int)
androidx.window.area.reflectionguard.ExtensionWindowAreaPresentationRequirements: void setPresentationView(android.view.View)
org.webrtc.PeerConnectionFactory: long getNativePeerConnectionFactory()
org.webrtc.TextureBufferImpl: org.webrtc.TextureBufferImpl applyTransformMatrix(android.graphics.Matrix,int,int)
org.webrtc.RendererCommon$RendererEvents: void onFirstFrameRendered()
org.webrtc.Camera1Session$2: void lambda$onPreviewFrame$0(byte[])
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer getDataU()
org.webrtc.EglBase10Impl: void createSurface(android.graphics.SurfaceTexture)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean supportNetworkCallback()
org.webrtc.Camera2Capturer: Camera2Capturer(android.content.Context,java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
org.webrtc.audio.JavaAudioDeviceModule: long nativeCreateAudioDeviceModule(android.content.Context,android.media.AudioManager,org.webrtc.audio.WebRtcAudioRecord,org.webrtc.audio.WebRtcAudioTrack,int,int,boolean,boolean)
org.webrtc.Camera2Session$CameraStateCallback: Camera2Session$CameraStateCallback(org.webrtc.Camera2Session)
io.flutter.view.TextureRegistry$SurfaceProducer: boolean handlesCropAndRotation()
org.webrtc.IceCandidate: java.lang.String getSdp()
org.webrtc.EglBase$-CC: org.webrtc.EglBase create(org.webrtc.EglBase$EglConnection)
androidx.window.layout.adapter.sidecar.SidecarCompat$TranslatingCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback: void onWebRtcAudioRecordError(java.lang.String)
org.webrtc.GlGenericDrawer: org.webrtc.GlShader createShader(org.webrtc.GlGenericDrawer$ShaderType)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback: void onWebRtcAudioTrackStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode,java.lang.String)
org.webrtc.DtmfSender: java.lang.String tones()
org.webrtc.YuvHelper: void nativeI420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
androidx.core.app.RemoteActionCompat: RemoteActionCompat()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int access$600(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
org.webrtc.EglBase10$EglConnection: javax.microedition.khronos.egl.EGLConfig getConfig()
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabledInNative(boolean)
org.webrtc.RefCountDelegate: void release()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.app.Activity getActivity()
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoFrame$I420Buffer allocateI420Buffer(int,int)
org.webrtc.Camera2Session$CaptureSessionCallback: void chooseStabilizationMode(android.hardware.camera2.CaptureRequest$Builder)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: FlutterRTCFrameCryptor$FrameCryptorStateObserver(com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor,io.flutter.plugin.common.BinaryMessenger,java.lang.String)
org.webrtc.ThreadUtils$4: java.lang.Void call()
androidx.core.view.WindowInsetsCompat$Impl28: WindowInsetsCompat$Impl28(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessage(java.lang.String,java.nio.ByteBuffer,int,long)
org.webrtc.JavaI420Buffer: int getHeight()
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void onWifiP2pStateChange(int)
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterTexture(long,long,java.lang.ref.WeakReference)
org.webrtc.RtpCapabilities$CodecCapability: java.lang.Integer getNumChannels()
org.webrtc.ExternalAudioProcessingFactory: void destroy()
org.webrtc.VideoEncoder$ResolutionBitrateLimits: VideoEncoder$ResolutionBitrateLimits(int,int,int,int)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties)
org.webrtc.NativeAndroidVideoTrackSource: void adaptOutputFormat(org.webrtc.VideoSource$AspectRatio,java.lang.Integer,org.webrtc.VideoSource$AspectRatio,java.lang.Integer,java.lang.Integer)
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.String getAudioGroupId(android.media.AudioDeviceInfo)
org.webrtc.RtcCertificatePem: java.lang.String getPrivateKey()
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: void onReceiveResult(int,android.os.Bundle)
org.webrtc.EglBase$-CC: int getOpenGlesVersionFromConfig(int[])
org.webrtc.ExternalAudioProcessingFactory: void checkExternalAudioProcessorExists()
org.webrtc.CallSessionFileRotatingLogSink: long nativeAddSink(java.lang.String,int,int)
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState[] values()
org.webrtc.SoftwareVideoDecoderFactory$1: long createNative(long)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: void onSetSuccess()
org.webrtc.AudioTrack: void nativeSetVolume(long,double)
org.webrtc.RtpParameters: java.util.List getEncodings()
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: AudioSamplesInterceptor()
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus updateBitrate()
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(java.util.List,org.webrtc.MediaConstraints,org.webrtc.PeerConnection$Observer)
org.webrtc.LibvpxVp9Encoder: boolean isHardwareEncoder()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putMap(java.lang.String,java.util.Map)
org.webrtc.VideoFileRenderer: VideoFileRenderer(java.lang.String,int,int,org.webrtc.EglBase$Context)
org.webrtc.WrappedNativeVideoDecoder: WrappedNativeVideoDecoder()
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState fromNativeIndex(int)
xyz.luan.audioplayers.ReleaseMode: xyz.luan.audioplayers.ReleaseMode valueOf(java.lang.String)
androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.core.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
org.webrtc.TextureBufferImpl: int getTextureId()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onDestroy(androidx.lifecycle.LifecycleOwner)
org.webrtc.JavaI420Buffer: void checkCapacity(java.nio.ByteBuffer,int,int,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onDataChannel(org.webrtc.DataChannel)
org.webrtc.audio.WebRtcAudioRecord: WebRtcAudioRecord(android.content.Context,android.media.AudioManager)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void remove()
org.webrtc.VideoEncoder$EncodeInfo: VideoEncoder$EncodeInfo(org.webrtc.EncodedImage$FrameType[])
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderSetSharedKey(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection$IceServer: java.lang.String getHostname()
com.cloudwebrtc.webrtc.LocalTrack: void setEnabled(boolean)
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context,boolean,org.webrtc.YuvConverter)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
org.webrtc.Camera2Enumerator: boolean isSupported(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeatures(int)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putNull(java.lang.String)
org.webrtc.Camera2Helper: org.webrtc.Size findClosestCaptureFormat(android.hardware.camera2.CameraManager,java.lang.String,int,int)
org.webrtc.BaseBitrateAdjuster: double getAdjustedFramerateFps()
org.webrtc.CameraSession$Events: void onCameraDisconnected(org.webrtc.CameraSession)
io.flutter.embedding.engine.FlutterJNI: void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils$MeteringRectangleFactory: CameraRegionUtils$MeteringRectangleFactory()
org.webrtc.DataChannel$Observer: void onStateChange()
org.webrtc.VideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.audio.WebRtcAudioRecord: void setNativeAudioRecord(long)
org.webrtc.Camera1Enumerator: int getCameraIndex(java.lang.String)
org.webrtc.DataChannel$Init: boolean getOrdered()
org.webrtc.EglBase10Impl$EglConnection: void makeCurrent(javax.microedition.khronos.egl.EGLSurface)
org.webrtc.RtpReceiver: RtpReceiver(long)
org.webrtc.Logging: Logging()
org.webrtc.MediaCodecUtils: boolean isSoftwareOnlyQOrHigher(android.media.MediaCodecInfo)
org.webrtc.NetworkChangeDetector$NetworkInformation: java.lang.String getName()
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void release()
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState[] $values()
org.webrtc.SurfaceEglRenderer: void pauseVideo()
org.webrtc.FrameCryptorKeyProvider: void dispose()
org.webrtc.SurfaceTextureHelper: void stopListening()
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type[] values()
org.webrtc.audio.WebRtcAudioRecord: int initRecording(int,int)
org.webrtc.HardwareVideoEncoder: java.lang.String getImplementationName()
org.webrtc.audio.AudioDeviceModule$-CC: boolean $default$setNoiseSuppressorEnabled(org.webrtc.audio.AudioDeviceModule,boolean)
org.webrtc.RtpReceiver: void nativeUnsetObserver(long,long)
org.webrtc.PeerConnectionFactory: org.webrtc.RtpCapabilities nativeGetRtpReceiverCapabilities(long,org.webrtc.MediaStreamTrack$MediaType)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] values()
androidx.core.view.WindowInsetsCompat$Impl20: void setRootViewData(androidx.core.graphics.Insets)
io.flutter.view.AccessibilityViewEmbedder: void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy[] $values()
org.webrtc.EglBase$-CC: org.webrtc.EglBase14 createEgl14(int[])
org.webrtc.EglThread: org.webrtc.EglThread create(org.webrtc.EglThread$ReleaseMonitor,org.webrtc.EglBase$Context,int[],org.webrtc.RenderSynchronizer)
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack$MediaType,org.webrtc.RtpTransceiver$RtpTransceiverInit)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus resetCodec(int,int,boolean)
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjection getMediaProjection()
org.webrtc.SurfaceTextureHelper$1: SurfaceTextureHelper$1(org.webrtc.EglBase$Context,android.os.Handler,boolean,org.webrtc.YuvConverter,org.webrtc.SurfaceTextureHelper$FrameRefMonitor,java.lang.String)
org.webrtc.CallSessionFileRotatingLogSink: void dispose()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void removeRendererFromVideoTrack()
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int)
org.webrtc.RtpTransceiver: org.webrtc.MediaStreamTrack$MediaType nativeGetMediaType(long)
org.webrtc.CameraCapturer: void changeCaptureFormat(int,int,int)
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem generateCertificate(long)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3: OrientationAwareScreenCapturer$3(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap nativeGetBitmap(long)
org.webrtc.RtpSender: long nativeGetTrack(long)
androidx.core.view.WindowInsetsCompat$Impl21: WindowInsetsCompat$Impl21(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets dispatchApplyWindowInsets(android.view.View,android.view.WindowInsets)
org.webrtc.EglBase10Impl: EglBase10Impl(org.webrtc.EglBase10Impl$EglConnection)
androidx.core.view.WindowInsetsCompat$Impl20: boolean isRound()
org.webrtc.audio.WebRtcAudioRecord: int getBytesPerSample(int)
org.webrtc.EglBase: org.webrtc.EglBase$Context getEglBaseContext()
org.webrtc.SimulcastVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State valueOf(java.lang.String)
org.webrtc.SurfaceEglRenderer: SurfaceEglRenderer(java.lang.String)
org.webrtc.RtpSender: java.lang.String nativeGetId(long)
org.webrtc.PeerConnectionFactory$Options: boolean getDisableEncryption()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: SimulcastVideoEncoderFactoryWrapper$FallbackFactory(org.webrtc.VideoEncoderFactory)
io.flutter.embedding.engine.FlutterJNI: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.Integer getAudioAttributesContentTypeFromString(java.lang.String)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void requestCapturePermission(io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader getImageReader()
com.cloudwebrtc.webrtc.video.camera.CameraUtils$MeteringRectangleFactory: CameraUtils$MeteringRectangleFactory()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmoji(int)
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: java.lang.String getMapStrValue(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String)
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState valueOf(java.lang.String)
org.webrtc.VideoFrame$TextureBuffer$Type: int getGlTarget()
org.webrtc.VideoTrack: void dispose()
io.flutter.embedding.engine.FlutterJNI: void scheduleFrame()
org.webrtc.audio.WebRtcAudioTrack: boolean setStreamVolume(int)
org.webrtc.GlTextureFrameBuffer: void setSize(int,int)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioRecordErrorCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: FlutterRTCFrameCryptor(com.cloudwebrtc.webrtc.StateProvider)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: int access$000(com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer)
org.webrtc.FileVideoCapturer: void tick()
org.webrtc.TimestampAligner: long nativeRtcTimeNanos()
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback: void onWebRtcAudioRecordStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode,java.lang.String)
org.webrtc.LibaomAv1Encoder: java.util.List nativeGetSupportedScalabilityModes()
io.flutter.embedding.android.FlutterView: void setDelegate(io.flutter.embedding.android.FlutterViewDelegate)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseLowLatency(boolean)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: java.util.List availableAudioDevices()
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: void detachCallback(java.lang.Integer)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus setRates$lambda$8(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,org.webrtc.VideoEncoder$RateControlParameters)
org.webrtc.NativeAndroidVideoTrackSource: void setIsScreencast(boolean)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: java.lang.String frameCryptorErrorStateToString(org.webrtc.FrameCryptor$FrameCryptionState)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$TcpCandidatePolicy getTcpCandidatePolicy()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void waitOnFence(android.media.Image)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void install()
org.webrtc.EglRenderer: void lambda$releaseEglSurface$3(java.lang.Runnable)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void stopRecording(java.lang.Integer)
org.webrtc.NV12Buffer: void nativeCropAndScale(int,int,int,int,int,int,java.nio.ByteBuffer,int,int,int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int)
org.webrtc.VideoCodecInfo: boolean equals(java.lang.Object)
androidx.core.view.ViewCompat$Api23Impl: int getScrollIndicators(android.view.View)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void registerDataChannelObserver(java.lang.String,org.webrtc.DataChannel)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onLosing(android.net.Network,int)
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGL10 getEgl()
io.flutter.view.TextureRegistry$SurfaceProducer: void setSize(int,int)
org.webrtc.HardwareVideoEncoder: boolean isSemiPlanar(int)
org.webrtc.NetworkMonitor$2: void onConnectionTypeChanged(org.webrtc.NetworkChangeDetector$ConnectionType)
org.webrtc.VideoFrame: org.webrtc.VideoFrame$Buffer getBuffer()
androidx.core.app.NotificationManagerCompat$Api24Impl: boolean areNotificationsEnabled(android.app.NotificationManager)
org.webrtc.MediaCodecVideoDecoderFactory: MediaCodecVideoDecoderFactory(org.webrtc.EglBase$Context,org.webrtc.Predicate)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void sendEvent(java.lang.Object)
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy[] values()
org.webrtc.NetworkChangeDetector: void destroy()
org.webrtc.audio.WebRtcAudioRecord: void setMicrophoneMute(boolean)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkChangeDetector$IPAddress[] getIPAddresses(android.net.LinkProperties)
io.flutter.embedding.engine.FlutterJNI: void updateRefreshRate()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onTrack(org.webrtc.RtpTransceiver)
org.webrtc.LibvpxVp9Encoder: long nativeCreate(long)
org.webrtc.FrameCryptorKeyProvider: boolean setKey(java.lang.String,int,byte[])
org.webrtc.RtpParameters$Rtcp: java.lang.String getCname()
org.webrtc.RtpTransceiver: boolean nativeSetDirection(long,org.webrtc.RtpTransceiver$RtpTransceiverDirection)
org.webrtc.SurfaceTextureHelper: void returnTextureFrame()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: long getDefaultNetId()
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType[] $values()
org.webrtc.VideoDecoderWrapper: void lambda$createDecoderCallback$0(long,org.webrtc.VideoFrame,java.lang.Integer,java.lang.Integer)
org.webrtc.NetworkMonitor$2: void onNetworkDisconnect(long)
org.webrtc.AndroidVideoDecoder: void stopOnOutputThread(java.lang.Exception)
org.webrtc.RtpTransceiver: org.webrtc.RtpTransceiver$RtpTransceiverDirection nativeDirection(long)
com.cloudwebrtc.webrtc.video.camera.CameraUtils: java.lang.Object getPrivateProperty(java.lang.Class,java.lang.Object,java.lang.String)
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils$SizeFactory: android.util.Size create(int,int)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: android.net.Network[] getAllNetworks()
org.webrtc.EglBase14Impl$EglConnection: EglBase14Impl$EglConnection()
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: PermissionUtils$RequestPermissionsFragment()
org.webrtc.VideoProcessor$-CC: org.webrtc.VideoFrame applyFrameAdaptationParameters(org.webrtc.VideoFrame,org.webrtc.VideoProcessor$FrameAdaptationParameters)
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfoEx getCapturerInfo(java.lang.String)
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType[] $values()
org.webrtc.ExternalAudioProcessingFactory$AudioProcessing: void initialize(int,int)
org.webrtc.RendererCommon$VideoLayoutMeasure: void setScalingType(org.webrtc.RendererCommon$ScalingType)
org.webrtc.RefCountDelegate: RefCountDelegate(java.lang.Runnable)
org.webrtc.MediaStreamTrack: org.webrtc.MediaStreamTrack$State state()
org.webrtc.SurfaceViewRenderer: void surfaceDestroyed(android.view.SurfaceHolder)
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void startRearDisplaySession(android.app.Activity,androidx.window.extensions.core.util.function.Consumer)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory nativeCreatePeerConnectionFactory(android.content.Context,org.webrtc.PeerConnectionFactory$Options,long,long,long,org.webrtc.VideoEncoderFactory,org.webrtc.VideoDecoderFactory,long,long,long,long,long)
com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter$ExternalAudioFrameProcessing: void process(int,int,java.nio.ByteBuffer)
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType getUnderlyingConnectionTypeForVpn(org.webrtc.NetworkMonitorAutoDetect$NetworkState)
org.webrtc.TextureBufferImpl$1: void onRelease(org.webrtc.TextureBufferImpl)
org.webrtc.MediaCodecUtils: boolean isSoftwareOnly(android.media.MediaCodecInfo)
com.cloudwebrtc.webrtc.utils.PermissionUtils: void access$000(android.os.ResultReceiver,int,java.lang.String[],int[])
org.webrtc.YuvHelper: YuvHelper()
org.webrtc.RendererCommon$GlDrawer: void drawYuv(int[],float[],int,int,int,int,int,int)
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: void attachCallback(java.lang.Integer,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
org.webrtc.TextureBufferImpl: void lambda$new$0(org.webrtc.TextureBufferImpl$RefCountMonitor)
org.webrtc.EglBase10Impl: void createPbufferSurface(int,int)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPaused(android.app.Activity)
org.webrtc.FileVideoCapturer$VideoReader: void close()
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.ScheduledExecutorService newDefaultScheduler()
androidx.core.view.WindowInsetsCompat$BuilderImpl20: void setStableInsets(androidx.core.graphics.Insets)
com.cloudwebrtc.webrtc.video.LocalVideoTrack: void onFrameCaptured(org.webrtc.VideoFrame)
org.webrtc.VideoEncoderWrapper: void nativeOnEncodedFrame(long,org.webrtc.EncodedImage)
org.webrtc.Logging: void enableLogToDebugOutput(org.webrtc.Logging$Severity)
org.webrtc.MediaCodecWrapper: void start()
org.webrtc.CallSessionFileRotatingLogSink: void nativeDeleteSink(long)
org.webrtc.BitrateAdjuster: double getAdjustedFramerateFps()
org.webrtc.YuvHelper: void I420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int,int,int)
org.webrtc.NetworkMonitor$2: void onNetworkPreference(java.util.List,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.lang.String peerConnectionInit(com.cloudwebrtc.webrtc.utils.ConstraintsMap,com.cloudwebrtc.webrtc.utils.ConstraintsMap)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver$1: FlutterRTCFrameCryptor$FrameCryptorStateObserver$1(com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver,com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor)
org.webrtc.ThreadUtils$ThreadChecker: ThreadUtils$ThreadChecker()
org.webrtc.ThreadUtils: boolean joinUninterruptibly(java.lang.Thread,long)
org.webrtc.VideoDecoder: long createNative(long)
org.webrtc.Predicate$-CC: org.webrtc.Predicate $default$or(org.webrtc.Predicate,org.webrtc.Predicate)
org.webrtc.AndroidVideoDecoder: java.lang.Thread createOutputThread()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()
org.webrtc.PeerConnection$Observer: void onIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState)
org.webrtc.PeerConnectionFactory: void printStackTraces()
org.webrtc.NetworkChangeDetector: org.webrtc.NetworkChangeDetector$ConnectionType getCurrentConnectionType()
org.webrtc.SdpObserver: void onCreateFailure(java.lang.String)
org.webrtc.NetworkMonitor: void removeNetworkObserver(org.webrtc.NetworkMonitor$NetworkObserver)
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState[] values()
org.webrtc.MediaCodecVideoDecoderFactory: android.media.MediaCodecInfo findCodecForType(org.webrtc.VideoCodecMimeType)
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem nativeGenerateCertificate(org.webrtc.PeerConnection$KeyType,long)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: boolean isScreencast()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int)
org.webrtc.SurfaceViewRenderer: void disableFpsReduction()
io.flutter.embedding.engine.FlutterJNI: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setNativeLibraryName(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.PeerConnection getPeerConnection(java.lang.String)
org.webrtc.RtpParameters: org.webrtc.RtpParameters$DegradationPreference getDegradationPreference()
org.webrtc.PeerConnectionDependencies: org.webrtc.SSLCertificateVerifier getSSLCertificateVerifier()
org.webrtc.CameraEnumerationAndroid$2: int diff(java.lang.Object)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void close()
org.webrtc.VideoDecoder$Settings: VideoDecoder$Settings(int,int,int)
org.webrtc.Camera1Capturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
org.webrtc.AudioSource: AudioSource(long)
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState valueOf(java.lang.String)
org.webrtc.PeerConnection: org.webrtc.RtcCertificatePem getCertificate()
org.webrtc.NativeCapturerObserver: NativeCapturerObserver(long)
com.cloudwebrtc.webrtc.DataChannelObserver: void onMessage(org.webrtc.DataChannel$Buffer)
org.webrtc.CameraVideoCapturer$CameraSwitchHandler: void onCameraSwitchDone(boolean)
org.webrtc.NetworkControllerFactoryFactory: long createNativeNetworkControllerFactory()
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer getDataU()
com.cloudwebrtc.webrtc.video.LocalVideoTrack: void setSink(org.webrtc.VideoSink)
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType[] $values()
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.PeerConnectionDependencies)
org.webrtc.RefCounted: void retain()
org.webrtc.PeerConnection: void nativeNewGetStatsReceiver(long,org.webrtc.RTCStatsCollectorCallback)
org.webrtc.SurfaceEglRenderer: void disableFpsReduction()
io.flutter.embedding.engine.FlutterJNI: void nativeLoadDartDeferredLibrary(long,int,java.lang.String[])
org.webrtc.WrappedNativeI420Buffer: void release()
org.webrtc.VideoFrame$TextureBuffer: android.graphics.Matrix getTransformMatrix()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: MethodCallHandlerImpl$1(com.cloudwebrtc.webrtc.MethodCallHandlerImpl)
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager$1: DeviceOrientationManager$1(com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: void onReceiveResult(int,android.os.Bundle)
org.webrtc.RendererCommon$RendererEvents: void onFrameResolutionChanged(int,int,int)
org.webrtc.VideoCodecInfo: java.lang.String toString()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader33()
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions createCryptoOptions()
androidx.profileinstaller.FileSectionType: androidx.profileinstaller.FileSectionType valueOf(java.lang.String)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void initVideoEncoder()
org.webrtc.Camera2Session: void checkIsOnCameraThread()
org.webrtc.SoftwareVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void createVirtualDisplay()
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics getViewportMetrics()
com.cloudwebrtc.webrtc.audio.LocalAudioTrack: LocalAudioTrack(org.webrtc.AudioTrack)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setQp(java.lang.Integer)
io.flutter.plugins.GeneratedPluginRegistrant: GeneratedPluginRegistrant()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void release()
org.webrtc.WrappedVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.EncodedImage: void retain()
androidx.core.view.WindowInsetsCompat$BuilderImpl20: void setSystemWindowInsets(androidx.core.graphics.Insets)
org.webrtc.audio.WebRtcAudioTrackUtils: void attachOutputCallback(org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback,org.webrtc.audio.JavaAudioDeviceModule)
org.webrtc.AndroidVideoDecoder: org.webrtc.SurfaceTextureHelper createSurfaceTextureHelper()
org.webrtc.EglBase: void swapBuffers()
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel[] values()
org.webrtc.CameraCapturer: void checkIsOnCameraThread()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void changeCaptureFormat(int,int,int)
org.webrtc.DynamicBitrateAdjuster: void reportEncodedFrame(int)
org.webrtc.MediaStream: boolean removeTrack(org.webrtc.VideoTrack)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$100(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode valueOf(java.lang.String)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context,boolean)
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getVisibleInsets(android.view.View)
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType[] values()
com.cloudwebrtc.webrtc.record.FrameCapturer: FrameCapturer(org.webrtc.VideoTrack,java.io.File,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglRenderer: EglRenderer(java.lang.String)
org.webrtc.PeerConnectionFactory: PeerConnectionFactory(long)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void dispose()
org.webrtc.CameraEnumerationAndroid$1: CameraEnumerationAndroid$1(int)
org.webrtc.FileVideoCapturer: void startCapture(int,int,int)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$SignalingState signalingState()
org.webrtc.HardwareVideoEncoder: void deliverEncodedImage()
org.webrtc.TextureBufferImpl: TextureBufferImpl(int,int,org.webrtc.VideoFrame$TextureBuffer$Type,int,android.graphics.Matrix,android.os.Handler,org.webrtc.YuvConverter,java.lang.Runnable)
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType[] $values()
org.webrtc.AudioTrack: void nativeRemoveSink(long,long)
org.webrtc.Logging: void e(java.lang.String,java.lang.String,java.lang.Throwable)
org.webrtc.Predicate$2: boolean test(java.lang.Object)
androidx.core.view.ViewCompat$Api28Impl: boolean isScreenReaderFocusable(android.view.View)
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.Integer getAudioModeForString(java.lang.String)
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem generateCertificate(org.webrtc.PeerConnection$KeyType,long)
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type valueOf(java.lang.String)
org.webrtc.EglBase: void createSurface(android.graphics.SurfaceTexture)
org.webrtc.RtpSender: boolean nativeSetTrack(long,long)
org.webrtc.StatsReport: StatsReport(java.lang.String,java.lang.String,double,org.webrtc.StatsReport$Value[])
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI nativeSpawn(long,java.lang.String,java.lang.String,java.lang.String,java.util.List)
org.webrtc.PeerConnection$Observer: void onRenegotiationNeeded()
org.webrtc.Camera2Enumerator: boolean isFrontFacing(java.lang.String)
org.webrtc.SurfaceTextureHelper: void dispose()
org.webrtc.IceCandidate: IceCandidate(java.lang.String,int,java.lang.String)
org.webrtc.CameraVideoCapturer$CameraStatistics: CameraVideoCapturer$CameraStatistics(org.webrtc.SurfaceTextureHelper,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
org.webrtc.SurfaceViewRenderer: void lambda$onFrameResolutionChanged$0(int,int)
org.webrtc.TextureBufferImpl: int getUnscaledHeight()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: long id()
io.flutter.plugin.platform.PlatformViewWrapper: android.view.ViewTreeObserver$OnGlobalFocusChangeListener getActiveFocusListener()
org.webrtc.RTCStats: RTCStats(long,java.lang.String,java.lang.String,java.util.Map)
org.webrtc.PeerConnection: boolean removeTrack(org.webrtc.RtpSender)
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityPaneTitle(android.view.View,java.lang.CharSequence)
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
io.flutter.embedding.engine.FlutterJNI: io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onRenegotiationNeeded()
org.webrtc.ThreadUtils$ThreadChecker: void checkIsOnValidThread()
org.webrtc.HardwareVideoDecoderFactory: HardwareVideoDecoderFactory(org.webrtc.EglBase$Context,org.webrtc.Predicate)
org.webrtc.PeerConnection$RTCConfiguration: boolean getAudioJitterBufferFastAccelerate()
org.webrtc.MediaStream: void removeMediaStreamTrack(java.util.List,long)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: android.net.NetworkRequest createNetworkRequest()
io.flutter.embedding.engine.FlutterJNI: java.lang.String getVMServiceUri()
com.cloudwebrtc.webrtc.video.camera.SdkCapabilityChecker: SdkCapabilityChecker()
org.webrtc.R: R()
org.webrtc.VideoDecoderFallback: long createNative(long)
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type[] values()
org.webrtc.RTCStats: java.lang.String toString()
org.webrtc.DataChannel: org.webrtc.DataChannel$State nativeState()
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType[] $values()
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void removeRearDisplayPresentationStatusListener(androidx.window.extensions.core.util.function.Consumer)
org.webrtc.EglBase10Impl: int surfaceHeight()
org.webrtc.HardwareVideoEncoderFactory: boolean isHardwareSupportedInCurrentSdkVp9(android.media.MediaCodecInfo)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onResume(androidx.lifecycle.LifecycleOwner)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void pruneImageReaderQueue()
io.flutter.embedding.engine.FlutterJNI: void ensureRunningOnMainThread()
org.webrtc.GlUtil: void checkNoGLES2Error(java.lang.String)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType[] values()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3$1: void run()
org.webrtc.DefaultVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: byte[] getData()
org.webrtc.NetworkMonitorAutoDetect: void setWifiManagerDelegateForTests(org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate)
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type[] $values()
org.webrtc.PeerConnection: void getStats(org.webrtc.RtpReceiver,org.webrtc.RTCStatsCollectorCallback)
org.webrtc.Size: java.lang.String toString()
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode[] values()
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: void stop()
org.webrtc.RtpParameters$Codec: java.util.Map getParameters()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderRatchetSharedKey(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$selectAudioOutput$5(java.lang.Class)
org.webrtc.EglBase10Impl: void makeCurrent()
org.webrtc.EglRenderer: void release()
org.webrtc.VideoEncoderFallback: boolean isHardwareEncoder()
org.webrtc.HardwareVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType valueOf(java.lang.String)
com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter: void reset(int)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getStableInsets()
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils: android.graphics.Rect getSensorInfoPreCorrectionActiveArraySize(android.hardware.camera2.CameraCharacteristics)
org.webrtc.PeerConnectionFactory: java.lang.String fieldTrialsFindFullName(java.lang.String)
org.webrtc.CameraCapturer$9: CameraCapturer$9(org.webrtc.CameraCapturer,org.webrtc.CameraSession)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityResumed(android.app.Activity)
com.cloudwebrtc.webrtc.DataChannelObserver: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
org.webrtc.VideoDecoderWrapper: VideoDecoderWrapper()
org.webrtc.NetworkMonitor$2: NetworkMonitor$2(org.webrtc.NetworkMonitor,java.lang.String)
org.webrtc.PeerConnectionFactory: long nativeCreateVideoSource(long,boolean,boolean)
org.webrtc.Camera1Session: Camera1Session(org.webrtc.CameraSession$Events,boolean,android.content.Context,org.webrtc.SurfaceTextureHelper,int,android.hardware.Camera,android.hardware.Camera$CameraInfo,org.webrtc.CameraEnumerationAndroid$CaptureFormat,long)
androidx.tracing.TraceApi29Impl: boolean isEnabled()
org.webrtc.ContextUtils: void initialize(android.content.Context)
org.webrtc.YuvConverter: void lambda$convertInternal$0(java.nio.ByteBuffer)
org.webrtc.EglBase14Impl$Context: EglBase14Impl$Context(android.opengl.EGLContext)
org.webrtc.EglBase14$EglConnection: android.opengl.EGLDisplay getDisplay()
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType[] $values()
org.webrtc.NativeAndroidVideoTrackSource: void onFrameCaptured(org.webrtc.VideoFrame)
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLContext createEglContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLContext,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int)
org.webrtc.DynamicBitrateAdjuster: int getAdjustedBitrateBps()
org.webrtc.LibvpxVp8Decoder: long nativeCreateDecoder(long)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: java.util.ArrayList toArrayList()
org.webrtc.VideoEncoder$-CC: org.webrtc.VideoEncoder$EncoderInfo $default$getEncoderInfo(org.webrtc.VideoEncoder)
org.webrtc.Logging: void deleteInjectedLoggable()
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setTappableElementInsets(androidx.core.graphics.Insets)
org.webrtc.VideoFrame$TextureBuffer$-CC: int $default$getUnscaledHeight(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.Camera1Enumerator: java.util.List enumerateFormats(int)
io.flutter.plugin.platform.PlatformViewWrapper: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
org.webrtc.HardwareVideoDecoderFactory: HardwareVideoDecoderFactory(org.webrtc.EglBase$Context)
org.webrtc.MediaStreamTrack: java.lang.String nativeGetKind(long)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setType(int)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: NetworkMonitorAutoDetect$ConnectivityManagerDelegate(android.content.Context,java.util.Set,java.lang.String)
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager$1: void onReceive(android.content.Context,android.content.Intent)
io.flutter.plugin.platform.PlatformViewWrapper: int getRenderTargetWidth()
io.flutter.view.TextureRegistry$SurfaceTextureEntry: long id()
org.webrtc.ThreadUtils$1: ThreadUtils$1(java.lang.Thread)
org.webrtc.EglBase$-CC: org.webrtc.EglBase14 createEgl14(org.webrtc.EglBase14$Context,int[])
org.webrtc.SurfaceTextureHelper: android.os.Handler getHandler()
org.webrtc.RtpParameters: org.webrtc.RtpParameters$Rtcp getRtcp()
org.webrtc.WrappedNativeI420Buffer: WrappedNativeI420Buffer(int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,long)
org.webrtc.MediaStreamTrack: boolean nativeGetEnabled(long)
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)
org.webrtc.TextureBufferImpl$RefCountMonitor: void onRelease(org.webrtc.TextureBufferImpl)
org.webrtc.ExternalAudioProcessingFactory$AudioProcessing: void process(int,int,java.nio.ByteBuffer)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$2: OrientationAwareScreenCapturer$2(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
io.flutter.embedding.engine.FlutterJNI: void ensureAttachedToNative()
io.flutter.embedding.engine.FlutterJNI: void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
org.webrtc.GlShader: int getUniformLocation(java.lang.String)
org.webrtc.Metrics: org.webrtc.Metrics getAndReset()
org.webrtc.VideoCapturer: boolean isScreencast()
com.cloudwebrtc.webrtc.audio.LocalAudioTrack: void removeSink(org.webrtc.AudioTrackSink)
org.webrtc.RtpSender: java.util.List nativeGetStreams(long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverGetCurrentDirection(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.CameraCapturer$9: void run()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityCreated(android.app.Activity,android.os.Bundle)
org.webrtc.SurfaceEglRenderer: void surfaceChanged(android.view.SurfaceHolder,int,int,int)
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind fromAudioDevice(com.twilio.audioswitch.AudioDevice)
org.webrtc.PeerConnectionFactory$Options: boolean getDisableNetworkMonitor()
org.webrtc.EglBase14Impl$Context: long getNativeEglContext()
org.webrtc.SoftwareVideoEncoderFactory: long nativeCreate(long,long,org.webrtc.VideoCodecInfo)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnectionInternal(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.MediaConstraints,org.webrtc.PeerConnection$Observer,org.webrtc.SSLCertificateVerifier)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onStart(androidx.lifecycle.LifecycleOwner)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType valueOf(java.lang.String)
androidx.window.extensions.core.util.function.Predicate: boolean test(java.lang.Object)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values()
org.webrtc.DefaultVideoEncoderFactory: DefaultVideoEncoderFactory(org.webrtc.VideoEncoderFactory)
org.webrtc.RtpParameters$Encoding: boolean getActive()
org.webrtc.FrameCryptorKeyProvider: byte[] exportKey(java.lang.String,int)
org.webrtc.PeerConnection$SignalingState: PeerConnection$SignalingState(java.lang.String,int)
org.webrtc.NV12Buffer: int getHeight()
org.webrtc.FrameCryptorKeyProvider: boolean nativeSetSharedKey(long,int,byte[])
org.webrtc.PeerConnection: void close()
org.webrtc.RtpSender: boolean setTrack(org.webrtc.MediaStreamTrack,boolean)
org.webrtc.VideoFrame$TextureBuffer$Type: VideoFrame$TextureBuffer$Type(java.lang.String,int,int)
androidx.core.view.ViewCompat$Api21Impl: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)
org.webrtc.audio.WebRtcAudioUtils: java.lang.String audioSourceToString(int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: io.flutter.plugin.common.BinaryMessenger getMessenger()
org.webrtc.CameraEnumerationAndroid: void reportCameraResolution(org.webrtc.Histogram,org.webrtc.Size)
org.webrtc.audio.WebRtcAudioRecord: boolean enableBuiltInNS(boolean)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setHostname(java.lang.String)
org.webrtc.FrameCryptorKeyProvider: byte[] nativeExportSharedKey(long,int)
org.webrtc.audio.WebRtcAudioTrack: int channelCountToConfiguration(int)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void surfaceDestroyed()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseHardwareAcousticEchoCanceler(boolean)
org.webrtc.YuvHelper: void nativeCopyPlane(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Drawable loadDrawable(android.graphics.drawable.Icon,android.content.Context)
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)
org.webrtc.IceCandidate: java.lang.String getSdpMid()
io.flutter.embedding.engine.FlutterJNI: float getScaledFontSize(float,int)
org.webrtc.CameraCapturer$7: void run()
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType fromNativeIndex(int)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void setFpsReduction(float)
org.webrtc.VideoFrame$TextureBuffer$-CC: org.webrtc.VideoFrame$TextureBuffer $default$applyTransformMatrix(org.webrtc.VideoFrame$TextureBuffer,android.graphics.Matrix,int,int)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onStop(androidx.lifecycle.LifecycleOwner)
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeStableInsets()
org.webrtc.PeerConnection: org.webrtc.PeerConnection$PeerConnectionState nativeConnectionState()
io.flutter.embedding.engine.FlutterJNI: void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$PeerConnectionState connectionState()
org.webrtc.VideoFileRenderer: void lambda$onFrame$0(org.webrtc.VideoFrame)
com.cloudwebrtc.webrtc.audio.AudioProcessingAdapter: AudioProcessingAdapter()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverStop(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglBase: void release()
org.webrtc.WrappedNativeVideoEncoder: long createNative(long)
org.webrtc.CameraVideoCapturer$CameraStatistics$1: void run()
org.webrtc.VideoEncoder$Settings: VideoEncoder$Settings(int,int,int,int,int,int,boolean)
com.cloudwebrtc.webrtc.GetUserMediaImpl$6: void onCameraSwitchError(java.lang.String)
io.flutter.embedding.android.FlutterView: void setWindowInfoListenerDisplayFeatures(androidx.window.layout.WindowLayoutInfo)
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy[] $values()
com.cloudwebrtc.webrtc.record.VideoFileRenderer: VideoFileRenderer(java.lang.String,org.webrtc.EglBase$Context,boolean)
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState valueOf(java.lang.String)
org.webrtc.VideoFrame$Buffer: void retain()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void pauseVideo()
org.webrtc.PeerConnection: org.webrtc.PeerConnection$SignalingState nativeSignalingState()
org.webrtc.FramerateBitrateAdjuster: void setTargets(int,double)
org.webrtc.MediaStream: boolean addTrack(org.webrtc.AudioTrack)
org.webrtc.Camera2Enumerator: java.util.List convertSizes(android.util.Size[])
org.webrtc.Camera1Helper: java.util.List getSupportedFormats(int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: ImeSyncDeferringInsetsCallback(android.view.View)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionSetRemoteDescription(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.video.LocalVideoTrack: LocalVideoTrack(org.webrtc.VideoTrack)
org.webrtc.SurfaceViewRenderer: void onFrameResolutionChanged(int,int,int)
org.webrtc.HardwareVideoEncoder$BusyCount: void waitForZero()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$1: void run()
androidx.core.view.ViewCompat$Api28Impl: java.lang.CharSequence getAccessibilityPaneTitle(android.view.View)
org.webrtc.SurfaceViewRenderer: void setScalingType(org.webrtc.RendererCommon$ScalingType,org.webrtc.RendererCommon$ScalingType)
androidx.window.layout.adapter.sidecar.SidecarCompat$TranslatingCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
org.webrtc.FrameCryptor: int getKeyIndex()
androidx.core.view.WindowInsetsCompat$Impl30: void copyRootViewBounds(android.view.View)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushString(java.lang.String)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setStableInsets(androidx.core.graphics.Insets)
org.webrtc.VideoTrack: void removeSink(org.webrtc.VideoSink)
org.webrtc.GlTextureFrameBuffer: int getTextureId()
org.webrtc.VideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.RtpParameters$HeaderExtension: int getId()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void start()
org.webrtc.RenderSynchronizer: void openRenderWindow()
org.webrtc.VideoEncoderWrapper: boolean getScalingSettingsOn(org.webrtc.VideoEncoder$ScalingSettings)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$IceGatheringState iceGatheringState()
org.webrtc.PeerConnectionFactory: void initialize(org.webrtc.PeerConnectionFactory$InitializationOptions)
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: org.webrtc.MediaConstraints parseMediaConstraints(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.PeerConnection: void nativeCreateOffer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)
org.webrtc.PeerConnection: void nativeFreeOwnedPeerConnection(long)
com.cloudwebrtc.webrtc.audio.PlaybackSamplesReadyCallbackAdapter: PlaybackSamplesReadyCallbackAdapter()
org.webrtc.audio.JavaAudioDeviceModule: boolean setNoiseSuppressorEnabled(boolean)
org.webrtc.EglBase: boolean hasSurface()
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState[] values()
org.webrtc.CameraEnumerationAndroid: org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange getClosestSupportedFramerateRange(java.util.List,int)
org.webrtc.GlGenericDrawer: void prepareShader(org.webrtc.GlGenericDrawer$ShaderType,float[],int,int,int,int)
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: int getDeviceDefaultOrientation()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderSetKey(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.ScreenCapturerAndroid$1: void run()
com.cloudwebrtc.webrtc.CameraEventsHandler: void waitForCameraClosed()
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraError(java.lang.String)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$stop$4()
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType valueOf(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void trackDispose(java.lang.String)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: boolean lambda$registerWith$0(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,io.flutter.view.FlutterNativeView)
com.cloudwebrtc.webrtc.video.LocalVideoTrack: void onCapturerStarted(boolean)
org.webrtc.WrappedNativeVideoDecoder: java.lang.String getImplementationName()
io.flutter.plugins.pathprovider.PathProviderPlugin: PathProviderPlugin()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: java.lang.String getString(int)
org.webrtc.ThreadUtils$2: void run()
org.webrtc.Histogram: org.webrtc.Histogram createEnumeration(java.lang.String,int)
org.webrtc.GlTextureFrameBuffer: int getWidth()
org.webrtc.BitrateAdjuster: void reportEncodedFrame(int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionClose(java.lang.String)
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus[] $values()
org.webrtc.WrappedNativeI420Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
org.webrtc.audio.WebRtcAudioRecord: WebRtcAudioRecord(android.content.Context,java.util.concurrent.ScheduledExecutorService,android.media.AudioManager,int,int,org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback,org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback,boolean,boolean)
org.webrtc.HardwareVideoEncoder: boolean isEncodingStatisticsSupported()
androidx.core.view.WindowInsetsCompat$Impl21: void setStableInsets(androidx.core.graphics.Insets)
org.webrtc.Camera2Enumerator: java.util.List getSupportedFormats(java.lang.String)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void dataChannelClose(java.lang.String)
com.cloudwebrtc.webrtc.CameraEventsHandler: void waitForCameraOpen()
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityCreated(android.app.Activity,android.os.Bundle)
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy valueOf(java.lang.String)
org.webrtc.Camera2Capturer: void changeCaptureFormat(int,int,int)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus initEncode$lambda$0(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onAddTrack(org.webrtc.RtpReceiver,org.webrtc.MediaStream[])
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void success(java.lang.Object)
org.webrtc.Camera1Session: int getFrameOrientation()
org.webrtc.RtpSender: java.lang.String nativeGetMediaType(long)
org.webrtc.ScreenCapturerAndroid: long getNumCapturedFrames()
org.webrtc.RenderSynchronizer: void lambda$registerListener$1()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5: void onCreateFailure(java.lang.String)
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityPaused(android.app.Activity)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: com.cloudwebrtc.webrtc.utils.ObjectType getType(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void dispatchEmptyPlatformMessage(java.lang.String,int)
androidx.profileinstaller.ProfileInstallReceiver: ProfileInstallReceiver()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseStereoOutput(boolean)
org.webrtc.PeerConnectionFactory: long nativeCreateLocalMediaStream(long,java.lang.String)
org.webrtc.RtpTransceiver: void setCodecPreferences(java.util.List)
org.webrtc.DataChannel: int id()
org.webrtc.MediaStream: void removeAudioTrack(long)
com.cloudwebrtc.webrtc.GetUserMediaImpl$3: void invoke(java.lang.Object[])
org.webrtc.NetworkChangeDetector$NetworkInformation: NetworkChangeDetector$NetworkInformation(java.lang.String,org.webrtc.NetworkChangeDetector$ConnectionType,org.webrtc.NetworkChangeDetector$ConnectionType,long,org.webrtc.NetworkChangeDetector$IPAddress[])
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings()
org.webrtc.RtpReceiver: long getNativeRtpReceiver()
androidx.core.view.WindowInsetsCompat$Impl: void copyRootViewBounds(android.view.View)
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int frameSize(int,int,int)
org.webrtc.NV12Buffer: NV12Buffer(int,int,int,int,java.nio.ByteBuffer,java.lang.Runnable)
org.webrtc.audio.JavaAudioDeviceModule: JavaAudioDeviceModule(android.content.Context,android.media.AudioManager,org.webrtc.audio.WebRtcAudioRecord,org.webrtc.audio.WebRtcAudioTrack,int,int,boolean,boolean)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsetsAnimation$Callback getAnimationCallback()
org.webrtc.PeerConnectionFactory: void printStackTrace(org.webrtc.PeerConnectionFactory$ThreadInfo,boolean)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: java.util.List getActiveNetworkList()
org.webrtc.DataChannel: long getNativeDataChannel()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View$OnApplyWindowInsetsListener getInsetsListener()
org.webrtc.NetworkMonitorAutoDetect: boolean isReceiverRegisteredForTesting()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setAudioConfiguration(java.util.Map)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: JavaAudioDeviceModule$AudioTrackStartErrorCode(java.lang.String,int)
org.webrtc.EncodedImage: void release()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverGetCurrentDirection(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.DataChannel$Init: int getMaxRetransmitTimeMs()
org.webrtc.CameraEnumerationAndroid$ClosestComparator: CameraEnumerationAndroid$ClosestComparator()
org.webrtc.NetworkMonitorAutoDetect: long networkToNetId(android.net.Network)
org.webrtc.JniCommon: JniCommon()
org.webrtc.RtpParameters$Codec: org.webrtc.MediaStreamTrack$MediaType getKind()
org.webrtc.TimestampAligner: long nativeTranslateTimestamp(long,long)
org.webrtc.TimestampAligner: long translateTimestamp(long)
org.webrtc.MediaCodecWrapper: android.media.MediaFormat getOutputFormat()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: MethodCallHandlerImpl$4(com.cloudwebrtc.webrtc.MethodCallHandlerImpl,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.VideoEncoder$Settings: VideoEncoder$Settings(int,int,int,int,int,int,boolean,org.webrtc.VideoEncoder$Capabilities)
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
org.webrtc.NetworkChangeDetector$IPAddress: NetworkChangeDetector$IPAddress(byte[])
org.webrtc.NetworkMonitorAutoDetect$NetworkState: boolean isConnected()
org.webrtc.YuvHelper: void copyPlane(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions$Builder setEnableAes128Sha1_32CryptoCipher(boolean)
org.webrtc.VideoEncoderFactory$VideoEncoderSelector: org.webrtc.VideoCodecInfo onEncoderBroken()
org.webrtc.EglBase10Impl: void createSurfaceInternal(java.lang.Object)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: SimulcastVideoEncoderFactoryWrapper(org.webrtc.EglBase$Context,boolean,boolean)
org.webrtc.audio.WebRtcAudioEffects: void enable(int)
org.webrtc.PeerConnection$RTCConfiguration: boolean getSuspendBelowMinBitrate()
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onNetworkChanged(android.net.Network)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String)
org.webrtc.MediaStreamTrack$State: MediaStreamTrack$State(java.lang.String,int)
org.webrtc.CryptoOptions$Srtp: boolean getEnableAes128Sha1_32CryptoCipher()
org.webrtc.audio.WebRtcAudioTrack: WebRtcAudioTrack(android.content.Context,android.media.AudioManager)
org.webrtc.video.CustomVideoDecoderFactory: CustomVideoDecoderFactory(org.webrtc.EglBase$Context)
com.cloudwebrtc.webrtc.utils.EglUtils: org.webrtc.EglBase getRootEglBase()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getScreencastMinBitrate()
org.webrtc.SurfaceTextureHelper: void release()
com.cloudwebrtc.webrtc.R: R()
org.webrtc.RtpTransceiver: org.webrtc.RtpSender getSender()
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLContext getContext()
io.flutter.embedding.engine.FlutterOverlaySurface: FlutterOverlaySurface(int,android.view.Surface)
org.webrtc.VideoEncoder$ScalingSettings: VideoEncoder$ScalingSettings()
org.webrtc.FileVideoCapturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: com.cloudwebrtc.webrtc.utils.ConstraintsMap getMap(java.lang.String)
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState()
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$CandidateNetworkPolicy getCandidateNetworkPolicy()
org.webrtc.CryptoOptions$SFrame: CryptoOptions$SFrame(org.webrtc.CryptoOptions,boolean)
org.webrtc.CameraSession$CreateSessionCallback: void onFailure(org.webrtc.CameraSession$FailureType,java.lang.String)
org.webrtc.VideoEncoder: java.lang.String getImplementationName()
org.webrtc.Predicate$1: Predicate$1(org.webrtc.Predicate,org.webrtc.Predicate)
org.webrtc.DataChannel: DataChannel(long)
org.webrtc.EglBase$ConfigBuilder: EglBase$ConfigBuilder()
org.webrtc.PeerConnectionFactory$ThreadInfo: PeerConnectionFactory$ThreadInfo(java.lang.Thread,int)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int getNetworkSubType()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: boolean putLocalTrack(java.lang.String,com.cloudwebrtc.webrtc.LocalTrack)
org.webrtc.TextureBufferImpl: android.graphics.Matrix getTransformMatrix()
org.webrtc.audio.WebRtcAudioEffects: boolean isEffectTypeAvailable(java.util.UUID,java.util.UUID)
io.flutter.view.AccessibilityViewEmbedder: boolean onAccessibilityHoverEvent(int,android.view.MotionEvent)
org.webrtc.WrappedNativeI420Buffer: int getHeight()
org.webrtc.CameraVideoCapturer$CameraStatistics: void addFrame()
org.webrtc.SoftwareVideoDecoderFactory: long nativeCreateFactory()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: java.nio.ByteBuffer getInputBuffer(int)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: WindowInsetsCompat$BuilderImpl29()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: void onSetFailure(java.lang.String)
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils: android.util.Size getCameraBoundaries(android.hardware.camera2.CameraCharacteristics,android.hardware.camera2.CaptureRequest$Builder)
org.webrtc.EglBase10Impl$Context: long getNativeEglContext()
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int hashCode()
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate: NetworkMonitorAutoDetect$WifiManagerDelegate()
org.webrtc.WrappedNativeVideoDecoder: org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo)
org.webrtc.YuvHelper: void I420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)
org.webrtc.audio.WebRtcAudioRecord: boolean isAudioConfigVerified()
org.webrtc.CameraCapturer$4: CameraCapturer$4(org.webrtc.CameraCapturer)
io.flutter.plugin.platform.PlatformViewWrapper: void setLayoutParams(android.widget.FrameLayout$LayoutParams)
org.webrtc.RtpTransceiver: org.webrtc.RtpTransceiver$RtpTransceiverDirection getCurrentDirection()
org.webrtc.Camera1Session: org.webrtc.CameraEnumerationAndroid$CaptureFormat findClosestCaptureFormat(android.hardware.Camera$Parameters,int,int,int)
org.webrtc.VideoTrack: void nativeFreeSink(long)
org.webrtc.CameraCapturer: java.lang.String getCameraName()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State[] $values()
org.webrtc.PeerConnection: java.util.List getTransceivers()
org.webrtc.audio.WebRtcAudioTrack: void reportWebRtcAudioTrackError(java.lang.String)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode valueOf(java.lang.String)
org.webrtc.VideoProcessor$FrameAdaptationParameters: VideoProcessor$FrameAdaptationParameters(int,int,int,int,int,int,long,boolean)
org.webrtc.RtpSender: void setStreams(java.util.List)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void lambda$success$0(java.lang.Object)
org.webrtc.AudioTrack: void addSink(org.webrtc.AudioTrackSink)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int getUnderlyingNetworkSubtypeForVpn()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putLong(java.lang.String,long)
org.webrtc.RtcCertificatePem: RtcCertificatePem(java.lang.String,java.lang.String)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setVideoDecoderFactory(org.webrtc.VideoDecoderFactory)
org.webrtc.CameraSession$Events: void onCameraClosed(org.webrtc.CameraSession)
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.content.Intent access$002(com.cloudwebrtc.webrtc.GetUserMediaImpl,android.content.Intent)
org.webrtc.PeerConnection: java.util.List nativeGetReceivers()
org.webrtc.EglRenderer: void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer)
org.webrtc.PeerConnection$IceServer: boolean equals(java.lang.Object)
org.webrtc.GlTextureFrameBuffer: void release()
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onFirstFrameAvailable()
org.webrtc.audio.JavaAudioDeviceModule: void setPreferredInputDevice(android.media.AudioDeviceInfo)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamTrackSetVolume(java.lang.String,double,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState valueOf(java.lang.String)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: kotlin.Unit lambda$startListening$1(java.util.List,com.twilio.audioswitch.AudioDevice)
androidx.core.app.NotificationManagerCompat$Api24Impl: int getImportance(android.app.NotificationManager)
androidx.core.view.ViewCompat$Api21Impl: java.lang.String getTransitionName(android.view.View)
org.webrtc.EglBase14Impl: boolean hasSurface()
io.flutter.embedding.engine.FlutterJNI: void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int)
org.webrtc.NativeCapturerObserver: void onCapturerStopped()
org.webrtc.EglBase10Impl$Context: EglBase10Impl$Context(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLContext,javax.microedition.khronos.egl.EGLConfig)
org.webrtc.RtpParameters$Codec: java.lang.Integer getClockRate()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setFixedSize(int,int)
org.webrtc.EglBase14Impl$EglConnection: void makeCurrent(android.opengl.EGLSurface)
org.webrtc.Camera2Session$CameraCaptureCallback: Camera2Session$CameraCaptureCallback()
org.webrtc.AndroidVideoDecoder: void releaseCodecOnOutputThread()
org.webrtc.NetworkChangeDetector$Observer: void onNetworkPreference(java.util.List,int)
org.webrtc.VideoFrameDrawer: void drawFrame(org.webrtc.VideoFrame,org.webrtc.RendererCommon$GlDrawer,android.graphics.Matrix,int,int,int,int)
org.webrtc.TextureBufferImpl: org.webrtc.TextureBufferImpl applyTransformMatrix(android.graphics.Matrix,int,int,int,int)
org.webrtc.PeerConnectionDependencies$Builder: org.webrtc.PeerConnectionDependencies createPeerConnectionDependencies()
org.webrtc.PeerConnectionFactory: void nativeInitializeInternalTracer()
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: void stopRecording()
io.flutter.embedding.android.FlutterView: void setVisibility(int)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setNativeLibraryLoader(org.webrtc.NativeLibraryLoader)
org.webrtc.WrappedVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus valueOf(java.lang.String)
com.cloudwebrtc.webrtc.video.camera.SdkCapabilityChecker: boolean supportsEncoderProfiles()
org.webrtc.Camera1Session: void listenForBytebufferFrames()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onSelectedCandidatePairChanged(org.webrtc.CandidatePairChangeEvent)
androidx.core.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
org.webrtc.Logging: void enableLogTimeStamps()
org.webrtc.PeerConnection$RTCConfiguration: boolean getDisableIPv6OnWifi()
org.webrtc.RTCStats: org.webrtc.RTCStats create(long,java.lang.String,java.lang.String,java.util.Map)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoFrame$Buffer copyI420Buffer(java.nio.ByteBuffer,int,int,int,int)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[])
org.webrtc.PeerConnection: void nativeSetLocalDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)
org.webrtc.Camera2Session$CameraStateCallback: void onClosed(android.hardware.camera2.CameraDevice)
org.webrtc.Camera2Session: void create(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,android.hardware.camera2.CameraManager,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.VideoFrameDrawer: void drawFrame(org.webrtc.VideoFrame,org.webrtc.RendererCommon$GlDrawer,android.graphics.Matrix)
org.webrtc.RtpTransceiver: void nativeStopStandard(long)
org.webrtc.FrameCryptorFactory: FrameCryptorFactory()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int)
io.flutter.embedding.engine.FlutterJNI: void nativeSetSemanticsEnabled(long,boolean)
org.webrtc.NetworkMonitor: void notifyObserversOfNetworkPreference(java.util.List,int)
com.cloudwebrtc.webrtc.StateProvider: com.cloudwebrtc.webrtc.LocalTrack getLocalTrack(java.lang.String)
org.webrtc.Camera2Session: Camera2Session(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,android.hardware.camera2.CameraManager,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.BitrateAdjuster: int getAdjustedBitrateBps()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getRootStableInsets()
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState[] $values()
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getPlaybackHeadPosition()
org.webrtc.VideoSource: void adaptOutputFormat(org.webrtc.VideoSource$AspectRatio,java.lang.Integer,org.webrtc.VideoSource$AspectRatio,java.lang.Integer,java.lang.Integer)
org.webrtc.TimestampAligner: long nativeCreateTimestampAligner()
org.webrtc.CameraCapturer: void stopCapture()
org.webrtc.YuvConverter$ShaderCallbacks: void setPlaneV()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean shouldUpdate()
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int getMinBitrateBps()
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind[] $values()
io.flutter.embedding.android.FlutterImageView: android.view.Surface getSurface()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setSampleRate(int)
org.webrtc.SurfaceTextureHelper$2: void onDestroy(org.webrtc.TextureBufferImpl)
org.webrtc.MediaStreamTrack: MediaStreamTrack(long)
org.webrtc.audio.WebRtcAudioRecord: void nativeCacheDirectBufferAddress(long,java.nio.ByteBuffer)
org.webrtc.audio.JavaAudioDeviceModule: long getNativeAudioDeviceModulePointer()
org.webrtc.RtpSender: void nativeSetFrameEncryptor(long,long)
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem generateCertificate(org.webrtc.PeerConnection$KeyType)
com.cloudwebrtc.webrtc.video.VideoCapturerInfo: VideoCapturerInfo()
org.webrtc.Predicate: org.webrtc.Predicate and(org.webrtc.Predicate)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void resultError(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RTCStats: double getTimestampUs()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.Map access$000(com.cloudwebrtc.webrtc.MethodCallHandlerImpl)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate)
io.flutter.view.AccessibilityViewEmbedder: void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo)
org.webrtc.PeerConnectionFactory: void checkInitializeHasBeenCalled()
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy valueOf(java.lang.String)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void updatePreferredDeviceList(boolean)
org.webrtc.GlGenericDrawer: void release()
org.webrtc.audio.WebRtcAudioRecord: boolean checkDeviceMatch(android.media.AudioDeviceInfo,android.media.AudioDeviceInfo)
org.webrtc.Camera2Capturer: void printStackTrace()
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpTransceiver getRtpTransceiverById(java.lang.String)
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State[] values()
org.webrtc.EglRenderer$2: void run()
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void notImplemented()
org.webrtc.ContextUtils: ContextUtils()
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: AudioTrackInterceptor(android.media.AudioTrack,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
com.cloudwebrtc.webrtc.StateProvider: java.lang.String getNextStreamUUID()
io.flutter.embedding.engine.FlutterJNI: boolean nativeGetIsSoftwareRenderingEnabled()
org.webrtc.EglBase14Impl: void detachCurrent()
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
org.webrtc.EglBase14Impl: org.webrtc.EglBase14Impl$Context getEglBaseContext()
org.webrtc.RTCStatsReport: RTCStatsReport(long,java.util.Map)
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.BitrateAdjuster createBitrateAdjuster(org.webrtc.VideoCodecMimeType,java.lang.String)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void restartIce()
org.webrtc.HardwareVideoEncoder$BusyCount: void decrement()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: NetworkMonitorAutoDetect$ConnectivityManagerDelegate(android.net.ConnectivityManager,java.util.Set,java.lang.String)
org.webrtc.VideoEncoder$RateControlParameters: VideoEncoder$RateControlParameters(org.webrtc.VideoEncoder$BitrateAllocation,double)
org.webrtc.PeerConnection: void nativeSetRemoteDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)
org.webrtc.YuvConverter: org.webrtc.VideoFrame$I420Buffer convertInternal(org.webrtc.VideoFrame$TextureBuffer)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityDestroyed(android.app.Activity)
org.webrtc.NetworkMonitor: org.webrtc.NetworkMonitorAutoDetect createAndSetAutoDetectForTest(android.content.Context,java.lang.String)
org.webrtc.VideoCodecStatus: int getNumber()
org.webrtc.FrameCryptorKeyProvider: byte[] nativeExportKey(long,java.lang.String,int)
org.webrtc.ExternalAudioProcessingFactory: void setRenderPreProcessing(org.webrtc.ExternalAudioProcessingFactory$AudioProcessing)
org.webrtc.PeerConnection$RTCConfiguration: boolean getEnableIceGatheringOnAnyAddressPorts()
org.webrtc.PeerConnectionFactory: boolean startInternalTracingCapture(java.lang.String)
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getResId(java.lang.Object)
org.webrtc.AndroidVideoDecoder$1: void run()
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: androidx.window.extensions.area.ExtensionWindowAreaPresentation getRearDisplayPresentation()
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType[] $values()
org.webrtc.MediaStream: boolean nativeAddVideoTrackToNativeStream(long,long)
io.flutter.view.TextureRegistry$SurfaceProducer: void setCallback(io.flutter.view.TextureRegistry$SurfaceProducer$Callback)
com.cloudwebrtc.webrtc.audio.RecordSamplesReadyCallbackAdapter: void addCallback(org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
org.webrtc.RtpParameters$Encoding: RtpParameters$Encoding(java.lang.String,boolean,java.lang.Double)
org.webrtc.RtpParameters$HeaderExtension: java.lang.String getUri()
org.webrtc.ExternalAudioProcessingFactory: void setBypassFlagForRenderPre(boolean)
androidx.core.view.WindowInsetsCompat$Impl: boolean equals(java.lang.Object)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: PeerConnectionFactory$InitializationOptions$Builder(android.content.Context)
org.webrtc.PeerConnection$Observer: void onIceCandidate(org.webrtc.IceCandidate)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings$lambda$4(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
org.webrtc.EglBase10Impl: boolean hasSurface()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverGetDirection(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.Camera2Session: void openCamera()
org.webrtc.VideoFrameDrawer$YuvUploader: VideoFrameDrawer$YuvUploader()
org.webrtc.PeerConnection$RTCConfiguration: PeerConnection$RTCConfiguration(java.util.List)
android.support.v4.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
org.webrtc.RtcCertificatePem: java.lang.String getCertificate()
org.webrtc.FrameCryptorFactory: org.webrtc.FrameCryptorKeyProvider nativeCreateFrameCryptorKeyProvider(boolean,byte[],int,byte[],int,int,boolean)
org.webrtc.AudioEncoderFactoryFactory: long createNativeAudioEncoderFactory()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void selectAudioOutput(com.cloudwebrtc.webrtc.audio.AudioDeviceKind)
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State fromNativeIndex(int)
org.webrtc.CameraSession$Events: void onCameraError(org.webrtc.CameraSession,java.lang.String)
org.webrtc.FrameDecryptor: long getNativeFrameDecryptor()
org.webrtc.MediaCodecVideoDecoderFactory: boolean isSupportedCodec(android.media.MediaCodecInfo,org.webrtc.VideoCodecMimeType)
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void release()
org.webrtc.VideoEncoder$ScalingSettings: VideoEncoder$ScalingSettings(boolean)
org.webrtc.PeerConnectionFactory$Options: int getNetworkIgnoreMask()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void onFrame(org.webrtc.VideoFrame)
io.flutter.view.AccessibilityViewEmbedder: void cacheVirtualIdMappings(android.view.View,int,int)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$SdpSemantics getSdpSemantics()
org.webrtc.FileVideoCapturer: void stopCapture()
org.webrtc.JavaI420Buffer: int getStrideU()
org.webrtc.SoftwareVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
io.flutter.embedding.engine.FlutterJNI: void onSurfaceWindowChanged(android.view.Surface)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: WindowInsetsCompat$BuilderImpl20()
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector getNetworkChangeDetector()
org.webrtc.AndroidVideoDecoder: void deliverDecodedFrame()
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState valueOf(java.lang.String)
org.webrtc.audio.VolumeLogger: void start()
org.webrtc.SimulcastVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.MediaStreamTrack: java.lang.String kind()
org.webrtc.PeerConnection: org.webrtc.RtpSender addTrack(org.webrtc.MediaStreamTrack)
org.webrtc.Camera1Enumerator: boolean isBackFacing(java.lang.String)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorSetKeyIndex(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.Logging: java.lang.String getStackTraceString(java.lang.Throwable)
org.webrtc.CameraSession$Events: void onCameraOpening()
org.webrtc.FrameCryptorFactory: org.webrtc.FrameCryptor createFrameCryptorForRtpSender(org.webrtc.PeerConnectionFactory,org.webrtc.RtpSender,java.lang.String,org.webrtc.FrameCryptorAlgorithm,org.webrtc.FrameCryptorKeyProvider)
org.webrtc.audio.AudioDeviceModule: boolean setPreferredMicrophoneFieldDimension(float)
org.webrtc.GlTextureFrameBuffer: int getFrameBufferId()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus release()
org.webrtc.RtpParameters$Encoding: java.lang.Double getScaleResolutionDownBy()
org.webrtc.CalledByNativeUnchecked: java.lang.String value()
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$ContinualGatheringPolicy getContinualGatheringPolicy()
org.webrtc.LibaomAv1Encoder: long nativeCreate(long)
org.webrtc.audio.WebRtcAudioRecord: java.lang.String audioStateToString(int)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
org.webrtc.RTCStatsReport: java.lang.String toString()
org.webrtc.audio.WebRtcAudioUtils: boolean runningOnEmulator()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setSamplesReadyCallback(org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
org.webrtc.VideoDecoderFactory$-CC: org.webrtc.VideoCodecInfo[] $default$getSupportedCodecs(org.webrtc.VideoDecoderFactory)
org.webrtc.SurfaceViewRenderer: void postOrRun(java.lang.Runnable)
org.webrtc.VideoSource: void dispose()
org.webrtc.RtpParameters$Encoding: java.lang.Integer getMinBitrateBps()
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference fromNativeIndex(int)
org.webrtc.Camera1Session: void lambda$listenForTextureFrames$0(org.webrtc.VideoFrame)
org.webrtc.FrameCryptor: void setEnabled(boolean)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: EglBase10Impl$1FakeSurfaceHolder(org.webrtc.EglBase10Impl,android.view.Surface)
org.webrtc.DtmfSender: boolean nativeCanInsertDtmf(long)
com.cloudwebrtc.webrtc.video.LocalVideoTrack: void onCapturerStopped()
io.flutter.embedding.engine.FlutterJNI: void onBeginFrame()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus release()
androidx.core.view.ViewCompat$Api21Impl: void callCompatInsetAnimationCallback(android.view.WindowInsets,android.view.View)
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLDisplay getDisplay()
org.webrtc.Camera2Session$CameraStateCallback: void onDisconnected(android.hardware.camera2.CameraDevice)
org.webrtc.DataChannel: java.lang.String nativeLabel()
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type valueOf(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void restartIce(java.lang.String)
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: void parseConstraints(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.util.List)
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void addRearDisplayStatusListener(androidx.window.extensions.core.util.function.Consumer)
org.webrtc.RendererCommon$VideoLayoutMeasure: void setVisibleFraction(float,float)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkChangeDetector$NetworkInformation networkToInfo(android.net.Network)
org.webrtc.VideoEncoder$EncoderInfo: VideoEncoder$EncoderInfo(int,boolean)
org.webrtc.FramerateBitrateAdjuster: FramerateBitrateAdjuster()
org.webrtc.EglThread$HandlerWithExceptionCallbacks: void removeExceptionCallback(java.lang.Runnable)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.view.Surface getSurface()
io.flutter.embedding.engine.FlutterJNI: void onSurfaceCreated(android.view.Surface)
androidx.core.view.ViewCompat$Api21Impl: void stopNestedScroll(android.view.View)
org.webrtc.RtpParameters$Encoding: java.lang.Integer getMaxBitrateBps()
org.webrtc.DtmfSender: int duration()
org.webrtc.EglRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float)
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: android.view.Display getDisplay()
org.webrtc.SurfaceTextureHelper: SurfaceTextureHelper(org.webrtc.EglBase$Context,android.os.Handler,boolean,org.webrtc.YuvConverter,org.webrtc.SurfaceTextureHelper$FrameRefMonitor)
org.webrtc.CameraCapturer$5: CameraCapturer$5(org.webrtc.CameraCapturer)
org.webrtc.VideoFrame$Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
com.cloudwebrtc.webrtc.video.camera.CameraUtils: android.hardware.camera2.params.MeteringRectangle convertPointToMeteringRectangle(android.util.Size,double,double,io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation)
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType valueOf(java.lang.String)
org.webrtc.PeerConnectionFactory: long getNativeOwnedFactoryAndThreads()
org.webrtc.PeerConnection: org.webrtc.DataChannel createDataChannel(java.lang.String,org.webrtc.DataChannel$Init)
org.webrtc.FrameEncryptor: long getNativeFrameEncryptor()
org.webrtc.EglBase14Impl: void makeCurrent()
org.webrtc.StatsReport$Value: java.lang.String toString()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void dispose()
org.webrtc.RtpCapabilities$HeaderExtensionCapability: java.lang.String getUri()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl(android.media.MediaCodec)
org.webrtc.PeerConnectionDependencies$Builder: org.webrtc.PeerConnectionDependencies$Builder setSSLCertificateVerifier(org.webrtc.SSLCertificateVerifier)
org.webrtc.VideoEncoder$-CC: boolean $default$isHardwareEncoder(org.webrtc.VideoEncoder)
org.webrtc.RtpTransceiver$RtpTransceiverDirection: RtpTransceiver$RtpTransceiverDirection(java.lang.String,int,int)
org.webrtc.FileVideoCapturer$VideoReader: org.webrtc.VideoFrame getNextFrame()
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType[] values()
org.webrtc.NV12Buffer: void retain()
org.webrtc.BuiltinAudioDecoderFactoryFactory: long nativeCreateBuiltinAudioDecoderFactory()
org.webrtc.MediaConstraints$KeyValuePair: MediaConstraints$KeyValuePair(java.lang.String,java.lang.String)
org.webrtc.audio.WebRtcAudioUtils: void logAudioDeviceInfo(java.lang.String,android.media.AudioManager)
org.webrtc.audio.WebRtcAudioManager: int getMinOutputFrameSize(int,int)
org.webrtc.RtpReceiver: void checkRtpReceiverExists()
org.webrtc.NetworkMonitorAutoDetect: void registerReceiver()
org.webrtc.Camera2Enumerator: java.util.List getSupportedFormats(android.hardware.camera2.CameraManager,java.lang.String)
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$ConnectionType getConnectionType()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
com.cloudwebrtc.webrtc.LocalTrack: LocalTrack(org.webrtc.MediaStreamTrack)
androidx.versionedparcelable.CustomVersionedParcelable: CustomVersionedParcelable()
org.webrtc.HardwareVideoEncoderFactory: HardwareVideoEncoderFactory(org.webrtc.EglBase$Context,boolean,boolean,org.webrtc.Predicate)
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType fromNativeIndex(int)
io.flutter.plugin.platform.SingleViewPresentation: void onCreate(android.os.Bundle)
org.webrtc.PeerConnection: org.webrtc.SessionDescription getLocalDescription()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorGetEnabled(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionGetStats(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int getSampleRate()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.MediaStreamTrack getRemoteTrack(java.lang.String)
org.webrtc.EglBase10Impl: long nativeGetCurrentNativeEGLContext()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void createLocalMediaStream(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglBase14Impl$EglConnection: void retain()
org.webrtc.YuvConverter$ShaderCallbacks: void setPlaneY()
org.webrtc.RendererCommon: float[] convertMatrixFromAndroidGraphicsMatrix(android.graphics.Matrix)
org.webrtc.RtpTransceiver: void nativeStopInternal(long)
io.flutter.embedding.engine.FlutterJNI: void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler)
org.webrtc.JniCommon: void nativeReleaseRef(long)
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy[] values()
io.flutter.embedding.engine.FlutterJNI: void setRefreshRateFPS(float)
org.webrtc.VideoEncoderFactory$VideoEncoderSelector$-CC: org.webrtc.VideoCodecInfo $default$onResolutionChange(org.webrtc.VideoEncoderFactory$VideoEncoderSelector,int,int)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.util.Map toMap()
org.webrtc.NetworkMonitorAutoDetect: void setIncludeWifiDirect(boolean)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus releaseInternal()
org.webrtc.VideoSource: void setVideoProcessor(org.webrtc.VideoProcessor)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper(org.webrtc.VideoEncoder)
org.webrtc.EncodedImage: int getEncodedHeight()
org.webrtc.JavaI420Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
org.webrtc.RTCStats: java.util.Map getMembers()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderSetSifTrailer(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.CameraEnumerationAndroid$ClosestComparator: int diff(java.lang.Object)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: void releaseCallback(android.net.ConnectivityManager$NetworkCallback)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushArray(com.cloudwebrtc.webrtc.utils.ConstraintsArray)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback: void onWebRtcAudioRecordInitError(java.lang.String)
org.webrtc.DtmfSender: DtmfSender(long)
org.webrtc.VideoEncoder$BitrateAllocation: int getSum()
org.webrtc.VideoEncoderFactory$VideoEncoderSelector: org.webrtc.VideoCodecInfo onAvailableBitrate(int)
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState fromNativeIndex(int)
org.webrtc.EglBase14Impl: void swapBuffers(long)
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: void onActivityPostStarted(android.app.Activity)
org.webrtc.EglBase: void releaseSurface()
org.webrtc.PeerConnection$IceConnectionState: PeerConnection$IceConnectionState(java.lang.String,int)
io.flutter.plugin.platform.PlatformViewWrapper: void setTouchProcessor(io.flutter.embedding.android.AndroidTouchProcessor)
org.webrtc.RtpReceiver: void SetObserver(org.webrtc.RtpReceiver$Observer)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getTransceivers(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void endOfStream()
org.webrtc.Camera1Enumerator: java.lang.String[] getDeviceNames()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getReceivers(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RTCStats: java.lang.String getType()
org.webrtc.AndroidVideoDecoder: void copyPlane(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
xyz.luan.audioplayers.AudioplayersPlugin: AudioplayersPlugin()
androidx.core.view.WindowInsetsCompat$BuilderImpl20: android.view.WindowInsets createWindowInsetsInstance()
org.webrtc.VideoFrameDrawer: int distance(float,float,float,float)
org.webrtc.RenderSynchronizer$Listener: void onRenderWindowClose()
org.webrtc.CameraCapturer$2: void onFrameCaptured(org.webrtc.CameraSession,org.webrtc.VideoFrame)
org.webrtc.VideoSource: void lambda$setVideoProcessor$0(org.webrtc.VideoFrame)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceCandidatesRemoved(org.webrtc.IceCandidate[])
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean checkFieldTrial(java.lang.String,java.lang.String,boolean)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.LocalTrack getLocalTrack(java.lang.String)
org.webrtc.SimulcastVideoEncoder: boolean isHardwareEncoder()
org.webrtc.VideoEncoderFactory$VideoEncoderSelector: void onCurrentEncoder(org.webrtc.VideoCodecInfo)
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind fromTypeName(java.lang.String)
org.webrtc.audio.WebRtcAudioManager: int getSampleRate(android.media.AudioManager)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStarted(android.app.Activity)
org.webrtc.RTCStatsReport: java.util.Map getStatsMap()
org.webrtc.VideoFrame$TextureBuffer: org.webrtc.VideoFrame$TextureBuffer$Type getType()
org.webrtc.audio.WebRtcAudioRecord$1: java.lang.Thread newThread(java.lang.Runnable)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioAttributes(android.media.AudioAttributes)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void reStartCamera(com.cloudwebrtc.webrtc.GetUserMediaImpl$IsCameraEnabled)
org.webrtc.Camera1Capturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
org.webrtc.Metrics$HistogramInfo: Metrics$HistogramInfo(int,int,int)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: double getDouble(java.lang.String)
com.cloudwebrtc.webrtc.LocalTrack: boolean enabled()
org.webrtc.HardwareVideoEncoder: void lambda$deliverEncodedImage$0(int)
org.webrtc.RTCStats: java.lang.String getId()
org.webrtc.RenderSynchronizer: void closeRenderWindow()
org.webrtc.EglBase: void detachCurrent()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: void onCreateFailure(java.lang.String)
com.cloudwebrtc.webrtc.video.camera.CameraRegionUtils: android.graphics.Rect getSensorInfoActiveArraySize(android.hardware.camera2.CameraCharacteristics)
org.webrtc.SoftwareVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState[] $values()
org.webrtc.EglBase10Impl: void createSurface(android.view.Surface)
org.webrtc.BuiltinAudioDecoderFactoryFactory: long createNativeAudioDecoderFactory()
org.webrtc.DataChannel: java.lang.String label()
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$ConnectionType getUnderlyingConnectionTypeForVpn()
org.webrtc.PeerConnection$PortPrunePolicy: PeerConnection$PortPrunePolicy(java.lang.String,int)
org.webrtc.RtpReceiver: java.lang.String id()
org.webrtc.NetworkMonitor: void updateObserverActiveNetworkList(long)
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState[] values()
org.webrtc.RtpSender: long getNativeRtpSender()
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getBufferCapacityInFrames()
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$SFrame getSFrame()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: void onFrameResolutionChanged(int,int,int)
org.webrtc.PlatformSoftwareVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.PeerConnection: boolean removeIceCandidates(org.webrtc.IceCandidate[])
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void endRearDisplaySession()
org.webrtc.RtpCapabilities$CodecCapability: RtpCapabilities$CodecCapability(int,java.lang.String,org.webrtc.MediaStreamTrack$MediaType,java.lang.Integer,java.lang.Integer,java.lang.String,java.util.Map)
org.webrtc.CameraCapturer$5: void run()
org.webrtc.FileVideoCapturer$1: FileVideoCapturer$1(org.webrtc.FileVideoCapturer)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateRefreshRate(float)
org.webrtc.VideoCapturer: void changeCaptureFormat(int,int,int)
com.cloudwebrtc.webrtc.video.camera.DeviceOrientationManager: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation getLastUIOrientation()
org.webrtc.CameraVideoCapturer: void addMediaRecorderToCamera(android.media.MediaRecorder,org.webrtc.CameraVideoCapturer$MediaRecorderHandler)
org.webrtc.MediaCodecWrapper: android.view.Surface createInputSurface()
org.webrtc.PeerConnection: void nativeSetAudioPlayout(boolean)
org.webrtc.PeerConnectionFactory: org.webrtc.VideoSource createVideoSource(boolean,boolean)
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState[] values()
org.webrtc.PeerConnection$RTCConfiguration: boolean getPresumeWritableWhenFullyRelayed()
org.webrtc.MediaStream: long getNativeMediaStream()
org.webrtc.audio.AudioDeviceModule: boolean setNoiseSuppressorEnabled(boolean)
org.webrtc.GlRectDrawer: GlRectDrawer()
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setUsername(java.lang.String)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.net.Uri getUri(java.lang.Object)
org.webrtc.audio.WebRtcAudioEffects: boolean isAcousticEchoCancelerSupported()
org.webrtc.VideoFrameDrawer: void drawFrame(org.webrtc.VideoFrame,org.webrtc.RendererCommon$GlDrawer)
org.webrtc.VideoEncoder$-CC: long $default$createNative(org.webrtc.VideoEncoder,long)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void handleStatsReport(org.webrtc.RTCStatsReport,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.GlGenericDrawer: void drawOes(int,float[],int,int,int,int,int,int)
com.cloudwebrtc.webrtc.utils.EglUtils: EglUtils()
org.webrtc.SurfaceViewRenderer: SurfaceViewRenderer(android.content.Context)
org.webrtc.NetworkMonitorAutoDetect: void onReceive(android.content.Context,android.content.Intent)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void startRearDisplayPresentationSession(android.app.Activity,androidx.window.extensions.core.util.function.Consumer)
org.webrtc.MediaCodecWrapperFactoryImpl: MediaCodecWrapperFactoryImpl()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values()
org.webrtc.YuvHelper: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)
org.webrtc.CameraVideoCapturer: void removeMediaRecorderFromCamera(org.webrtc.CameraVideoCapturer$MediaRecorderHandler)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean hasInternetCapability(android.net.Network)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void lambda$requestPermissions$0(java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback,java.lang.String[],int[])
org.webrtc.DtmfSender: void checkDtmfSenderExists()
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine getAttachedFlutterEngine()
org.webrtc.MediaStreamTrack: java.lang.String nativeGetId(long)
androidx.lifecycle.ProcessLifecycleOwner$attach$1: ProcessLifecycleOwner$attach$1(androidx.lifecycle.ProcessLifecycleOwner)
org.webrtc.audio.AudioDeviceModule$-CC: boolean $default$setPreferredMicrophoneFieldDimension(org.webrtc.audio.AudioDeviceModule,float)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] values()
